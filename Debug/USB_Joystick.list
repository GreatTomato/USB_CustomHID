
USB_Joystick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007584  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08007718  08007718  00008718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007788  08007788  00009104  2**0
                  CONTENTS
  4 .ARM          00000008  08007788  08007788  00008788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007790  08007790  00009104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007790  08007790  00008790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007794  08007794  00008794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000104  20000000  08007798  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b20  20000104  0800789c  00009104  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c24  0800789c  00009c24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009104  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013e3d  00000000  00000000  00009134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034d4  00000000  00000000  0001cf71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001248  00000000  00000000  00020448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dee  00000000  00000000  00021690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000050b3  00000000  00000000  0002247e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017cb9  00000000  00000000  00027531  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ac40  00000000  00000000  0003f1ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d9e2a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c48  00000000  00000000  000d9e70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000deab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000104 	.word	0x20000104
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08007700 	.word	0x08007700

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000108 	.word	0x20000108
 80001d0:	08007700 	.word	0x08007700

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 fa58 	bl	800097c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f834 	bl	8000538 <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  //MX_GPIO_Init();
  MX_DMA_Init();
 80004d0:	f000 f938 	bl	8000744 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 80004d4:	f006 fc56 	bl	8006d84 <MX_USB_DEVICE_Init>
  //MX_ADC1_Init();
  MX_TIM3_Init();
 80004d8:	f000 f898 	bl	800060c <MX_TIM3_Init>
  MX_TIM4_Init();
 80004dc:	f000 f8e4 	bl	80006a8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim4);
 80004e0:	4810      	ldr	r0, [pc, #64]	@ (8000524 <main+0x60>)
 80004e2:	f002 fe47 	bl	8003174 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA(&hadc1,(uint32_t *) adc_values, 2);
 80004e6:	2202      	movs	r2, #2
 80004e8:	490f      	ldr	r1, [pc, #60]	@ (8000528 <main+0x64>)
 80004ea:	4810      	ldr	r0, [pc, #64]	@ (800052c <main+0x68>)
 80004ec:	f000 fadc 	bl	8000aa8 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim3);
 80004f0:	480f      	ldr	r0, [pc, #60]	@ (8000530 <main+0x6c>)
 80004f2:	f002 fe3f 	bl	8003174 <HAL_TIM_Base_Start_IT>


  //Calibrate sticks
  while (!timer4_flag);
 80004f6:	bf00      	nop
 80004f8:	4b0e      	ldr	r3, [pc, #56]	@ (8000534 <main+0x70>)
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	b2db      	uxtb	r3, r3
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0fa      	beq.n	80004f8 <main+0x34>
  while (!timer4_flag);
 8000502:	bf00      	nop
 8000504:	4b0b      	ldr	r3, [pc, #44]	@ (8000534 <main+0x70>)
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	b2db      	uxtb	r3, r3
 800050a:	2b00      	cmp	r3, #0
 800050c:	d0fa      	beq.n	8000504 <main+0x40>

    /* USER CODE BEGIN 3 */

	  //Have to send USB

	  if(timer4_flag) {
 800050e:	4b09      	ldr	r3, [pc, #36]	@ (8000534 <main+0x70>)
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	b2db      	uxtb	r3, r3
 8000514:	2b00      	cmp	r3, #0
 8000516:	d0fa      	beq.n	800050e <main+0x4a>
		  timer4_flag = 0;
 8000518:	4b06      	ldr	r3, [pc, #24]	@ (8000534 <main+0x70>)
 800051a:	2200      	movs	r2, #0
 800051c:	701a      	strb	r2, [r3, #0]
		  Send_Data_ReportTest();
 800051e:	f006 fc99 	bl	8006e54 <Send_Data_ReportTest>
	  if(timer4_flag) {
 8000522:	e7f4      	b.n	800050e <main+0x4a>
 8000524:	200001b0 	.word	0x200001b0
 8000528:	200001f8 	.word	0x200001f8
 800052c:	20000120 	.word	0x20000120
 8000530:	20000168 	.word	0x20000168
 8000534:	200001fc 	.word	0x200001fc

08000538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b094      	sub	sp, #80	@ 0x50
 800053c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053e:	f107 0320 	add.w	r3, r7, #32
 8000542:	2230      	movs	r2, #48	@ 0x30
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f007 f8ae 	bl	80076a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054c:	f107 030c 	add.w	r3, r7, #12
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	605a      	str	r2, [r3, #4]
 8000556:	609a      	str	r2, [r3, #8]
 8000558:	60da      	str	r2, [r3, #12]
 800055a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800055c:	2300      	movs	r3, #0
 800055e:	60bb      	str	r3, [r7, #8]
 8000560:	4b28      	ldr	r3, [pc, #160]	@ (8000604 <SystemClock_Config+0xcc>)
 8000562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000564:	4a27      	ldr	r2, [pc, #156]	@ (8000604 <SystemClock_Config+0xcc>)
 8000566:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800056a:	6413      	str	r3, [r2, #64]	@ 0x40
 800056c:	4b25      	ldr	r3, [pc, #148]	@ (8000604 <SystemClock_Config+0xcc>)
 800056e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000570:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000574:	60bb      	str	r3, [r7, #8]
 8000576:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000578:	2300      	movs	r3, #0
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	4b22      	ldr	r3, [pc, #136]	@ (8000608 <SystemClock_Config+0xd0>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000584:	4a20      	ldr	r2, [pc, #128]	@ (8000608 <SystemClock_Config+0xd0>)
 8000586:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800058a:	6013      	str	r3, [r2, #0]
 800058c:	4b1e      	ldr	r3, [pc, #120]	@ (8000608 <SystemClock_Config+0xd0>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000594:	607b      	str	r3, [r7, #4]
 8000596:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000598:	2301      	movs	r3, #1
 800059a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800059c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005a0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a2:	2302      	movs	r3, #2
 80005a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005a6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80005ac:	2319      	movs	r3, #25
 80005ae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005b0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80005b4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005b6:	2304      	movs	r3, #4
 80005b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005ba:	2307      	movs	r3, #7
 80005bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005be:	f107 0320 	add.w	r3, r7, #32
 80005c2:	4618      	mov	r0, r3
 80005c4:	f002 f956 	bl	8002874 <HAL_RCC_OscConfig>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005ce:	f000 f8e9 	bl	80007a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d2:	230f      	movs	r3, #15
 80005d4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d6:	2302      	movs	r3, #2
 80005d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80005da:	2380      	movs	r3, #128	@ 0x80
 80005dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e2:	2300      	movs	r3, #0
 80005e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005e6:	f107 030c 	add.w	r3, r7, #12
 80005ea:	2101      	movs	r1, #1
 80005ec:	4618      	mov	r0, r3
 80005ee:	f002 fbb9 	bl	8002d64 <HAL_RCC_ClockConfig>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005f8:	f000 f8d4 	bl	80007a4 <Error_Handler>
  }
}
 80005fc:	bf00      	nop
 80005fe:	3750      	adds	r7, #80	@ 0x50
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	40023800 	.word	0x40023800
 8000608:	40007000 	.word	0x40007000

0800060c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b086      	sub	sp, #24
 8000610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000612:	f107 0308 	add.w	r3, r7, #8
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	605a      	str	r2, [r3, #4]
 800061c:	609a      	str	r2, [r3, #8]
 800061e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000620:	463b      	mov	r3, r7
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000628:	4b1d      	ldr	r3, [pc, #116]	@ (80006a0 <MX_TIM3_Init+0x94>)
 800062a:	4a1e      	ldr	r2, [pc, #120]	@ (80006a4 <MX_TIM3_Init+0x98>)
 800062c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 420-1;
 800062e:	4b1c      	ldr	r3, [pc, #112]	@ (80006a0 <MX_TIM3_Init+0x94>)
 8000630:	f240 12a3 	movw	r2, #419	@ 0x1a3
 8000634:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000636:	4b1a      	ldr	r3, [pc, #104]	@ (80006a0 <MX_TIM3_Init+0x94>)
 8000638:	2200      	movs	r2, #0
 800063a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 800063c:	4b18      	ldr	r3, [pc, #96]	@ (80006a0 <MX_TIM3_Init+0x94>)
 800063e:	2263      	movs	r2, #99	@ 0x63
 8000640:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000642:	4b17      	ldr	r3, [pc, #92]	@ (80006a0 <MX_TIM3_Init+0x94>)
 8000644:	2200      	movs	r2, #0
 8000646:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000648:	4b15      	ldr	r3, [pc, #84]	@ (80006a0 <MX_TIM3_Init+0x94>)
 800064a:	2200      	movs	r2, #0
 800064c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800064e:	4814      	ldr	r0, [pc, #80]	@ (80006a0 <MX_TIM3_Init+0x94>)
 8000650:	f002 fd40 	bl	80030d4 <HAL_TIM_Base_Init>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800065a:	f000 f8a3 	bl	80007a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800065e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000662:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000664:	f107 0308 	add.w	r3, r7, #8
 8000668:	4619      	mov	r1, r3
 800066a:	480d      	ldr	r0, [pc, #52]	@ (80006a0 <MX_TIM3_Init+0x94>)
 800066c:	f002 fed4 	bl	8003418 <HAL_TIM_ConfigClockSource>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000676:	f000 f895 	bl	80007a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 800067a:	2310      	movs	r3, #16
 800067c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800067e:	2300      	movs	r3, #0
 8000680:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000682:	463b      	mov	r3, r7
 8000684:	4619      	mov	r1, r3
 8000686:	4806      	ldr	r0, [pc, #24]	@ (80006a0 <MX_TIM3_Init+0x94>)
 8000688:	f003 f8dc 	bl	8003844 <HAL_TIMEx_MasterConfigSynchronization>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000692:	f000 f887 	bl	80007a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000696:	bf00      	nop
 8000698:	3718      	adds	r7, #24
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	20000168 	.word	0x20000168
 80006a4:	40000400 	.word	0x40000400

080006a8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b086      	sub	sp, #24
 80006ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006ae:	f107 0308 	add.w	r3, r7, #8
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	605a      	str	r2, [r3, #4]
 80006b8:	609a      	str	r2, [r3, #8]
 80006ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006bc:	463b      	mov	r3, r7
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80006c4:	4b1d      	ldr	r3, [pc, #116]	@ (800073c <MX_TIM4_Init+0x94>)
 80006c6:	4a1e      	ldr	r2, [pc, #120]	@ (8000740 <MX_TIM4_Init+0x98>)
 80006c8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 420-1;
 80006ca:	4b1c      	ldr	r3, [pc, #112]	@ (800073c <MX_TIM4_Init+0x94>)
 80006cc:	f240 12a3 	movw	r2, #419	@ 0x1a3
 80006d0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006d2:	4b1a      	ldr	r3, [pc, #104]	@ (800073c <MX_TIM4_Init+0x94>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 80006d8:	4b18      	ldr	r3, [pc, #96]	@ (800073c <MX_TIM4_Init+0x94>)
 80006da:	2263      	movs	r2, #99	@ 0x63
 80006dc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006de:	4b17      	ldr	r3, [pc, #92]	@ (800073c <MX_TIM4_Init+0x94>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006e4:	4b15      	ldr	r3, [pc, #84]	@ (800073c <MX_TIM4_Init+0x94>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80006ea:	4814      	ldr	r0, [pc, #80]	@ (800073c <MX_TIM4_Init+0x94>)
 80006ec:	f002 fcf2 	bl	80030d4 <HAL_TIM_Base_Init>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80006f6:	f000 f855 	bl	80007a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000700:	f107 0308 	add.w	r3, r7, #8
 8000704:	4619      	mov	r1, r3
 8000706:	480d      	ldr	r0, [pc, #52]	@ (800073c <MX_TIM4_Init+0x94>)
 8000708:	f002 fe86 	bl	8003418 <HAL_TIM_ConfigClockSource>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000712:	f000 f847 	bl	80007a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000716:	2300      	movs	r3, #0
 8000718:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800071a:	2300      	movs	r3, #0
 800071c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800071e:	463b      	mov	r3, r7
 8000720:	4619      	mov	r1, r3
 8000722:	4806      	ldr	r0, [pc, #24]	@ (800073c <MX_TIM4_Init+0x94>)
 8000724:	f003 f88e 	bl	8003844 <HAL_TIMEx_MasterConfigSynchronization>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800072e:	f000 f839 	bl	80007a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000732:	bf00      	nop
 8000734:	3718      	adds	r7, #24
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	200001b0 	.word	0x200001b0
 8000740:	40000800 	.word	0x40000800

08000744 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	4b09      	ldr	r3, [pc, #36]	@ (8000774 <MX_DMA_Init+0x30>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000752:	4a08      	ldr	r2, [pc, #32]	@ (8000774 <MX_DMA_Init+0x30>)
 8000754:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000758:	6313      	str	r3, [r2, #48]	@ 0x30
 800075a:	4b06      	ldr	r3, [pc, #24]	@ (8000774 <MX_DMA_Init+0x30>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	687b      	ldr	r3, [r7, #4]

}
 8000766:	bf00      	nop
 8000768:	370c      	adds	r7, #12
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	40023800 	.word	0x40023800

08000778 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM4)  // Check if the interrupt is for Timer 4
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a05      	ldr	r2, [pc, #20]	@ (800079c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000786:	4293      	cmp	r3, r2
 8000788:	d102      	bne.n	8000790 <HAL_TIM_PeriodElapsedCallback+0x18>
    {
        //Need to update data on USB ASAP
        timer4_flag = 1;
 800078a:	4b05      	ldr	r3, [pc, #20]	@ (80007a0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800078c:	2201      	movs	r2, #1
 800078e:	701a      	strb	r2, [r3, #0]
    }
}
 8000790:	bf00      	nop
 8000792:	370c      	adds	r7, #12
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr
 800079c:	40000800 	.word	0x40000800
 80007a0:	200001fc 	.word	0x200001fc

080007a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a8:	b672      	cpsid	i
}
 80007aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ac:	bf00      	nop
 80007ae:	e7fd      	b.n	80007ac <Error_Handler+0x8>

080007b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	607b      	str	r3, [r7, #4]
 80007ba:	4b10      	ldr	r3, [pc, #64]	@ (80007fc <HAL_MspInit+0x4c>)
 80007bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007be:	4a0f      	ldr	r2, [pc, #60]	@ (80007fc <HAL_MspInit+0x4c>)
 80007c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80007c6:	4b0d      	ldr	r3, [pc, #52]	@ (80007fc <HAL_MspInit+0x4c>)
 80007c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	603b      	str	r3, [r7, #0]
 80007d6:	4b09      	ldr	r3, [pc, #36]	@ (80007fc <HAL_MspInit+0x4c>)
 80007d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007da:	4a08      	ldr	r2, [pc, #32]	@ (80007fc <HAL_MspInit+0x4c>)
 80007dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80007e2:	4b06      	ldr	r3, [pc, #24]	@ (80007fc <HAL_MspInit+0x4c>)
 80007e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007ea:	603b      	str	r3, [r7, #0]
 80007ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ee:	bf00      	nop
 80007f0:	370c      	adds	r7, #12
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	40023800 	.word	0x40023800

08000800 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a18      	ldr	r2, [pc, #96]	@ (8000870 <HAL_TIM_Base_MspInit+0x70>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d10e      	bne.n	8000830 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	60fb      	str	r3, [r7, #12]
 8000816:	4b17      	ldr	r3, [pc, #92]	@ (8000874 <HAL_TIM_Base_MspInit+0x74>)
 8000818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800081a:	4a16      	ldr	r2, [pc, #88]	@ (8000874 <HAL_TIM_Base_MspInit+0x74>)
 800081c:	f043 0302 	orr.w	r3, r3, #2
 8000820:	6413      	str	r3, [r2, #64]	@ 0x40
 8000822:	4b14      	ldr	r3, [pc, #80]	@ (8000874 <HAL_TIM_Base_MspInit+0x74>)
 8000824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000826:	f003 0302 	and.w	r3, r3, #2
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800082e:	e01a      	b.n	8000866 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM4)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a10      	ldr	r2, [pc, #64]	@ (8000878 <HAL_TIM_Base_MspInit+0x78>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d115      	bne.n	8000866 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	60bb      	str	r3, [r7, #8]
 800083e:	4b0d      	ldr	r3, [pc, #52]	@ (8000874 <HAL_TIM_Base_MspInit+0x74>)
 8000840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000842:	4a0c      	ldr	r2, [pc, #48]	@ (8000874 <HAL_TIM_Base_MspInit+0x74>)
 8000844:	f043 0304 	orr.w	r3, r3, #4
 8000848:	6413      	str	r3, [r2, #64]	@ 0x40
 800084a:	4b0a      	ldr	r3, [pc, #40]	@ (8000874 <HAL_TIM_Base_MspInit+0x74>)
 800084c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800084e:	f003 0304 	and.w	r3, r3, #4
 8000852:	60bb      	str	r3, [r7, #8]
 8000854:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8000856:	2200      	movs	r2, #0
 8000858:	2101      	movs	r1, #1
 800085a:	201e      	movs	r0, #30
 800085c:	f000 fb8f 	bl	8000f7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000860:	201e      	movs	r0, #30
 8000862:	f000 fba8 	bl	8000fb6 <HAL_NVIC_EnableIRQ>
}
 8000866:	bf00      	nop
 8000868:	3710      	adds	r7, #16
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40000400 	.word	0x40000400
 8000874:	40023800 	.word	0x40023800
 8000878:	40000800 	.word	0x40000800

0800087c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000880:	bf00      	nop
 8000882:	e7fd      	b.n	8000880 <NMI_Handler+0x4>

08000884 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000888:	bf00      	nop
 800088a:	e7fd      	b.n	8000888 <HardFault_Handler+0x4>

0800088c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000890:	bf00      	nop
 8000892:	e7fd      	b.n	8000890 <MemManage_Handler+0x4>

08000894 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000898:	bf00      	nop
 800089a:	e7fd      	b.n	8000898 <BusFault_Handler+0x4>

0800089c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008a0:	bf00      	nop
 80008a2:	e7fd      	b.n	80008a0 <UsageFault_Handler+0x4>

080008a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008a8:	bf00      	nop
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr

080008b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008b2:	b480      	push	{r7}
 80008b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008b6:	bf00      	nop
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr

080008c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008c4:	bf00      	nop
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr

080008ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008d2:	f000 f8a5 	bl	8000a20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
	...

080008dc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80008e0:	4802      	ldr	r0, [pc, #8]	@ (80008ec <TIM4_IRQHandler+0x10>)
 80008e2:	f002 fca9 	bl	8003238 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	200001b0 	.word	0x200001b0

080008f0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80008f4:	4802      	ldr	r0, [pc, #8]	@ (8000900 <OTG_FS_IRQHandler+0x10>)
 80008f6:	f000 fec7 	bl	8001688 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	200006e8 	.word	0x200006e8

08000904 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000908:	4b06      	ldr	r3, [pc, #24]	@ (8000924 <SystemInit+0x20>)
 800090a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800090e:	4a05      	ldr	r2, [pc, #20]	@ (8000924 <SystemInit+0x20>)
 8000910:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000914:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	e000ed00 	.word	0xe000ed00

08000928 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000928:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000960 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800092c:	f7ff ffea 	bl	8000904 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000930:	480c      	ldr	r0, [pc, #48]	@ (8000964 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000932:	490d      	ldr	r1, [pc, #52]	@ (8000968 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000934:	4a0d      	ldr	r2, [pc, #52]	@ (800096c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000936:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000938:	e002      	b.n	8000940 <LoopCopyDataInit>

0800093a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800093a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800093c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800093e:	3304      	adds	r3, #4

08000940 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000940:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000942:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000944:	d3f9      	bcc.n	800093a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000946:	4a0a      	ldr	r2, [pc, #40]	@ (8000970 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000948:	4c0a      	ldr	r4, [pc, #40]	@ (8000974 <LoopFillZerobss+0x22>)
  movs r3, #0
 800094a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800094c:	e001      	b.n	8000952 <LoopFillZerobss>

0800094e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800094e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000950:	3204      	adds	r2, #4

08000952 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000952:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000954:	d3fb      	bcc.n	800094e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000956:	f006 feaf 	bl	80076b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800095a:	f7ff fdb3 	bl	80004c4 <main>
  bx  lr    
 800095e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000960:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000964:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000968:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 800096c:	08007798 	.word	0x08007798
  ldr r2, =_sbss
 8000970:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 8000974:	20000c24 	.word	0x20000c24

08000978 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000978:	e7fe      	b.n	8000978 <ADC_IRQHandler>
	...

0800097c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000980:	4b0e      	ldr	r3, [pc, #56]	@ (80009bc <HAL_Init+0x40>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a0d      	ldr	r2, [pc, #52]	@ (80009bc <HAL_Init+0x40>)
 8000986:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800098a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800098c:	4b0b      	ldr	r3, [pc, #44]	@ (80009bc <HAL_Init+0x40>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a0a      	ldr	r2, [pc, #40]	@ (80009bc <HAL_Init+0x40>)
 8000992:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000996:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000998:	4b08      	ldr	r3, [pc, #32]	@ (80009bc <HAL_Init+0x40>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a07      	ldr	r2, [pc, #28]	@ (80009bc <HAL_Init+0x40>)
 800099e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009a4:	2003      	movs	r0, #3
 80009a6:	f000 fadf 	bl	8000f68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009aa:	200f      	movs	r0, #15
 80009ac:	f000 f808 	bl	80009c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009b0:	f7ff fefe 	bl	80007b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009b4:	2300      	movs	r3, #0
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40023c00 	.word	0x40023c00

080009c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009c8:	4b12      	ldr	r3, [pc, #72]	@ (8000a14 <HAL_InitTick+0x54>)
 80009ca:	681a      	ldr	r2, [r3, #0]
 80009cc:	4b12      	ldr	r3, [pc, #72]	@ (8000a18 <HAL_InitTick+0x58>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	4619      	mov	r1, r3
 80009d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80009da:	fbb2 f3f3 	udiv	r3, r2, r3
 80009de:	4618      	mov	r0, r3
 80009e0:	f000 faf7 	bl	8000fd2 <HAL_SYSTICK_Config>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009ea:	2301      	movs	r3, #1
 80009ec:	e00e      	b.n	8000a0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	2b0f      	cmp	r3, #15
 80009f2:	d80a      	bhi.n	8000a0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009f4:	2200      	movs	r2, #0
 80009f6:	6879      	ldr	r1, [r7, #4]
 80009f8:	f04f 30ff 	mov.w	r0, #4294967295
 80009fc:	f000 fabf 	bl	8000f7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a00:	4a06      	ldr	r2, [pc, #24]	@ (8000a1c <HAL_InitTick+0x5c>)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a06:	2300      	movs	r3, #0
 8000a08:	e000      	b.n	8000a0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a0a:	2301      	movs	r3, #1
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3708      	adds	r7, #8
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	20000000 	.word	0x20000000
 8000a18:	20000008 	.word	0x20000008
 8000a1c:	20000004 	.word	0x20000004

08000a20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a24:	4b06      	ldr	r3, [pc, #24]	@ (8000a40 <HAL_IncTick+0x20>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	461a      	mov	r2, r3
 8000a2a:	4b06      	ldr	r3, [pc, #24]	@ (8000a44 <HAL_IncTick+0x24>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4413      	add	r3, r2
 8000a30:	4a04      	ldr	r2, [pc, #16]	@ (8000a44 <HAL_IncTick+0x24>)
 8000a32:	6013      	str	r3, [r2, #0]
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	20000008 	.word	0x20000008
 8000a44:	20000200 	.word	0x20000200

08000a48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a4c:	4b03      	ldr	r3, [pc, #12]	@ (8000a5c <HAL_GetTick+0x14>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	20000200 	.word	0x20000200

08000a60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a68:	f7ff ffee 	bl	8000a48 <HAL_GetTick>
 8000a6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a78:	d005      	beq.n	8000a86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000aa4 <HAL_Delay+0x44>)
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	461a      	mov	r2, r3
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	4413      	add	r3, r2
 8000a84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a86:	bf00      	nop
 8000a88:	f7ff ffde 	bl	8000a48 <HAL_GetTick>
 8000a8c:	4602      	mov	r2, r0
 8000a8e:	68bb      	ldr	r3, [r7, #8]
 8000a90:	1ad3      	subs	r3, r2, r3
 8000a92:	68fa      	ldr	r2, [r7, #12]
 8000a94:	429a      	cmp	r2, r3
 8000a96:	d8f7      	bhi.n	8000a88 <HAL_Delay+0x28>
  {
  }
}
 8000a98:	bf00      	nop
 8000a9a:	bf00      	nop
 8000a9c:	3710      	adds	r7, #16
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	20000008 	.word	0x20000008

08000aa8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b086      	sub	sp, #24
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	60f8      	str	r0, [r7, #12]
 8000ab0:	60b9      	str	r1, [r7, #8]
 8000ab2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000abe:	2b01      	cmp	r3, #1
 8000ac0:	d101      	bne.n	8000ac6 <HAL_ADC_Start_DMA+0x1e>
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	e0ce      	b.n	8000c64 <HAL_ADC_Start_DMA+0x1bc>
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	2201      	movs	r2, #1
 8000aca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	689b      	ldr	r3, [r3, #8]
 8000ad4:	f003 0301 	and.w	r3, r3, #1
 8000ad8:	2b01      	cmp	r3, #1
 8000ada:	d018      	beq.n	8000b0e <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	689a      	ldr	r2, [r3, #8]
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	f042 0201 	orr.w	r2, r2, #1
 8000aea:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000aec:	4b5f      	ldr	r3, [pc, #380]	@ (8000c6c <HAL_ADC_Start_DMA+0x1c4>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a5f      	ldr	r2, [pc, #380]	@ (8000c70 <HAL_ADC_Start_DMA+0x1c8>)
 8000af2:	fba2 2303 	umull	r2, r3, r2, r3
 8000af6:	0c9a      	lsrs	r2, r3, #18
 8000af8:	4613      	mov	r3, r2
 8000afa:	005b      	lsls	r3, r3, #1
 8000afc:	4413      	add	r3, r2
 8000afe:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8000b00:	e002      	b.n	8000b08 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8000b02:	693b      	ldr	r3, [r7, #16]
 8000b04:	3b01      	subs	r3, #1
 8000b06:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8000b08:	693b      	ldr	r3, [r7, #16]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d1f9      	bne.n	8000b02 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	689b      	ldr	r3, [r3, #8]
 8000b14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000b1c:	d107      	bne.n	8000b2e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	689a      	ldr	r2, [r3, #8]
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000b2c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	689b      	ldr	r3, [r3, #8]
 8000b34:	f003 0301 	and.w	r3, r3, #1
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	f040 8086 	bne.w	8000c4a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b42:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000b46:	f023 0301 	bic.w	r3, r3, #1
 8000b4a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d007      	beq.n	8000b70 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b64:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000b68:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b74:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000b7c:	d106      	bne.n	8000b8c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b82:	f023 0206 	bic.w	r2, r3, #6
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	645a      	str	r2, [r3, #68]	@ 0x44
 8000b8a:	e002      	b.n	8000b92 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	2200      	movs	r2, #0
 8000b90:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	2200      	movs	r2, #0
 8000b96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000b9a:	4b36      	ldr	r3, [pc, #216]	@ (8000c74 <HAL_ADC_Start_DMA+0x1cc>)
 8000b9c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ba2:	4a35      	ldr	r2, [pc, #212]	@ (8000c78 <HAL_ADC_Start_DMA+0x1d0>)
 8000ba4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000baa:	4a34      	ldr	r2, [pc, #208]	@ (8000c7c <HAL_ADC_Start_DMA+0x1d4>)
 8000bac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000bb2:	4a33      	ldr	r2, [pc, #204]	@ (8000c80 <HAL_ADC_Start_DMA+0x1d8>)
 8000bb4:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8000bbe:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	685a      	ldr	r2, [r3, #4]
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8000bce:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	689a      	ldr	r2, [r3, #8]
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000bde:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	334c      	adds	r3, #76	@ 0x4c
 8000bea:	4619      	mov	r1, r3
 8000bec:	68ba      	ldr	r2, [r7, #8]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	f000 f9fb 	bl	8000fea <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	f003 031f 	and.w	r3, r3, #31
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d10f      	bne.n	8000c20 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	689b      	ldr	r3, [r3, #8]
 8000c06:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d129      	bne.n	8000c62 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	689a      	ldr	r2, [r3, #8]
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000c1c:	609a      	str	r2, [r3, #8]
 8000c1e:	e020      	b.n	8000c62 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a17      	ldr	r2, [pc, #92]	@ (8000c84 <HAL_ADC_Start_DMA+0x1dc>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d11b      	bne.n	8000c62 <HAL_ADC_Start_DMA+0x1ba>
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	689b      	ldr	r3, [r3, #8]
 8000c30:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d114      	bne.n	8000c62 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	689a      	ldr	r2, [r3, #8]
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	e00b      	b.n	8000c62 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c4e:	f043 0210 	orr.w	r2, r3, #16
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c5a:	f043 0201 	orr.w	r2, r3, #1
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8000c62:	2300      	movs	r3, #0
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3718      	adds	r7, #24
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	20000000 	.word	0x20000000
 8000c70:	431bde83 	.word	0x431bde83
 8000c74:	40012300 	.word	0x40012300
 8000c78:	08000cc5 	.word	0x08000cc5
 8000c7c:	08000d7f 	.word	0x08000d7f
 8000c80:	08000d9b 	.word	0x08000d9b
 8000c84:	40012000 	.word	0x40012000

08000c88 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8000c90:	bf00      	nop
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8000ca4:	bf00      	nop
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr

08000cb0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8000cb8:	bf00      	nop
 8000cba:	370c      	adds	r7, #12
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr

08000cc4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000cd0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d13c      	bne.n	8000d58 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ce2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	689b      	ldr	r3, [r3, #8]
 8000cf0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d12b      	bne.n	8000d50 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d127      	bne.n	8000d50 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d06:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d006      	beq.n	8000d1c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	689b      	ldr	r3, [r3, #8]
 8000d14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d119      	bne.n	8000d50 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	685a      	ldr	r2, [r3, #4]
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f022 0220 	bic.w	r2, r2, #32
 8000d2a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d30:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d3c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d105      	bne.n	8000d50 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d48:	f043 0201 	orr.w	r2, r3, #1
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000d50:	68f8      	ldr	r0, [r7, #12]
 8000d52:	f7ff ff99 	bl	8000c88 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8000d56:	e00e      	b.n	8000d76 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d5c:	f003 0310 	and.w	r3, r3, #16
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d003      	beq.n	8000d6c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8000d64:	68f8      	ldr	r0, [r7, #12]
 8000d66:	f7ff ffa3 	bl	8000cb0 <HAL_ADC_ErrorCallback>
}
 8000d6a:	e004      	b.n	8000d76 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	4798      	blx	r3
}
 8000d76:	bf00      	nop
 8000d78:	3710      	adds	r7, #16
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b084      	sub	sp, #16
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d8a:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8000d8c:	68f8      	ldr	r0, [r7, #12]
 8000d8e:	f7ff ff85 	bl	8000c9c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000d92:	bf00      	nop
 8000d94:	3710      	adds	r7, #16
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b084      	sub	sp, #16
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000da6:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	2240      	movs	r2, #64	@ 0x40
 8000dac:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000db2:	f043 0204 	orr.w	r2, r3, #4
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8000dba:	68f8      	ldr	r0, [r7, #12]
 8000dbc:	f7ff ff78 	bl	8000cb0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000dc0:	bf00      	nop
 8000dc2:	3710      	adds	r7, #16
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b085      	sub	sp, #20
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	f003 0307 	and.w	r3, r3, #7
 8000dd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dd8:	4b0c      	ldr	r3, [pc, #48]	@ (8000e0c <__NVIC_SetPriorityGrouping+0x44>)
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dde:	68ba      	ldr	r2, [r7, #8]
 8000de0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000de4:	4013      	ands	r3, r2
 8000de6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000df0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000df4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000df8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dfa:	4a04      	ldr	r2, [pc, #16]	@ (8000e0c <__NVIC_SetPriorityGrouping+0x44>)
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	60d3      	str	r3, [r2, #12]
}
 8000e00:	bf00      	nop
 8000e02:	3714      	adds	r7, #20
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e14:	4b04      	ldr	r3, [pc, #16]	@ (8000e28 <__NVIC_GetPriorityGrouping+0x18>)
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	0a1b      	lsrs	r3, r3, #8
 8000e1a:	f003 0307 	and.w	r3, r3, #7
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	db0b      	blt.n	8000e56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e3e:	79fb      	ldrb	r3, [r7, #7]
 8000e40:	f003 021f 	and.w	r2, r3, #31
 8000e44:	4907      	ldr	r1, [pc, #28]	@ (8000e64 <__NVIC_EnableIRQ+0x38>)
 8000e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4a:	095b      	lsrs	r3, r3, #5
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e56:	bf00      	nop
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	e000e100 	.word	0xe000e100

08000e68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	6039      	str	r1, [r7, #0]
 8000e72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	db0a      	blt.n	8000e92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	b2da      	uxtb	r2, r3
 8000e80:	490c      	ldr	r1, [pc, #48]	@ (8000eb4 <__NVIC_SetPriority+0x4c>)
 8000e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e86:	0112      	lsls	r2, r2, #4
 8000e88:	b2d2      	uxtb	r2, r2
 8000e8a:	440b      	add	r3, r1
 8000e8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e90:	e00a      	b.n	8000ea8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	b2da      	uxtb	r2, r3
 8000e96:	4908      	ldr	r1, [pc, #32]	@ (8000eb8 <__NVIC_SetPriority+0x50>)
 8000e98:	79fb      	ldrb	r3, [r7, #7]
 8000e9a:	f003 030f 	and.w	r3, r3, #15
 8000e9e:	3b04      	subs	r3, #4
 8000ea0:	0112      	lsls	r2, r2, #4
 8000ea2:	b2d2      	uxtb	r2, r2
 8000ea4:	440b      	add	r3, r1
 8000ea6:	761a      	strb	r2, [r3, #24]
}
 8000ea8:	bf00      	nop
 8000eaa:	370c      	adds	r7, #12
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	e000e100 	.word	0xe000e100
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b089      	sub	sp, #36	@ 0x24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	f003 0307 	and.w	r3, r3, #7
 8000ece:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	f1c3 0307 	rsb	r3, r3, #7
 8000ed6:	2b04      	cmp	r3, #4
 8000ed8:	bf28      	it	cs
 8000eda:	2304      	movcs	r3, #4
 8000edc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	3304      	adds	r3, #4
 8000ee2:	2b06      	cmp	r3, #6
 8000ee4:	d902      	bls.n	8000eec <NVIC_EncodePriority+0x30>
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	3b03      	subs	r3, #3
 8000eea:	e000      	b.n	8000eee <NVIC_EncodePriority+0x32>
 8000eec:	2300      	movs	r3, #0
 8000eee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ef4:	69bb      	ldr	r3, [r7, #24]
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	43da      	mvns	r2, r3
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	401a      	ands	r2, r3
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f04:	f04f 31ff 	mov.w	r1, #4294967295
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f0e:	43d9      	mvns	r1, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f14:	4313      	orrs	r3, r2
         );
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3724      	adds	r7, #36	@ 0x24
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
	...

08000f24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	3b01      	subs	r3, #1
 8000f30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f34:	d301      	bcc.n	8000f3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f36:	2301      	movs	r3, #1
 8000f38:	e00f      	b.n	8000f5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f64 <SysTick_Config+0x40>)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	3b01      	subs	r3, #1
 8000f40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f42:	210f      	movs	r1, #15
 8000f44:	f04f 30ff 	mov.w	r0, #4294967295
 8000f48:	f7ff ff8e 	bl	8000e68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f4c:	4b05      	ldr	r3, [pc, #20]	@ (8000f64 <SysTick_Config+0x40>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f52:	4b04      	ldr	r3, [pc, #16]	@ (8000f64 <SysTick_Config+0x40>)
 8000f54:	2207      	movs	r2, #7
 8000f56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f58:	2300      	movs	r3, #0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	e000e010 	.word	0xe000e010

08000f68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	f7ff ff29 	bl	8000dc8 <__NVIC_SetPriorityGrouping>
}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b086      	sub	sp, #24
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	4603      	mov	r3, r0
 8000f86:	60b9      	str	r1, [r7, #8]
 8000f88:	607a      	str	r2, [r7, #4]
 8000f8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f90:	f7ff ff3e 	bl	8000e10 <__NVIC_GetPriorityGrouping>
 8000f94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	68b9      	ldr	r1, [r7, #8]
 8000f9a:	6978      	ldr	r0, [r7, #20]
 8000f9c:	f7ff ff8e 	bl	8000ebc <NVIC_EncodePriority>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fa6:	4611      	mov	r1, r2
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff ff5d 	bl	8000e68 <__NVIC_SetPriority>
}
 8000fae:	bf00      	nop
 8000fb0:	3718      	adds	r7, #24
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b082      	sub	sp, #8
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff ff31 	bl	8000e2c <__NVIC_EnableIRQ>
}
 8000fca:	bf00      	nop
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b082      	sub	sp, #8
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f7ff ffa2 	bl	8000f24 <SysTick_Config>
 8000fe0:	4603      	mov	r3, r0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b086      	sub	sp, #24
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	60f8      	str	r0, [r7, #12]
 8000ff2:	60b9      	str	r1, [r7, #8]
 8000ff4:	607a      	str	r2, [r7, #4]
 8000ff6:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001000:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001008:	2b01      	cmp	r3, #1
 800100a:	d101      	bne.n	8001010 <HAL_DMA_Start_IT+0x26>
 800100c:	2302      	movs	r3, #2
 800100e:	e040      	b.n	8001092 <HAL_DMA_Start_IT+0xa8>
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	2201      	movs	r2, #1
 8001014:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800101e:	b2db      	uxtb	r3, r3
 8001020:	2b01      	cmp	r3, #1
 8001022:	d12f      	bne.n	8001084 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	2202      	movs	r2, #2
 8001028:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	2200      	movs	r2, #0
 8001030:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	68b9      	ldr	r1, [r7, #8]
 8001038:	68f8      	ldr	r0, [r7, #12]
 800103a:	f000 f82e 	bl	800109a <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001042:	223f      	movs	r2, #63	@ 0x3f
 8001044:	409a      	lsls	r2, r3
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f042 0216 	orr.w	r2, r2, #22
 8001058:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800105e:	2b00      	cmp	r3, #0
 8001060:	d007      	beq.n	8001072 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f042 0208 	orr.w	r2, r2, #8
 8001070:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f042 0201 	orr.w	r2, r2, #1
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	e005      	b.n	8001090 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	2200      	movs	r2, #0
 8001088:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800108c:	2302      	movs	r3, #2
 800108e:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001090:	7dfb      	ldrb	r3, [r7, #23]
}
 8001092:	4618      	mov	r0, r3
 8001094:	3718      	adds	r7, #24
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800109a:	b480      	push	{r7}
 800109c:	b085      	sub	sp, #20
 800109e:	af00      	add	r7, sp, #0
 80010a0:	60f8      	str	r0, [r7, #12]
 80010a2:	60b9      	str	r1, [r7, #8]
 80010a4:	607a      	str	r2, [r7, #4]
 80010a6:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80010b6:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	683a      	ldr	r2, [r7, #0]
 80010be:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	2b40      	cmp	r3, #64	@ 0x40
 80010c6:	d108      	bne.n	80010da <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	68ba      	ldr	r2, [r7, #8]
 80010d6:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80010d8:	e007      	b.n	80010ea <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	68ba      	ldr	r2, [r7, #8]
 80010e0:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	687a      	ldr	r2, [r7, #4]
 80010e8:	60da      	str	r2, [r3, #12]
}
 80010ea:	bf00      	nop
 80010ec:	3714      	adds	r7, #20
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
	...

080010f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b089      	sub	sp, #36	@ 0x24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001102:	2300      	movs	r3, #0
 8001104:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001106:	2300      	movs	r3, #0
 8001108:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800110a:	2300      	movs	r3, #0
 800110c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800110e:	2300      	movs	r3, #0
 8001110:	61fb      	str	r3, [r7, #28]
 8001112:	e159      	b.n	80013c8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001114:	2201      	movs	r2, #1
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	697a      	ldr	r2, [r7, #20]
 8001124:	4013      	ands	r3, r2
 8001126:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	429a      	cmp	r2, r3
 800112e:	f040 8148 	bne.w	80013c2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f003 0303 	and.w	r3, r3, #3
 800113a:	2b01      	cmp	r3, #1
 800113c:	d005      	beq.n	800114a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001146:	2b02      	cmp	r3, #2
 8001148:	d130      	bne.n	80011ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	2203      	movs	r2, #3
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	43db      	mvns	r3, r3
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	4013      	ands	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	68da      	ldr	r2, [r3, #12]
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	4313      	orrs	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001180:	2201      	movs	r2, #1
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	43db      	mvns	r3, r3
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	4013      	ands	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	091b      	lsrs	r3, r3, #4
 8001196:	f003 0201 	and.w	r2, r3, #1
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f003 0303 	and.w	r3, r3, #3
 80011b4:	2b03      	cmp	r3, #3
 80011b6:	d017      	beq.n	80011e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	2203      	movs	r2, #3
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	43db      	mvns	r3, r3
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	4013      	ands	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	689a      	ldr	r2, [r3, #8]
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	4313      	orrs	r3, r2
 80011e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f003 0303 	and.w	r3, r3, #3
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d123      	bne.n	800123c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	08da      	lsrs	r2, r3, #3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3208      	adds	r2, #8
 80011fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001200:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	f003 0307 	and.w	r3, r3, #7
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	220f      	movs	r2, #15
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	43db      	mvns	r3, r3
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4013      	ands	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	691a      	ldr	r2, [r3, #16]
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	f003 0307 	and.w	r3, r3, #7
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	4313      	orrs	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	08da      	lsrs	r2, r3, #3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	3208      	adds	r2, #8
 8001236:	69b9      	ldr	r1, [r7, #24]
 8001238:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	2203      	movs	r2, #3
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	43db      	mvns	r3, r3
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	4013      	ands	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f003 0203 	and.w	r2, r3, #3
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4313      	orrs	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001278:	2b00      	cmp	r3, #0
 800127a:	f000 80a2 	beq.w	80013c2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	4b57      	ldr	r3, [pc, #348]	@ (80013e0 <HAL_GPIO_Init+0x2e8>)
 8001284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001286:	4a56      	ldr	r2, [pc, #344]	@ (80013e0 <HAL_GPIO_Init+0x2e8>)
 8001288:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800128c:	6453      	str	r3, [r2, #68]	@ 0x44
 800128e:	4b54      	ldr	r3, [pc, #336]	@ (80013e0 <HAL_GPIO_Init+0x2e8>)
 8001290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001292:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800129a:	4a52      	ldr	r2, [pc, #328]	@ (80013e4 <HAL_GPIO_Init+0x2ec>)
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	089b      	lsrs	r3, r3, #2
 80012a0:	3302      	adds	r3, #2
 80012a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	f003 0303 	and.w	r3, r3, #3
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	220f      	movs	r2, #15
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	43db      	mvns	r3, r3
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	4013      	ands	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a49      	ldr	r2, [pc, #292]	@ (80013e8 <HAL_GPIO_Init+0x2f0>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d019      	beq.n	80012fa <HAL_GPIO_Init+0x202>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a48      	ldr	r2, [pc, #288]	@ (80013ec <HAL_GPIO_Init+0x2f4>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d013      	beq.n	80012f6 <HAL_GPIO_Init+0x1fe>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a47      	ldr	r2, [pc, #284]	@ (80013f0 <HAL_GPIO_Init+0x2f8>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d00d      	beq.n	80012f2 <HAL_GPIO_Init+0x1fa>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a46      	ldr	r2, [pc, #280]	@ (80013f4 <HAL_GPIO_Init+0x2fc>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d007      	beq.n	80012ee <HAL_GPIO_Init+0x1f6>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a45      	ldr	r2, [pc, #276]	@ (80013f8 <HAL_GPIO_Init+0x300>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d101      	bne.n	80012ea <HAL_GPIO_Init+0x1f2>
 80012e6:	2304      	movs	r3, #4
 80012e8:	e008      	b.n	80012fc <HAL_GPIO_Init+0x204>
 80012ea:	2307      	movs	r3, #7
 80012ec:	e006      	b.n	80012fc <HAL_GPIO_Init+0x204>
 80012ee:	2303      	movs	r3, #3
 80012f0:	e004      	b.n	80012fc <HAL_GPIO_Init+0x204>
 80012f2:	2302      	movs	r3, #2
 80012f4:	e002      	b.n	80012fc <HAL_GPIO_Init+0x204>
 80012f6:	2301      	movs	r3, #1
 80012f8:	e000      	b.n	80012fc <HAL_GPIO_Init+0x204>
 80012fa:	2300      	movs	r3, #0
 80012fc:	69fa      	ldr	r2, [r7, #28]
 80012fe:	f002 0203 	and.w	r2, r2, #3
 8001302:	0092      	lsls	r2, r2, #2
 8001304:	4093      	lsls	r3, r2
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	4313      	orrs	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800130c:	4935      	ldr	r1, [pc, #212]	@ (80013e4 <HAL_GPIO_Init+0x2ec>)
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	089b      	lsrs	r3, r3, #2
 8001312:	3302      	adds	r3, #2
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800131a:	4b38      	ldr	r3, [pc, #224]	@ (80013fc <HAL_GPIO_Init+0x304>)
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	43db      	mvns	r3, r3
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	4013      	ands	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d003      	beq.n	800133e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	4313      	orrs	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800133e:	4a2f      	ldr	r2, [pc, #188]	@ (80013fc <HAL_GPIO_Init+0x304>)
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001344:	4b2d      	ldr	r3, [pc, #180]	@ (80013fc <HAL_GPIO_Init+0x304>)
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	43db      	mvns	r3, r3
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	4013      	ands	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d003      	beq.n	8001368 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	4313      	orrs	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001368:	4a24      	ldr	r2, [pc, #144]	@ (80013fc <HAL_GPIO_Init+0x304>)
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800136e:	4b23      	ldr	r3, [pc, #140]	@ (80013fc <HAL_GPIO_Init+0x304>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	43db      	mvns	r3, r3
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	4013      	ands	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d003      	beq.n	8001392 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	4313      	orrs	r3, r2
 8001390:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001392:	4a1a      	ldr	r2, [pc, #104]	@ (80013fc <HAL_GPIO_Init+0x304>)
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001398:	4b18      	ldr	r3, [pc, #96]	@ (80013fc <HAL_GPIO_Init+0x304>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	43db      	mvns	r3, r3
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4013      	ands	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d003      	beq.n	80013bc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013bc:	4a0f      	ldr	r2, [pc, #60]	@ (80013fc <HAL_GPIO_Init+0x304>)
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	3301      	adds	r3, #1
 80013c6:	61fb      	str	r3, [r7, #28]
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	2b0f      	cmp	r3, #15
 80013cc:	f67f aea2 	bls.w	8001114 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013d0:	bf00      	nop
 80013d2:	bf00      	nop
 80013d4:	3724      	adds	r7, #36	@ 0x24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	40023800 	.word	0x40023800
 80013e4:	40013800 	.word	0x40013800
 80013e8:	40020000 	.word	0x40020000
 80013ec:	40020400 	.word	0x40020400
 80013f0:	40020800 	.word	0x40020800
 80013f4:	40020c00 	.word	0x40020c00
 80013f8:	40021000 	.word	0x40021000
 80013fc:	40013c00 	.word	0x40013c00

08001400 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b086      	sub	sp, #24
 8001404:	af02      	add	r7, sp, #8
 8001406:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d101      	bne.n	8001412 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e101      	b.n	8001616 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800141e:	b2db      	uxtb	r3, r3
 8001420:	2b00      	cmp	r3, #0
 8001422:	d106      	bne.n	8001432 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2200      	movs	r2, #0
 8001428:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f005 fe43 	bl	80070b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2203      	movs	r2, #3
 8001436:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001440:	d102      	bne.n	8001448 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2200      	movs	r2, #0
 8001446:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4618      	mov	r0, r3
 800144e:	f002 fb92 	bl	8003b76 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6818      	ldr	r0, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	7c1a      	ldrb	r2, [r3, #16]
 800145a:	f88d 2000 	strb.w	r2, [sp]
 800145e:	3304      	adds	r3, #4
 8001460:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001462:	f002 fa71 	bl	8003948 <USB_CoreInit>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d005      	beq.n	8001478 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2202      	movs	r2, #2
 8001470:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e0ce      	b.n	8001616 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2100      	movs	r1, #0
 800147e:	4618      	mov	r0, r3
 8001480:	f002 fb8a 	bl	8003b98 <USB_SetCurrentMode>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d005      	beq.n	8001496 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2202      	movs	r2, #2
 800148e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e0bf      	b.n	8001616 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001496:	2300      	movs	r3, #0
 8001498:	73fb      	strb	r3, [r7, #15]
 800149a:	e04a      	b.n	8001532 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800149c:	7bfa      	ldrb	r2, [r7, #15]
 800149e:	6879      	ldr	r1, [r7, #4]
 80014a0:	4613      	mov	r3, r2
 80014a2:	00db      	lsls	r3, r3, #3
 80014a4:	4413      	add	r3, r2
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	440b      	add	r3, r1
 80014aa:	3315      	adds	r3, #21
 80014ac:	2201      	movs	r2, #1
 80014ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80014b0:	7bfa      	ldrb	r2, [r7, #15]
 80014b2:	6879      	ldr	r1, [r7, #4]
 80014b4:	4613      	mov	r3, r2
 80014b6:	00db      	lsls	r3, r3, #3
 80014b8:	4413      	add	r3, r2
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	440b      	add	r3, r1
 80014be:	3314      	adds	r3, #20
 80014c0:	7bfa      	ldrb	r2, [r7, #15]
 80014c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80014c4:	7bfa      	ldrb	r2, [r7, #15]
 80014c6:	7bfb      	ldrb	r3, [r7, #15]
 80014c8:	b298      	uxth	r0, r3
 80014ca:	6879      	ldr	r1, [r7, #4]
 80014cc:	4613      	mov	r3, r2
 80014ce:	00db      	lsls	r3, r3, #3
 80014d0:	4413      	add	r3, r2
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	440b      	add	r3, r1
 80014d6:	332e      	adds	r3, #46	@ 0x2e
 80014d8:	4602      	mov	r2, r0
 80014da:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80014dc:	7bfa      	ldrb	r2, [r7, #15]
 80014de:	6879      	ldr	r1, [r7, #4]
 80014e0:	4613      	mov	r3, r2
 80014e2:	00db      	lsls	r3, r3, #3
 80014e4:	4413      	add	r3, r2
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	440b      	add	r3, r1
 80014ea:	3318      	adds	r3, #24
 80014ec:	2200      	movs	r2, #0
 80014ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80014f0:	7bfa      	ldrb	r2, [r7, #15]
 80014f2:	6879      	ldr	r1, [r7, #4]
 80014f4:	4613      	mov	r3, r2
 80014f6:	00db      	lsls	r3, r3, #3
 80014f8:	4413      	add	r3, r2
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	440b      	add	r3, r1
 80014fe:	331c      	adds	r3, #28
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001504:	7bfa      	ldrb	r2, [r7, #15]
 8001506:	6879      	ldr	r1, [r7, #4]
 8001508:	4613      	mov	r3, r2
 800150a:	00db      	lsls	r3, r3, #3
 800150c:	4413      	add	r3, r2
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	440b      	add	r3, r1
 8001512:	3320      	adds	r3, #32
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001518:	7bfa      	ldrb	r2, [r7, #15]
 800151a:	6879      	ldr	r1, [r7, #4]
 800151c:	4613      	mov	r3, r2
 800151e:	00db      	lsls	r3, r3, #3
 8001520:	4413      	add	r3, r2
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	440b      	add	r3, r1
 8001526:	3324      	adds	r3, #36	@ 0x24
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800152c:	7bfb      	ldrb	r3, [r7, #15]
 800152e:	3301      	adds	r3, #1
 8001530:	73fb      	strb	r3, [r7, #15]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	791b      	ldrb	r3, [r3, #4]
 8001536:	7bfa      	ldrb	r2, [r7, #15]
 8001538:	429a      	cmp	r2, r3
 800153a:	d3af      	bcc.n	800149c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800153c:	2300      	movs	r3, #0
 800153e:	73fb      	strb	r3, [r7, #15]
 8001540:	e044      	b.n	80015cc <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001542:	7bfa      	ldrb	r2, [r7, #15]
 8001544:	6879      	ldr	r1, [r7, #4]
 8001546:	4613      	mov	r3, r2
 8001548:	00db      	lsls	r3, r3, #3
 800154a:	4413      	add	r3, r2
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	440b      	add	r3, r1
 8001550:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001554:	2200      	movs	r2, #0
 8001556:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001558:	7bfa      	ldrb	r2, [r7, #15]
 800155a:	6879      	ldr	r1, [r7, #4]
 800155c:	4613      	mov	r3, r2
 800155e:	00db      	lsls	r3, r3, #3
 8001560:	4413      	add	r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	440b      	add	r3, r1
 8001566:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800156a:	7bfa      	ldrb	r2, [r7, #15]
 800156c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800156e:	7bfa      	ldrb	r2, [r7, #15]
 8001570:	6879      	ldr	r1, [r7, #4]
 8001572:	4613      	mov	r3, r2
 8001574:	00db      	lsls	r3, r3, #3
 8001576:	4413      	add	r3, r2
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	440b      	add	r3, r1
 800157c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001580:	2200      	movs	r2, #0
 8001582:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001584:	7bfa      	ldrb	r2, [r7, #15]
 8001586:	6879      	ldr	r1, [r7, #4]
 8001588:	4613      	mov	r3, r2
 800158a:	00db      	lsls	r3, r3, #3
 800158c:	4413      	add	r3, r2
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	440b      	add	r3, r1
 8001592:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800159a:	7bfa      	ldrb	r2, [r7, #15]
 800159c:	6879      	ldr	r1, [r7, #4]
 800159e:	4613      	mov	r3, r2
 80015a0:	00db      	lsls	r3, r3, #3
 80015a2:	4413      	add	r3, r2
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	440b      	add	r3, r1
 80015a8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80015b0:	7bfa      	ldrb	r2, [r7, #15]
 80015b2:	6879      	ldr	r1, [r7, #4]
 80015b4:	4613      	mov	r3, r2
 80015b6:	00db      	lsls	r3, r3, #3
 80015b8:	4413      	add	r3, r2
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	440b      	add	r3, r1
 80015be:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015c6:	7bfb      	ldrb	r3, [r7, #15]
 80015c8:	3301      	adds	r3, #1
 80015ca:	73fb      	strb	r3, [r7, #15]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	791b      	ldrb	r3, [r3, #4]
 80015d0:	7bfa      	ldrb	r2, [r7, #15]
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d3b5      	bcc.n	8001542 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6818      	ldr	r0, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	7c1a      	ldrb	r2, [r3, #16]
 80015de:	f88d 2000 	strb.w	r2, [sp]
 80015e2:	3304      	adds	r3, #4
 80015e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015e6:	f002 fb23 	bl	8003c30 <USB_DevInit>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d005      	beq.n	80015fc <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2202      	movs	r2, #2
 80015f4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e00c      	b.n	8001616 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2200      	movs	r2, #0
 8001600:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2201      	movs	r2, #1
 8001606:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4618      	mov	r0, r3
 8001610:	f003 fb6d 	bl	8004cee <USB_DevDisconnect>

  return HAL_OK;
 8001614:	2300      	movs	r3, #0
}
 8001616:	4618      	mov	r0, r3
 8001618:	3710      	adds	r7, #16
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b084      	sub	sp, #16
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001632:	2b01      	cmp	r3, #1
 8001634:	d101      	bne.n	800163a <HAL_PCD_Start+0x1c>
 8001636:	2302      	movs	r3, #2
 8001638:	e022      	b.n	8001680 <HAL_PCD_Start+0x62>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2201      	movs	r2, #1
 800163e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	68db      	ldr	r3, [r3, #12]
 8001646:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800164a:	2b00      	cmp	r3, #0
 800164c:	d009      	beq.n	8001662 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001652:	2b01      	cmp	r3, #1
 8001654:	d105      	bne.n	8001662 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800165a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4618      	mov	r0, r3
 8001668:	f002 fa74 	bl	8003b54 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4618      	mov	r0, r3
 8001672:	f003 fb1b 	bl	8004cac <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800167e:	2300      	movs	r3, #0
}
 8001680:	4618      	mov	r0, r3
 8001682:	3710      	adds	r7, #16
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001688:	b590      	push	{r4, r7, lr}
 800168a:	b08d      	sub	sp, #52	@ 0x34
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001696:	6a3b      	ldr	r3, [r7, #32]
 8001698:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4618      	mov	r0, r3
 80016a0:	f003 fbd9 	bl	8004e56 <USB_GetMode>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	f040 848c 	bne.w	8001fc4 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f003 fb3d 	bl	8004d30 <USB_ReadInterrupts>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	f000 8482 	beq.w	8001fc2 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	0a1b      	lsrs	r3, r3, #8
 80016c8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f003 fb2a 	bl	8004d30 <USB_ReadInterrupts>
 80016dc:	4603      	mov	r3, r0
 80016de:	f003 0302 	and.w	r3, r3, #2
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d107      	bne.n	80016f6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	695a      	ldr	r2, [r3, #20]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f002 0202 	and.w	r2, r2, #2
 80016f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f003 fb18 	bl	8004d30 <USB_ReadInterrupts>
 8001700:	4603      	mov	r3, r0
 8001702:	f003 0310 	and.w	r3, r3, #16
 8001706:	2b10      	cmp	r3, #16
 8001708:	d161      	bne.n	80017ce <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	699a      	ldr	r2, [r3, #24]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f022 0210 	bic.w	r2, r2, #16
 8001718:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800171a:	6a3b      	ldr	r3, [r7, #32]
 800171c:	6a1b      	ldr	r3, [r3, #32]
 800171e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	f003 020f 	and.w	r2, r3, #15
 8001726:	4613      	mov	r3, r2
 8001728:	00db      	lsls	r3, r3, #3
 800172a:	4413      	add	r3, r2
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	4413      	add	r3, r2
 8001736:	3304      	adds	r3, #4
 8001738:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	0c5b      	lsrs	r3, r3, #17
 800173e:	f003 030f 	and.w	r3, r3, #15
 8001742:	2b02      	cmp	r3, #2
 8001744:	d124      	bne.n	8001790 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001746:	69ba      	ldr	r2, [r7, #24]
 8001748:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800174c:	4013      	ands	r3, r2
 800174e:	2b00      	cmp	r3, #0
 8001750:	d035      	beq.n	80017be <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001756:	69bb      	ldr	r3, [r7, #24]
 8001758:	091b      	lsrs	r3, r3, #4
 800175a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800175c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001760:	b29b      	uxth	r3, r3
 8001762:	461a      	mov	r2, r3
 8001764:	6a38      	ldr	r0, [r7, #32]
 8001766:	f003 f94f 	bl	8004a08 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	68da      	ldr	r2, [r3, #12]
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	091b      	lsrs	r3, r3, #4
 8001772:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001776:	441a      	add	r2, r3
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	695a      	ldr	r2, [r3, #20]
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	091b      	lsrs	r3, r3, #4
 8001784:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001788:	441a      	add	r2, r3
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	615a      	str	r2, [r3, #20]
 800178e:	e016      	b.n	80017be <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	0c5b      	lsrs	r3, r3, #17
 8001794:	f003 030f 	and.w	r3, r3, #15
 8001798:	2b06      	cmp	r3, #6
 800179a:	d110      	bne.n	80017be <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80017a2:	2208      	movs	r2, #8
 80017a4:	4619      	mov	r1, r3
 80017a6:	6a38      	ldr	r0, [r7, #32]
 80017a8:	f003 f92e 	bl	8004a08 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	695a      	ldr	r2, [r3, #20]
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	091b      	lsrs	r3, r3, #4
 80017b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017b8:	441a      	add	r2, r3
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	699a      	ldr	r2, [r3, #24]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f042 0210 	orr.w	r2, r2, #16
 80017cc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f003 faac 	bl	8004d30 <USB_ReadInterrupts>
 80017d8:	4603      	mov	r3, r0
 80017da:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80017de:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80017e2:	f040 80a7 	bne.w	8001934 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80017e6:	2300      	movs	r3, #0
 80017e8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f003 fab1 	bl	8004d56 <USB_ReadDevAllOutEpInterrupt>
 80017f4:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80017f6:	e099      	b.n	800192c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80017f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	2b00      	cmp	r3, #0
 8001800:	f000 808e 	beq.w	8001920 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800180a:	b2d2      	uxtb	r2, r2
 800180c:	4611      	mov	r1, r2
 800180e:	4618      	mov	r0, r3
 8001810:	f003 fad5 	bl	8004dbe <USB_ReadDevOutEPInterrupt>
 8001814:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	f003 0301 	and.w	r3, r3, #1
 800181c:	2b00      	cmp	r3, #0
 800181e:	d00c      	beq.n	800183a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001822:	015a      	lsls	r2, r3, #5
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	4413      	add	r3, r2
 8001828:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800182c:	461a      	mov	r2, r3
 800182e:	2301      	movs	r3, #1
 8001830:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001832:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f000 fe8b 	bl	8002550 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	f003 0308 	and.w	r3, r3, #8
 8001840:	2b00      	cmp	r3, #0
 8001842:	d00c      	beq.n	800185e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001846:	015a      	lsls	r2, r3, #5
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	4413      	add	r3, r2
 800184c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001850:	461a      	mov	r2, r3
 8001852:	2308      	movs	r3, #8
 8001854:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001856:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f000 ff61 	bl	8002720 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	f003 0310 	and.w	r3, r3, #16
 8001864:	2b00      	cmp	r3, #0
 8001866:	d008      	beq.n	800187a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800186a:	015a      	lsls	r2, r3, #5
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	4413      	add	r3, r2
 8001870:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001874:	461a      	mov	r2, r3
 8001876:	2310      	movs	r3, #16
 8001878:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	f003 0302 	and.w	r3, r3, #2
 8001880:	2b00      	cmp	r3, #0
 8001882:	d030      	beq.n	80018e6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001884:	6a3b      	ldr	r3, [r7, #32]
 8001886:	695b      	ldr	r3, [r3, #20]
 8001888:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800188c:	2b80      	cmp	r3, #128	@ 0x80
 800188e:	d109      	bne.n	80018a4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	69fa      	ldr	r2, [r7, #28]
 800189a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800189e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018a2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80018a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018a6:	4613      	mov	r3, r2
 80018a8:	00db      	lsls	r3, r3, #3
 80018aa:	4413      	add	r3, r2
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	4413      	add	r3, r2
 80018b6:	3304      	adds	r3, #4
 80018b8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	78db      	ldrb	r3, [r3, #3]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d108      	bne.n	80018d4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	2200      	movs	r2, #0
 80018c6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80018c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	4619      	mov	r1, r3
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f005 fcee 	bl	80072b0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80018d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d6:	015a      	lsls	r2, r3, #5
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	4413      	add	r3, r2
 80018dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80018e0:	461a      	mov	r2, r3
 80018e2:	2302      	movs	r3, #2
 80018e4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	f003 0320 	and.w	r3, r3, #32
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d008      	beq.n	8001902 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80018f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f2:	015a      	lsls	r2, r3, #5
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	4413      	add	r3, r2
 80018f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80018fc:	461a      	mov	r2, r3
 80018fe:	2320      	movs	r3, #32
 8001900:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001908:	2b00      	cmp	r3, #0
 800190a:	d009      	beq.n	8001920 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800190c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800190e:	015a      	lsls	r2, r3, #5
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	4413      	add	r3, r2
 8001914:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001918:	461a      	mov	r2, r3
 800191a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800191e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001922:	3301      	adds	r3, #1
 8001924:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001928:	085b      	lsrs	r3, r3, #1
 800192a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800192c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800192e:	2b00      	cmp	r3, #0
 8001930:	f47f af62 	bne.w	80017f8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4618      	mov	r0, r3
 800193a:	f003 f9f9 	bl	8004d30 <USB_ReadInterrupts>
 800193e:	4603      	mov	r3, r0
 8001940:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001944:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001948:	f040 80db 	bne.w	8001b02 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4618      	mov	r0, r3
 8001952:	f003 fa1a 	bl	8004d8a <USB_ReadDevAllInEpInterrupt>
 8001956:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001958:	2300      	movs	r3, #0
 800195a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800195c:	e0cd      	b.n	8001afa <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800195e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001960:	f003 0301 	and.w	r3, r3, #1
 8001964:	2b00      	cmp	r3, #0
 8001966:	f000 80c2 	beq.w	8001aee <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001970:	b2d2      	uxtb	r2, r2
 8001972:	4611      	mov	r1, r2
 8001974:	4618      	mov	r0, r3
 8001976:	f003 fa40 	bl	8004dfa <USB_ReadDevInEPInterrupt>
 800197a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	2b00      	cmp	r3, #0
 8001984:	d057      	beq.n	8001a36 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001988:	f003 030f 	and.w	r3, r3, #15
 800198c:	2201      	movs	r2, #1
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800199a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	43db      	mvns	r3, r3
 80019a0:	69f9      	ldr	r1, [r7, #28]
 80019a2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80019a6:	4013      	ands	r3, r2
 80019a8:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80019aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ac:	015a      	lsls	r2, r3, #5
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	4413      	add	r3, r2
 80019b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80019b6:	461a      	mov	r2, r3
 80019b8:	2301      	movs	r3, #1
 80019ba:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	799b      	ldrb	r3, [r3, #6]
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d132      	bne.n	8001a2a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80019c4:	6879      	ldr	r1, [r7, #4]
 80019c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019c8:	4613      	mov	r3, r2
 80019ca:	00db      	lsls	r3, r3, #3
 80019cc:	4413      	add	r3, r2
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	440b      	add	r3, r1
 80019d2:	3320      	adds	r3, #32
 80019d4:	6819      	ldr	r1, [r3, #0]
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019da:	4613      	mov	r3, r2
 80019dc:	00db      	lsls	r3, r3, #3
 80019de:	4413      	add	r3, r2
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	4403      	add	r3, r0
 80019e4:	331c      	adds	r3, #28
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4419      	add	r1, r3
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019ee:	4613      	mov	r3, r2
 80019f0:	00db      	lsls	r3, r3, #3
 80019f2:	4413      	add	r3, r2
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	4403      	add	r3, r0
 80019f8:	3320      	adds	r3, #32
 80019fa:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80019fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d113      	bne.n	8001a2a <HAL_PCD_IRQHandler+0x3a2>
 8001a02:	6879      	ldr	r1, [r7, #4]
 8001a04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a06:	4613      	mov	r3, r2
 8001a08:	00db      	lsls	r3, r3, #3
 8001a0a:	4413      	add	r3, r2
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	440b      	add	r3, r1
 8001a10:	3324      	adds	r3, #36	@ 0x24
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d108      	bne.n	8001a2a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6818      	ldr	r0, [r3, #0]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001a22:	461a      	mov	r2, r3
 8001a24:	2101      	movs	r1, #1
 8001a26:	f003 fa47 	bl	8004eb8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	4619      	mov	r1, r3
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f005 fbc2 	bl	80071ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	f003 0308 	and.w	r3, r3, #8
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d008      	beq.n	8001a52 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a42:	015a      	lsls	r2, r3, #5
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	4413      	add	r3, r2
 8001a48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	2308      	movs	r3, #8
 8001a50:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	f003 0310 	and.w	r3, r3, #16
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d008      	beq.n	8001a6e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a5e:	015a      	lsls	r2, r3, #5
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	4413      	add	r3, r2
 8001a64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001a68:	461a      	mov	r2, r3
 8001a6a:	2310      	movs	r3, #16
 8001a6c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d008      	beq.n	8001a8a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a7a:	015a      	lsls	r2, r3, #5
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	4413      	add	r3, r2
 8001a80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001a84:	461a      	mov	r2, r3
 8001a86:	2340      	movs	r3, #64	@ 0x40
 8001a88:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	f003 0302 	and.w	r3, r3, #2
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d023      	beq.n	8001adc <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001a94:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001a96:	6a38      	ldr	r0, [r7, #32]
 8001a98:	f002 fa2e 	bl	8003ef8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001a9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	00db      	lsls	r3, r3, #3
 8001aa2:	4413      	add	r3, r2
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	3310      	adds	r3, #16
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	4413      	add	r3, r2
 8001aac:	3304      	adds	r3, #4
 8001aae:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	78db      	ldrb	r3, [r3, #3]
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d108      	bne.n	8001aca <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	2200      	movs	r2, #0
 8001abc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f005 fc05 	bl	80072d4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001acc:	015a      	lsls	r2, r3, #5
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	2302      	movs	r3, #2
 8001ada:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d003      	beq.n	8001aee <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001ae6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f000 fca5 	bl	8002438 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af0:	3301      	adds	r3, #1
 8001af2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001af4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001af6:	085b      	lsrs	r3, r3, #1
 8001af8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	f47f af2e 	bne.w	800195e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f003 f912 	bl	8004d30 <USB_ReadInterrupts>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001b12:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001b16:	d122      	bne.n	8001b5e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	69fa      	ldr	r2, [r7, #28]
 8001b22:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001b26:	f023 0301 	bic.w	r3, r3, #1
 8001b2a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d108      	bne.n	8001b48 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001b3e:	2100      	movs	r1, #0
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f000 fe8b 	bl	800285c <HAL_PCDEx_LPM_Callback>
 8001b46:	e002      	b.n	8001b4e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f005 fba3 	bl	8007294 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	695a      	ldr	r2, [r3, #20]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001b5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f003 f8e4 	bl	8004d30 <USB_ReadInterrupts>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b6e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001b72:	d112      	bne.n	8001b9a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f003 0301 	and.w	r3, r3, #1
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d102      	bne.n	8001b8a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f005 fb5f 	bl	8007248 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	695a      	ldr	r2, [r3, #20]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001b98:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f003 f8c6 	bl	8004d30 <USB_ReadInterrupts>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001baa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001bae:	f040 80b7 	bne.w	8001d20 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	69fa      	ldr	r2, [r7, #28]
 8001bbc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001bc0:	f023 0301 	bic.w	r3, r3, #1
 8001bc4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2110      	movs	r1, #16
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f002 f993 	bl	8003ef8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001bd6:	e046      	b.n	8001c66 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001bd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bda:	015a      	lsls	r2, r3, #5
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	4413      	add	r3, r2
 8001be0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001be4:	461a      	mov	r2, r3
 8001be6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001bea:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001bec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bee:	015a      	lsls	r2, r3, #5
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001bfc:	0151      	lsls	r1, r2, #5
 8001bfe:	69fa      	ldr	r2, [r7, #28]
 8001c00:	440a      	add	r2, r1
 8001c02:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8001c06:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001c0a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c0e:	015a      	lsls	r2, r3, #5
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	4413      	add	r3, r2
 8001c14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001c18:	461a      	mov	r2, r3
 8001c1a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001c1e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001c20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c22:	015a      	lsls	r2, r3, #5
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	4413      	add	r3, r2
 8001c28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c30:	0151      	lsls	r1, r2, #5
 8001c32:	69fa      	ldr	r2, [r7, #28]
 8001c34:	440a      	add	r2, r1
 8001c36:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001c3a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001c3e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001c40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c42:	015a      	lsls	r2, r3, #5
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	4413      	add	r3, r2
 8001c48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c50:	0151      	lsls	r1, r2, #5
 8001c52:	69fa      	ldr	r2, [r7, #28]
 8001c54:	440a      	add	r2, r1
 8001c56:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001c5a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001c5e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c62:	3301      	adds	r3, #1
 8001c64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	791b      	ldrb	r3, [r3, #4]
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d3b2      	bcc.n	8001bd8 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001c78:	69db      	ldr	r3, [r3, #28]
 8001c7a:	69fa      	ldr	r2, [r7, #28]
 8001c7c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001c80:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001c84:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	7bdb      	ldrb	r3, [r3, #15]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d016      	beq.n	8001cbc <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001c94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001c98:	69fa      	ldr	r2, [r7, #28]
 8001c9a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001c9e:	f043 030b 	orr.w	r3, r3, #11
 8001ca2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cae:	69fa      	ldr	r2, [r7, #28]
 8001cb0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001cb4:	f043 030b 	orr.w	r3, r3, #11
 8001cb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cba:	e015      	b.n	8001ce8 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001cc2:	695b      	ldr	r3, [r3, #20]
 8001cc4:	69fa      	ldr	r2, [r7, #28]
 8001cc6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001cca:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001cce:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001cd2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001cda:	691b      	ldr	r3, [r3, #16]
 8001cdc:	69fa      	ldr	r2, [r7, #28]
 8001cde:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001ce2:	f043 030b 	orr.w	r3, r3, #11
 8001ce6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	69fa      	ldr	r2, [r7, #28]
 8001cf2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001cf6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8001cfa:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6818      	ldr	r0, [r3, #0]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	f003 f8d4 	bl	8004eb8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	695a      	ldr	r2, [r3, #20]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001d1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4618      	mov	r0, r3
 8001d26:	f003 f803 	bl	8004d30 <USB_ReadInterrupts>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001d34:	d123      	bne.n	8001d7e <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f003 f899 	bl	8004e72 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f002 f950 	bl	8003fea <USB_GetDevSpeed>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681c      	ldr	r4, [r3, #0]
 8001d56:	f001 f9b1 	bl	80030bc <HAL_RCC_GetHCLKFreq>
 8001d5a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001d60:	461a      	mov	r2, r3
 8001d62:	4620      	mov	r0, r4
 8001d64:	f001 fe54 	bl	8003a10 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f005 fa4e 	bl	800720a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	695a      	ldr	r2, [r3, #20]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001d7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f002 ffd4 	bl	8004d30 <USB_ReadInterrupts>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	f003 0308 	and.w	r3, r3, #8
 8001d8e:	2b08      	cmp	r3, #8
 8001d90:	d10a      	bne.n	8001da8 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f005 fa2b 	bl	80071ee <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	695a      	ldr	r2, [r3, #20]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f002 0208 	and.w	r2, r2, #8
 8001da6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4618      	mov	r0, r3
 8001dae:	f002 ffbf 	bl	8004d30 <USB_ReadInterrupts>
 8001db2:	4603      	mov	r3, r0
 8001db4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001db8:	2b80      	cmp	r3, #128	@ 0x80
 8001dba:	d123      	bne.n	8001e04 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001dbc:	6a3b      	ldr	r3, [r7, #32]
 8001dbe:	699b      	ldr	r3, [r3, #24]
 8001dc0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001dc4:	6a3b      	ldr	r3, [r7, #32]
 8001dc6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001dc8:	2301      	movs	r3, #1
 8001dca:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dcc:	e014      	b.n	8001df8 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001dce:	6879      	ldr	r1, [r7, #4]
 8001dd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	00db      	lsls	r3, r3, #3
 8001dd6:	4413      	add	r3, r2
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	440b      	add	r3, r1
 8001ddc:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d105      	bne.n	8001df2 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	4619      	mov	r1, r3
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f000 faf2 	bl	80023d6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df4:	3301      	adds	r3, #1
 8001df6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	791b      	ldrb	r3, [r3, #4]
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d3e4      	bcc.n	8001dce <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f002 ff91 	bl	8004d30 <USB_ReadInterrupts>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e14:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001e18:	d13c      	bne.n	8001e94 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e1e:	e02b      	b.n	8001e78 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e22:	015a      	lsls	r2, r3, #5
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	4413      	add	r3, r2
 8001e28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001e30:	6879      	ldr	r1, [r7, #4]
 8001e32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e34:	4613      	mov	r3, r2
 8001e36:	00db      	lsls	r3, r3, #3
 8001e38:	4413      	add	r3, r2
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	440b      	add	r3, r1
 8001e3e:	3318      	adds	r3, #24
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d115      	bne.n	8001e72 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001e46:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	da12      	bge.n	8001e72 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001e4c:	6879      	ldr	r1, [r7, #4]
 8001e4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e50:	4613      	mov	r3, r2
 8001e52:	00db      	lsls	r3, r3, #3
 8001e54:	4413      	add	r3, r2
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	440b      	add	r3, r1
 8001e5a:	3317      	adds	r3, #23
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f000 fab2 	bl	80023d6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e74:	3301      	adds	r3, #1
 8001e76:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	791b      	ldrb	r3, [r3, #4]
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d3cd      	bcc.n	8001e20 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	695a      	ldr	r2, [r3, #20]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001e92:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f002 ff49 	bl	8004d30 <USB_ReadInterrupts>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ea4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001ea8:	d156      	bne.n	8001f58 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001eaa:	2301      	movs	r3, #1
 8001eac:	627b      	str	r3, [r7, #36]	@ 0x24
 8001eae:	e045      	b.n	8001f3c <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb2:	015a      	lsls	r2, r3, #5
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ec0:	6879      	ldr	r1, [r7, #4]
 8001ec2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	4413      	add	r3, r2
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	440b      	add	r3, r1
 8001ece:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d12e      	bne.n	8001f36 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001ed8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	da2b      	bge.n	8001f36 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001eea:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d121      	bne.n	8001f36 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001ef2:	6879      	ldr	r1, [r7, #4]
 8001ef4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	00db      	lsls	r3, r3, #3
 8001efa:	4413      	add	r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	440b      	add	r3, r1
 8001f00:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001f04:	2201      	movs	r2, #1
 8001f06:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001f08:	6a3b      	ldr	r3, [r7, #32]
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001f10:	6a3b      	ldr	r3, [r7, #32]
 8001f12:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001f14:	6a3b      	ldr	r3, [r7, #32]
 8001f16:	695b      	ldr	r3, [r3, #20]
 8001f18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d10a      	bne.n	8001f36 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	69fa      	ldr	r2, [r7, #28]
 8001f2a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001f2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f32:	6053      	str	r3, [r2, #4]
            break;
 8001f34:	e008      	b.n	8001f48 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f38:	3301      	adds	r3, #1
 8001f3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	791b      	ldrb	r3, [r3, #4]
 8001f40:	461a      	mov	r2, r3
 8001f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d3b3      	bcc.n	8001eb0 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	695a      	ldr	r2, [r3, #20]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001f56:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f002 fee7 	bl	8004d30 <USB_ReadInterrupts>
 8001f62:	4603      	mov	r3, r0
 8001f64:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001f68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f6c:	d10a      	bne.n	8001f84 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f005 f9c2 	bl	80072f8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	695a      	ldr	r2, [r3, #20]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001f82:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f002 fed1 	bl	8004d30 <USB_ReadInterrupts>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	f003 0304 	and.w	r3, r3, #4
 8001f94:	2b04      	cmp	r3, #4
 8001f96:	d115      	bne.n	8001fc4 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	f003 0304 	and.w	r3, r3, #4
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d002      	beq.n	8001fb0 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f005 f9b2 	bl	8007314 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	6859      	ldr	r1, [r3, #4]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	605a      	str	r2, [r3, #4]
 8001fc0:	e000      	b.n	8001fc4 <HAL_PCD_IRQHandler+0x93c>
      return;
 8001fc2:	bf00      	nop
    }
  }
}
 8001fc4:	3734      	adds	r7, #52	@ 0x34
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd90      	pop	{r4, r7, pc}

08001fca <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b082      	sub	sp, #8
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d101      	bne.n	8001fe4 <HAL_PCD_SetAddress+0x1a>
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	e012      	b.n	800200a <HAL_PCD_SetAddress+0x40>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	78fa      	ldrb	r2, [r7, #3]
 8001ff0:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	78fa      	ldrb	r2, [r7, #3]
 8001ff8:	4611      	mov	r1, r2
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f002 fe30 	bl	8004c60 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2200      	movs	r2, #0
 8002004:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002012:	b580      	push	{r7, lr}
 8002014:	b084      	sub	sp, #16
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
 800201a:	4608      	mov	r0, r1
 800201c:	4611      	mov	r1, r2
 800201e:	461a      	mov	r2, r3
 8002020:	4603      	mov	r3, r0
 8002022:	70fb      	strb	r3, [r7, #3]
 8002024:	460b      	mov	r3, r1
 8002026:	803b      	strh	r3, [r7, #0]
 8002028:	4613      	mov	r3, r2
 800202a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800202c:	2300      	movs	r3, #0
 800202e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002030:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002034:	2b00      	cmp	r3, #0
 8002036:	da0f      	bge.n	8002058 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002038:	78fb      	ldrb	r3, [r7, #3]
 800203a:	f003 020f 	and.w	r2, r3, #15
 800203e:	4613      	mov	r3, r2
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	4413      	add	r3, r2
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	3310      	adds	r3, #16
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	4413      	add	r3, r2
 800204c:	3304      	adds	r3, #4
 800204e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2201      	movs	r2, #1
 8002054:	705a      	strb	r2, [r3, #1]
 8002056:	e00f      	b.n	8002078 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002058:	78fb      	ldrb	r3, [r7, #3]
 800205a:	f003 020f 	and.w	r2, r3, #15
 800205e:	4613      	mov	r3, r2
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	4413      	add	r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	4413      	add	r3, r2
 800206e:	3304      	adds	r3, #4
 8002070:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2200      	movs	r2, #0
 8002076:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002078:	78fb      	ldrb	r3, [r7, #3]
 800207a:	f003 030f 	and.w	r3, r3, #15
 800207e:	b2da      	uxtb	r2, r3
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002084:	883b      	ldrh	r3, [r7, #0]
 8002086:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	78ba      	ldrb	r2, [r7, #2]
 8002092:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	785b      	ldrb	r3, [r3, #1]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d004      	beq.n	80020a6 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	461a      	mov	r2, r3
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80020a6:	78bb      	ldrb	r3, [r7, #2]
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d102      	bne.n	80020b2 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2200      	movs	r2, #0
 80020b0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d101      	bne.n	80020c0 <HAL_PCD_EP_Open+0xae>
 80020bc:	2302      	movs	r3, #2
 80020be:	e00e      	b.n	80020de <HAL_PCD_EP_Open+0xcc>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	68f9      	ldr	r1, [r7, #12]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f001 ffb0 	bl	8004034 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80020dc:	7afb      	ldrb	r3, [r7, #11]
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3710      	adds	r7, #16
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020e6:	b580      	push	{r7, lr}
 80020e8:	b084      	sub	sp, #16
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
 80020ee:	460b      	mov	r3, r1
 80020f0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80020f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	da0f      	bge.n	800211a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020fa:	78fb      	ldrb	r3, [r7, #3]
 80020fc:	f003 020f 	and.w	r2, r3, #15
 8002100:	4613      	mov	r3, r2
 8002102:	00db      	lsls	r3, r3, #3
 8002104:	4413      	add	r3, r2
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	3310      	adds	r3, #16
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	4413      	add	r3, r2
 800210e:	3304      	adds	r3, #4
 8002110:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2201      	movs	r2, #1
 8002116:	705a      	strb	r2, [r3, #1]
 8002118:	e00f      	b.n	800213a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800211a:	78fb      	ldrb	r3, [r7, #3]
 800211c:	f003 020f 	and.w	r2, r3, #15
 8002120:	4613      	mov	r3, r2
 8002122:	00db      	lsls	r3, r3, #3
 8002124:	4413      	add	r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	4413      	add	r3, r2
 8002130:	3304      	adds	r3, #4
 8002132:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2200      	movs	r2, #0
 8002138:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800213a:	78fb      	ldrb	r3, [r7, #3]
 800213c:	f003 030f 	and.w	r3, r3, #15
 8002140:	b2da      	uxtb	r2, r3
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800214c:	2b01      	cmp	r3, #1
 800214e:	d101      	bne.n	8002154 <HAL_PCD_EP_Close+0x6e>
 8002150:	2302      	movs	r3, #2
 8002152:	e00e      	b.n	8002172 <HAL_PCD_EP_Close+0x8c>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	68f9      	ldr	r1, [r7, #12]
 8002162:	4618      	mov	r0, r3
 8002164:	f001 ffee 	bl	8004144 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3710      	adds	r7, #16
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800217a:	b580      	push	{r7, lr}
 800217c:	b086      	sub	sp, #24
 800217e:	af00      	add	r7, sp, #0
 8002180:	60f8      	str	r0, [r7, #12]
 8002182:	607a      	str	r2, [r7, #4]
 8002184:	603b      	str	r3, [r7, #0]
 8002186:	460b      	mov	r3, r1
 8002188:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800218a:	7afb      	ldrb	r3, [r7, #11]
 800218c:	f003 020f 	and.w	r2, r3, #15
 8002190:	4613      	mov	r3, r2
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	4413      	add	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800219c:	68fa      	ldr	r2, [r7, #12]
 800219e:	4413      	add	r3, r2
 80021a0:	3304      	adds	r3, #4
 80021a2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	683a      	ldr	r2, [r7, #0]
 80021ae:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	2200      	movs	r2, #0
 80021b4:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	2200      	movs	r2, #0
 80021ba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021bc:	7afb      	ldrb	r3, [r7, #11]
 80021be:	f003 030f 	and.w	r3, r3, #15
 80021c2:	b2da      	uxtb	r2, r3
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	799b      	ldrb	r3, [r3, #6]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d102      	bne.n	80021d6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	6818      	ldr	r0, [r3, #0]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	799b      	ldrb	r3, [r3, #6]
 80021de:	461a      	mov	r2, r3
 80021e0:	6979      	ldr	r1, [r7, #20]
 80021e2:	f002 f88b 	bl	80042fc <USB_EPStartXfer>

  return HAL_OK;
 80021e6:	2300      	movs	r3, #0
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3718      	adds	r7, #24
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	607a      	str	r2, [r7, #4]
 80021fa:	603b      	str	r3, [r7, #0]
 80021fc:	460b      	mov	r3, r1
 80021fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002200:	7afb      	ldrb	r3, [r7, #11]
 8002202:	f003 020f 	and.w	r2, r3, #15
 8002206:	4613      	mov	r3, r2
 8002208:	00db      	lsls	r3, r3, #3
 800220a:	4413      	add	r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	3310      	adds	r3, #16
 8002210:	68fa      	ldr	r2, [r7, #12]
 8002212:	4413      	add	r3, r2
 8002214:	3304      	adds	r3, #4
 8002216:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	683a      	ldr	r2, [r7, #0]
 8002222:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	2200      	movs	r2, #0
 8002228:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	2201      	movs	r2, #1
 800222e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002230:	7afb      	ldrb	r3, [r7, #11]
 8002232:	f003 030f 	and.w	r3, r3, #15
 8002236:	b2da      	uxtb	r2, r3
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	799b      	ldrb	r3, [r3, #6]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d102      	bne.n	800224a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	6818      	ldr	r0, [r3, #0]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	799b      	ldrb	r3, [r3, #6]
 8002252:	461a      	mov	r2, r3
 8002254:	6979      	ldr	r1, [r7, #20]
 8002256:	f002 f851 	bl	80042fc <USB_EPStartXfer>

  return HAL_OK;
 800225a:	2300      	movs	r3, #0
}
 800225c:	4618      	mov	r0, r3
 800225e:	3718      	adds	r7, #24
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	460b      	mov	r3, r1
 800226e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002270:	78fb      	ldrb	r3, [r7, #3]
 8002272:	f003 030f 	and.w	r3, r3, #15
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	7912      	ldrb	r2, [r2, #4]
 800227a:	4293      	cmp	r3, r2
 800227c:	d901      	bls.n	8002282 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e04f      	b.n	8002322 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002282:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002286:	2b00      	cmp	r3, #0
 8002288:	da0f      	bge.n	80022aa <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800228a:	78fb      	ldrb	r3, [r7, #3]
 800228c:	f003 020f 	and.w	r2, r3, #15
 8002290:	4613      	mov	r3, r2
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	4413      	add	r3, r2
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	3310      	adds	r3, #16
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	4413      	add	r3, r2
 800229e:	3304      	adds	r3, #4
 80022a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2201      	movs	r2, #1
 80022a6:	705a      	strb	r2, [r3, #1]
 80022a8:	e00d      	b.n	80022c6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80022aa:	78fa      	ldrb	r2, [r7, #3]
 80022ac:	4613      	mov	r3, r2
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	4413      	add	r3, r2
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	4413      	add	r3, r2
 80022bc:	3304      	adds	r3, #4
 80022be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2200      	movs	r2, #0
 80022c4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2201      	movs	r2, #1
 80022ca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022cc:	78fb      	ldrb	r3, [r7, #3]
 80022ce:	f003 030f 	and.w	r3, r3, #15
 80022d2:	b2da      	uxtb	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d101      	bne.n	80022e6 <HAL_PCD_EP_SetStall+0x82>
 80022e2:	2302      	movs	r3, #2
 80022e4:	e01d      	b.n	8002322 <HAL_PCD_EP_SetStall+0xbe>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2201      	movs	r2, #1
 80022ea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	68f9      	ldr	r1, [r7, #12]
 80022f4:	4618      	mov	r0, r3
 80022f6:	f002 fbdf 	bl	8004ab8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80022fa:	78fb      	ldrb	r3, [r7, #3]
 80022fc:	f003 030f 	and.w	r3, r3, #15
 8002300:	2b00      	cmp	r3, #0
 8002302:	d109      	bne.n	8002318 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6818      	ldr	r0, [r3, #0]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	7999      	ldrb	r1, [r3, #6]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002312:	461a      	mov	r2, r3
 8002314:	f002 fdd0 	bl	8004eb8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b084      	sub	sp, #16
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
 8002332:	460b      	mov	r3, r1
 8002334:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002336:	78fb      	ldrb	r3, [r7, #3]
 8002338:	f003 030f 	and.w	r3, r3, #15
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	7912      	ldrb	r2, [r2, #4]
 8002340:	4293      	cmp	r3, r2
 8002342:	d901      	bls.n	8002348 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e042      	b.n	80023ce <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002348:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800234c:	2b00      	cmp	r3, #0
 800234e:	da0f      	bge.n	8002370 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002350:	78fb      	ldrb	r3, [r7, #3]
 8002352:	f003 020f 	and.w	r2, r3, #15
 8002356:	4613      	mov	r3, r2
 8002358:	00db      	lsls	r3, r3, #3
 800235a:	4413      	add	r3, r2
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	3310      	adds	r3, #16
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	4413      	add	r3, r2
 8002364:	3304      	adds	r3, #4
 8002366:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2201      	movs	r2, #1
 800236c:	705a      	strb	r2, [r3, #1]
 800236e:	e00f      	b.n	8002390 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002370:	78fb      	ldrb	r3, [r7, #3]
 8002372:	f003 020f 	and.w	r2, r3, #15
 8002376:	4613      	mov	r3, r2
 8002378:	00db      	lsls	r3, r3, #3
 800237a:	4413      	add	r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	4413      	add	r3, r2
 8002386:	3304      	adds	r3, #4
 8002388:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2200      	movs	r2, #0
 800238e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2200      	movs	r2, #0
 8002394:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002396:	78fb      	ldrb	r3, [r7, #3]
 8002398:	f003 030f 	and.w	r3, r3, #15
 800239c:	b2da      	uxtb	r2, r3
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d101      	bne.n	80023b0 <HAL_PCD_EP_ClrStall+0x86>
 80023ac:	2302      	movs	r3, #2
 80023ae:	e00e      	b.n	80023ce <HAL_PCD_EP_ClrStall+0xa4>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	68f9      	ldr	r1, [r7, #12]
 80023be:	4618      	mov	r0, r3
 80023c0:	f002 fbe8 	bl	8004b94 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3710      	adds	r7, #16
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b084      	sub	sp, #16
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
 80023de:	460b      	mov	r3, r1
 80023e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80023e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	da0c      	bge.n	8002404 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023ea:	78fb      	ldrb	r3, [r7, #3]
 80023ec:	f003 020f 	and.w	r2, r3, #15
 80023f0:	4613      	mov	r3, r2
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	4413      	add	r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	3310      	adds	r3, #16
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	4413      	add	r3, r2
 80023fe:	3304      	adds	r3, #4
 8002400:	60fb      	str	r3, [r7, #12]
 8002402:	e00c      	b.n	800241e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002404:	78fb      	ldrb	r3, [r7, #3]
 8002406:	f003 020f 	and.w	r2, r3, #15
 800240a:	4613      	mov	r3, r2
 800240c:	00db      	lsls	r3, r3, #3
 800240e:	4413      	add	r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	4413      	add	r3, r2
 800241a:	3304      	adds	r3, #4
 800241c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68f9      	ldr	r1, [r7, #12]
 8002424:	4618      	mov	r0, r3
 8002426:	f002 fa07 	bl	8004838 <USB_EPStopXfer>
 800242a:	4603      	mov	r3, r0
 800242c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800242e:	7afb      	ldrb	r3, [r7, #11]
}
 8002430:	4618      	mov	r0, r3
 8002432:	3710      	adds	r7, #16
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b08a      	sub	sp, #40	@ 0x28
 800243c:	af02      	add	r7, sp, #8
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800244c:	683a      	ldr	r2, [r7, #0]
 800244e:	4613      	mov	r3, r2
 8002450:	00db      	lsls	r3, r3, #3
 8002452:	4413      	add	r3, r2
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	3310      	adds	r3, #16
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	4413      	add	r3, r2
 800245c:	3304      	adds	r3, #4
 800245e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	695a      	ldr	r2, [r3, #20]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	691b      	ldr	r3, [r3, #16]
 8002468:	429a      	cmp	r2, r3
 800246a:	d901      	bls.n	8002470 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e06b      	b.n	8002548 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	691a      	ldr	r2, [r3, #16]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	695b      	ldr	r3, [r3, #20]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	69fa      	ldr	r2, [r7, #28]
 8002482:	429a      	cmp	r2, r3
 8002484:	d902      	bls.n	800248c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	3303      	adds	r3, #3
 8002490:	089b      	lsrs	r3, r3, #2
 8002492:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002494:	e02a      	b.n	80024ec <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	691a      	ldr	r2, [r3, #16]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	695b      	ldr	r3, [r3, #20]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	69fa      	ldr	r2, [r7, #28]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d902      	bls.n	80024b2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	3303      	adds	r3, #3
 80024b6:	089b      	lsrs	r3, r3, #2
 80024b8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	68d9      	ldr	r1, [r3, #12]
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	b2da      	uxtb	r2, r3
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80024ca:	9300      	str	r3, [sp, #0]
 80024cc:	4603      	mov	r3, r0
 80024ce:	6978      	ldr	r0, [r7, #20]
 80024d0:	f002 fa5c 	bl	800498c <USB_WritePacket>

    ep->xfer_buff  += len;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	68da      	ldr	r2, [r3, #12]
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	441a      	add	r2, r3
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	695a      	ldr	r2, [r3, #20]
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	441a      	add	r2, r3
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	015a      	lsls	r2, r3, #5
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	4413      	add	r3, r2
 80024f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80024f8:	699b      	ldr	r3, [r3, #24]
 80024fa:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	429a      	cmp	r2, r3
 8002500:	d809      	bhi.n	8002516 <PCD_WriteEmptyTxFifo+0xde>
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	695a      	ldr	r2, [r3, #20]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800250a:	429a      	cmp	r2, r3
 800250c:	d203      	bcs.n	8002516 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1bf      	bne.n	8002496 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	691a      	ldr	r2, [r3, #16]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	695b      	ldr	r3, [r3, #20]
 800251e:	429a      	cmp	r2, r3
 8002520:	d811      	bhi.n	8002546 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	f003 030f 	and.w	r3, r3, #15
 8002528:	2201      	movs	r2, #1
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002536:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	43db      	mvns	r3, r3
 800253c:	6939      	ldr	r1, [r7, #16]
 800253e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002542:	4013      	ands	r3, r2
 8002544:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002546:	2300      	movs	r3, #0
}
 8002548:	4618      	mov	r0, r3
 800254a:	3720      	adds	r7, #32
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b088      	sub	sp, #32
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	333c      	adds	r3, #60	@ 0x3c
 8002568:	3304      	adds	r3, #4
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	015a      	lsls	r2, r3, #5
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	4413      	add	r3, r2
 8002576:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	799b      	ldrb	r3, [r3, #6]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d17b      	bne.n	800267e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	f003 0308 	and.w	r3, r3, #8
 800258c:	2b00      	cmp	r3, #0
 800258e:	d015      	beq.n	80025bc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	4a61      	ldr	r2, [pc, #388]	@ (8002718 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002594:	4293      	cmp	r3, r2
 8002596:	f240 80b9 	bls.w	800270c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	f000 80b3 	beq.w	800270c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	015a      	lsls	r2, r3, #5
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	4413      	add	r3, r2
 80025ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80025b2:	461a      	mov	r2, r3
 80025b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80025b8:	6093      	str	r3, [r2, #8]
 80025ba:	e0a7      	b.n	800270c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	f003 0320 	and.w	r3, r3, #32
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d009      	beq.n	80025da <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	015a      	lsls	r2, r3, #5
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	4413      	add	r3, r2
 80025ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80025d2:	461a      	mov	r2, r3
 80025d4:	2320      	movs	r3, #32
 80025d6:	6093      	str	r3, [r2, #8]
 80025d8:	e098      	b.n	800270c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	f040 8093 	bne.w	800270c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	4a4b      	ldr	r2, [pc, #300]	@ (8002718 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d90f      	bls.n	800260e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d00a      	beq.n	800260e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	015a      	lsls	r2, r3, #5
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	4413      	add	r3, r2
 8002600:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002604:	461a      	mov	r2, r3
 8002606:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800260a:	6093      	str	r3, [r2, #8]
 800260c:	e07e      	b.n	800270c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800260e:	683a      	ldr	r2, [r7, #0]
 8002610:	4613      	mov	r3, r2
 8002612:	00db      	lsls	r3, r3, #3
 8002614:	4413      	add	r3, r2
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	4413      	add	r3, r2
 8002620:	3304      	adds	r3, #4
 8002622:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6a1a      	ldr	r2, [r3, #32]
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	0159      	lsls	r1, r3, #5
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	440b      	add	r3, r1
 8002630:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800263a:	1ad2      	subs	r2, r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d114      	bne.n	8002670 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	691b      	ldr	r3, [r3, #16]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d109      	bne.n	8002662 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6818      	ldr	r0, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002658:	461a      	mov	r2, r3
 800265a:	2101      	movs	r1, #1
 800265c:	f002 fc2c 	bl	8004eb8 <USB_EP0_OutStart>
 8002660:	e006      	b.n	8002670 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	68da      	ldr	r2, [r3, #12]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	695b      	ldr	r3, [r3, #20]
 800266a:	441a      	add	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	b2db      	uxtb	r3, r3
 8002674:	4619      	mov	r1, r3
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f004 fd84 	bl	8007184 <HAL_PCD_DataOutStageCallback>
 800267c:	e046      	b.n	800270c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	4a26      	ldr	r2, [pc, #152]	@ (800271c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d124      	bne.n	80026d0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d00a      	beq.n	80026a6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	015a      	lsls	r2, r3, #5
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	4413      	add	r3, r2
 8002698:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800269c:	461a      	mov	r2, r3
 800269e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80026a2:	6093      	str	r3, [r2, #8]
 80026a4:	e032      	b.n	800270c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	f003 0320 	and.w	r3, r3, #32
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d008      	beq.n	80026c2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	015a      	lsls	r2, r3, #5
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	4413      	add	r3, r2
 80026b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80026bc:	461a      	mov	r2, r3
 80026be:	2320      	movs	r3, #32
 80026c0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	4619      	mov	r1, r3
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f004 fd5b 	bl	8007184 <HAL_PCD_DataOutStageCallback>
 80026ce:	e01d      	b.n	800270c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d114      	bne.n	8002700 <PCD_EP_OutXfrComplete_int+0x1b0>
 80026d6:	6879      	ldr	r1, [r7, #4]
 80026d8:	683a      	ldr	r2, [r7, #0]
 80026da:	4613      	mov	r3, r2
 80026dc:	00db      	lsls	r3, r3, #3
 80026de:	4413      	add	r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	440b      	add	r3, r1
 80026e4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d108      	bne.n	8002700 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6818      	ldr	r0, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80026f8:	461a      	mov	r2, r3
 80026fa:	2100      	movs	r1, #0
 80026fc:	f002 fbdc 	bl	8004eb8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	b2db      	uxtb	r3, r3
 8002704:	4619      	mov	r1, r3
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f004 fd3c 	bl	8007184 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3720      	adds	r7, #32
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	4f54300a 	.word	0x4f54300a
 800271c:	4f54310a 	.word	0x4f54310a

08002720 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	333c      	adds	r3, #60	@ 0x3c
 8002738:	3304      	adds	r3, #4
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	015a      	lsls	r2, r3, #5
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	4413      	add	r3, r2
 8002746:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	4a15      	ldr	r2, [pc, #84]	@ (80027a8 <PCD_EP_OutSetupPacket_int+0x88>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d90e      	bls.n	8002774 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800275c:	2b00      	cmp	r3, #0
 800275e:	d009      	beq.n	8002774 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	015a      	lsls	r2, r3, #5
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	4413      	add	r3, r2
 8002768:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800276c:	461a      	mov	r2, r3
 800276e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002772:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f004 fcf3 	bl	8007160 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	4a0a      	ldr	r2, [pc, #40]	@ (80027a8 <PCD_EP_OutSetupPacket_int+0x88>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d90c      	bls.n	800279c <PCD_EP_OutSetupPacket_int+0x7c>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	799b      	ldrb	r3, [r3, #6]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d108      	bne.n	800279c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6818      	ldr	r0, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002794:	461a      	mov	r2, r3
 8002796:	2101      	movs	r1, #1
 8002798:	f002 fb8e 	bl	8004eb8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3718      	adds	r7, #24
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	4f54300a 	.word	0x4f54300a

080027ac <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b085      	sub	sp, #20
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	460b      	mov	r3, r1
 80027b6:	70fb      	strb	r3, [r7, #3]
 80027b8:	4613      	mov	r3, r2
 80027ba:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80027c4:	78fb      	ldrb	r3, [r7, #3]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d107      	bne.n	80027da <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80027ca:	883b      	ldrh	r3, [r7, #0]
 80027cc:	0419      	lsls	r1, r3, #16
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	68ba      	ldr	r2, [r7, #8]
 80027d4:	430a      	orrs	r2, r1
 80027d6:	629a      	str	r2, [r3, #40]	@ 0x28
 80027d8:	e028      	b.n	800282c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027e0:	0c1b      	lsrs	r3, r3, #16
 80027e2:	68ba      	ldr	r2, [r7, #8]
 80027e4:	4413      	add	r3, r2
 80027e6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80027e8:	2300      	movs	r3, #0
 80027ea:	73fb      	strb	r3, [r7, #15]
 80027ec:	e00d      	b.n	800280a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	7bfb      	ldrb	r3, [r7, #15]
 80027f4:	3340      	adds	r3, #64	@ 0x40
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	4413      	add	r3, r2
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	0c1b      	lsrs	r3, r3, #16
 80027fe:	68ba      	ldr	r2, [r7, #8]
 8002800:	4413      	add	r3, r2
 8002802:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002804:	7bfb      	ldrb	r3, [r7, #15]
 8002806:	3301      	adds	r3, #1
 8002808:	73fb      	strb	r3, [r7, #15]
 800280a:	7bfa      	ldrb	r2, [r7, #15]
 800280c:	78fb      	ldrb	r3, [r7, #3]
 800280e:	3b01      	subs	r3, #1
 8002810:	429a      	cmp	r2, r3
 8002812:	d3ec      	bcc.n	80027ee <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002814:	883b      	ldrh	r3, [r7, #0]
 8002816:	0418      	lsls	r0, r3, #16
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6819      	ldr	r1, [r3, #0]
 800281c:	78fb      	ldrb	r3, [r7, #3]
 800281e:	3b01      	subs	r3, #1
 8002820:	68ba      	ldr	r2, [r7, #8]
 8002822:	4302      	orrs	r2, r0
 8002824:	3340      	adds	r3, #64	@ 0x40
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	440b      	add	r3, r1
 800282a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3714      	adds	r7, #20
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr

0800283a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800283a:	b480      	push	{r7}
 800283c:	b083      	sub	sp, #12
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
 8002842:	460b      	mov	r3, r1
 8002844:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	887a      	ldrh	r2, [r7, #2]
 800284c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800284e:	2300      	movs	r3, #0
}
 8002850:	4618      	mov	r0, r3
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	460b      	mov	r3, r1
 8002866:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002868:	bf00      	nop
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b086      	sub	sp, #24
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e267      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	2b00      	cmp	r3, #0
 8002890:	d075      	beq.n	800297e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002892:	4b88      	ldr	r3, [pc, #544]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f003 030c 	and.w	r3, r3, #12
 800289a:	2b04      	cmp	r3, #4
 800289c:	d00c      	beq.n	80028b8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800289e:	4b85      	ldr	r3, [pc, #532]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80028a6:	2b08      	cmp	r3, #8
 80028a8:	d112      	bne.n	80028d0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028aa:	4b82      	ldr	r3, [pc, #520]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80028b6:	d10b      	bne.n	80028d0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028b8:	4b7e      	ldr	r3, [pc, #504]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d05b      	beq.n	800297c <HAL_RCC_OscConfig+0x108>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d157      	bne.n	800297c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e242      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028d8:	d106      	bne.n	80028e8 <HAL_RCC_OscConfig+0x74>
 80028da:	4b76      	ldr	r3, [pc, #472]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a75      	ldr	r2, [pc, #468]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 80028e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028e4:	6013      	str	r3, [r2, #0]
 80028e6:	e01d      	b.n	8002924 <HAL_RCC_OscConfig+0xb0>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028f0:	d10c      	bne.n	800290c <HAL_RCC_OscConfig+0x98>
 80028f2:	4b70      	ldr	r3, [pc, #448]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a6f      	ldr	r2, [pc, #444]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 80028f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028fc:	6013      	str	r3, [r2, #0]
 80028fe:	4b6d      	ldr	r3, [pc, #436]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a6c      	ldr	r2, [pc, #432]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002904:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002908:	6013      	str	r3, [r2, #0]
 800290a:	e00b      	b.n	8002924 <HAL_RCC_OscConfig+0xb0>
 800290c:	4b69      	ldr	r3, [pc, #420]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a68      	ldr	r2, [pc, #416]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002912:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002916:	6013      	str	r3, [r2, #0]
 8002918:	4b66      	ldr	r3, [pc, #408]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a65      	ldr	r2, [pc, #404]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 800291e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002922:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d013      	beq.n	8002954 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800292c:	f7fe f88c 	bl	8000a48 <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002934:	f7fe f888 	bl	8000a48 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b64      	cmp	r3, #100	@ 0x64
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e207      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002946:	4b5b      	ldr	r3, [pc, #364]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d0f0      	beq.n	8002934 <HAL_RCC_OscConfig+0xc0>
 8002952:	e014      	b.n	800297e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002954:	f7fe f878 	bl	8000a48 <HAL_GetTick>
 8002958:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800295a:	e008      	b.n	800296e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800295c:	f7fe f874 	bl	8000a48 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b64      	cmp	r3, #100	@ 0x64
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e1f3      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800296e:	4b51      	ldr	r3, [pc, #324]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1f0      	bne.n	800295c <HAL_RCC_OscConfig+0xe8>
 800297a:	e000      	b.n	800297e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800297c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d063      	beq.n	8002a52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800298a:	4b4a      	ldr	r3, [pc, #296]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f003 030c 	and.w	r3, r3, #12
 8002992:	2b00      	cmp	r3, #0
 8002994:	d00b      	beq.n	80029ae <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002996:	4b47      	ldr	r3, [pc, #284]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800299e:	2b08      	cmp	r3, #8
 80029a0:	d11c      	bne.n	80029dc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029a2:	4b44      	ldr	r3, [pc, #272]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d116      	bne.n	80029dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ae:	4b41      	ldr	r3, [pc, #260]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d005      	beq.n	80029c6 <HAL_RCC_OscConfig+0x152>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d001      	beq.n	80029c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e1c7      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029c6:	4b3b      	ldr	r3, [pc, #236]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	4937      	ldr	r1, [pc, #220]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029da:	e03a      	b.n	8002a52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d020      	beq.n	8002a26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029e4:	4b34      	ldr	r3, [pc, #208]	@ (8002ab8 <HAL_RCC_OscConfig+0x244>)
 80029e6:	2201      	movs	r2, #1
 80029e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ea:	f7fe f82d 	bl	8000a48 <HAL_GetTick>
 80029ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029f0:	e008      	b.n	8002a04 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029f2:	f7fe f829 	bl	8000a48 <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d901      	bls.n	8002a04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e1a8      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a04:	4b2b      	ldr	r3, [pc, #172]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d0f0      	beq.n	80029f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a10:	4b28      	ldr	r3, [pc, #160]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	00db      	lsls	r3, r3, #3
 8002a1e:	4925      	ldr	r1, [pc, #148]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	600b      	str	r3, [r1, #0]
 8002a24:	e015      	b.n	8002a52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a26:	4b24      	ldr	r3, [pc, #144]	@ (8002ab8 <HAL_RCC_OscConfig+0x244>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a2c:	f7fe f80c 	bl	8000a48 <HAL_GetTick>
 8002a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a32:	e008      	b.n	8002a46 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a34:	f7fe f808 	bl	8000a48 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e187      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a46:	4b1b      	ldr	r3, [pc, #108]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d1f0      	bne.n	8002a34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0308 	and.w	r3, r3, #8
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d036      	beq.n	8002acc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	695b      	ldr	r3, [r3, #20]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d016      	beq.n	8002a94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a66:	4b15      	ldr	r3, [pc, #84]	@ (8002abc <HAL_RCC_OscConfig+0x248>)
 8002a68:	2201      	movs	r2, #1
 8002a6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a6c:	f7fd ffec 	bl	8000a48 <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a72:	e008      	b.n	8002a86 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a74:	f7fd ffe8 	bl	8000a48 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e167      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a86:	4b0b      	ldr	r3, [pc, #44]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002a88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d0f0      	beq.n	8002a74 <HAL_RCC_OscConfig+0x200>
 8002a92:	e01b      	b.n	8002acc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a94:	4b09      	ldr	r3, [pc, #36]	@ (8002abc <HAL_RCC_OscConfig+0x248>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a9a:	f7fd ffd5 	bl	8000a48 <HAL_GetTick>
 8002a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aa0:	e00e      	b.n	8002ac0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aa2:	f7fd ffd1 	bl	8000a48 <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d907      	bls.n	8002ac0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e150      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
 8002ab4:	40023800 	.word	0x40023800
 8002ab8:	42470000 	.word	0x42470000
 8002abc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ac0:	4b88      	ldr	r3, [pc, #544]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002ac2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ac4:	f003 0302 	and.w	r3, r3, #2
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d1ea      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0304 	and.w	r3, r3, #4
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	f000 8097 	beq.w	8002c08 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ada:	2300      	movs	r3, #0
 8002adc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ade:	4b81      	ldr	r3, [pc, #516]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d10f      	bne.n	8002b0a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aea:	2300      	movs	r3, #0
 8002aec:	60bb      	str	r3, [r7, #8]
 8002aee:	4b7d      	ldr	r3, [pc, #500]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af2:	4a7c      	ldr	r2, [pc, #496]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002af4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002af8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002afa:	4b7a      	ldr	r3, [pc, #488]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002afe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b02:	60bb      	str	r3, [r7, #8]
 8002b04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b06:	2301      	movs	r3, #1
 8002b08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b0a:	4b77      	ldr	r3, [pc, #476]	@ (8002ce8 <HAL_RCC_OscConfig+0x474>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d118      	bne.n	8002b48 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b16:	4b74      	ldr	r3, [pc, #464]	@ (8002ce8 <HAL_RCC_OscConfig+0x474>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a73      	ldr	r2, [pc, #460]	@ (8002ce8 <HAL_RCC_OscConfig+0x474>)
 8002b1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b22:	f7fd ff91 	bl	8000a48 <HAL_GetTick>
 8002b26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b28:	e008      	b.n	8002b3c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b2a:	f7fd ff8d 	bl	8000a48 <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d901      	bls.n	8002b3c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	e10c      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b3c:	4b6a      	ldr	r3, [pc, #424]	@ (8002ce8 <HAL_RCC_OscConfig+0x474>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d0f0      	beq.n	8002b2a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d106      	bne.n	8002b5e <HAL_RCC_OscConfig+0x2ea>
 8002b50:	4b64      	ldr	r3, [pc, #400]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002b52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b54:	4a63      	ldr	r2, [pc, #396]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002b56:	f043 0301 	orr.w	r3, r3, #1
 8002b5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b5c:	e01c      	b.n	8002b98 <HAL_RCC_OscConfig+0x324>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	2b05      	cmp	r3, #5
 8002b64:	d10c      	bne.n	8002b80 <HAL_RCC_OscConfig+0x30c>
 8002b66:	4b5f      	ldr	r3, [pc, #380]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002b68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b6a:	4a5e      	ldr	r2, [pc, #376]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002b6c:	f043 0304 	orr.w	r3, r3, #4
 8002b70:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b72:	4b5c      	ldr	r3, [pc, #368]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002b74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b76:	4a5b      	ldr	r2, [pc, #364]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002b78:	f043 0301 	orr.w	r3, r3, #1
 8002b7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b7e:	e00b      	b.n	8002b98 <HAL_RCC_OscConfig+0x324>
 8002b80:	4b58      	ldr	r3, [pc, #352]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002b82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b84:	4a57      	ldr	r2, [pc, #348]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002b86:	f023 0301 	bic.w	r3, r3, #1
 8002b8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b8c:	4b55      	ldr	r3, [pc, #340]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002b8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b90:	4a54      	ldr	r2, [pc, #336]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002b92:	f023 0304 	bic.w	r3, r3, #4
 8002b96:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d015      	beq.n	8002bcc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba0:	f7fd ff52 	bl	8000a48 <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ba6:	e00a      	b.n	8002bbe <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ba8:	f7fd ff4e 	bl	8000a48 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e0cb      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bbe:	4b49      	ldr	r3, [pc, #292]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002bc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d0ee      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x334>
 8002bca:	e014      	b.n	8002bf6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bcc:	f7fd ff3c 	bl	8000a48 <HAL_GetTick>
 8002bd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bd2:	e00a      	b.n	8002bea <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bd4:	f7fd ff38 	bl	8000a48 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e0b5      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bea:	4b3e      	ldr	r3, [pc, #248]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002bec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d1ee      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002bf6:	7dfb      	ldrb	r3, [r7, #23]
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d105      	bne.n	8002c08 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bfc:	4b39      	ldr	r3, [pc, #228]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c00:	4a38      	ldr	r2, [pc, #224]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002c02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c06:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	699b      	ldr	r3, [r3, #24]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	f000 80a1 	beq.w	8002d54 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c12:	4b34      	ldr	r3, [pc, #208]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f003 030c 	and.w	r3, r3, #12
 8002c1a:	2b08      	cmp	r3, #8
 8002c1c:	d05c      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d141      	bne.n	8002caa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c26:	4b31      	ldr	r3, [pc, #196]	@ (8002cec <HAL_RCC_OscConfig+0x478>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c2c:	f7fd ff0c 	bl	8000a48 <HAL_GetTick>
 8002c30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c32:	e008      	b.n	8002c46 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c34:	f7fd ff08 	bl	8000a48 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e087      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c46:	4b27      	ldr	r3, [pc, #156]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d1f0      	bne.n	8002c34 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	69da      	ldr	r2, [r3, #28]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a1b      	ldr	r3, [r3, #32]
 8002c5a:	431a      	orrs	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c60:	019b      	lsls	r3, r3, #6
 8002c62:	431a      	orrs	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c68:	085b      	lsrs	r3, r3, #1
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	041b      	lsls	r3, r3, #16
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c74:	061b      	lsls	r3, r3, #24
 8002c76:	491b      	ldr	r1, [pc, #108]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c7c:	4b1b      	ldr	r3, [pc, #108]	@ (8002cec <HAL_RCC_OscConfig+0x478>)
 8002c7e:	2201      	movs	r2, #1
 8002c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c82:	f7fd fee1 	bl	8000a48 <HAL_GetTick>
 8002c86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c88:	e008      	b.n	8002c9c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c8a:	f7fd fedd 	bl	8000a48 <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d901      	bls.n	8002c9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e05c      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c9c:	4b11      	ldr	r3, [pc, #68]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d0f0      	beq.n	8002c8a <HAL_RCC_OscConfig+0x416>
 8002ca8:	e054      	b.n	8002d54 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002caa:	4b10      	ldr	r3, [pc, #64]	@ (8002cec <HAL_RCC_OscConfig+0x478>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb0:	f7fd feca 	bl	8000a48 <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cb6:	e008      	b.n	8002cca <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cb8:	f7fd fec6 	bl	8000a48 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e045      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cca:	4b06      	ldr	r3, [pc, #24]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1f0      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x444>
 8002cd6:	e03d      	b.n	8002d54 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d107      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e038      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
 8002ce4:	40023800 	.word	0x40023800
 8002ce8:	40007000 	.word	0x40007000
 8002cec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002cf0:	4b1b      	ldr	r3, [pc, #108]	@ (8002d60 <HAL_RCC_OscConfig+0x4ec>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	699b      	ldr	r3, [r3, #24]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d028      	beq.n	8002d50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d121      	bne.n	8002d50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d11a      	bne.n	8002d50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002d20:	4013      	ands	r3, r2
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002d26:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d111      	bne.n	8002d50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d36:	085b      	lsrs	r3, r3, #1
 8002d38:	3b01      	subs	r3, #1
 8002d3a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d107      	bne.n	8002d50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d4a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d001      	beq.n	8002d54 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e000      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3718      	adds	r7, #24
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	40023800 	.word	0x40023800

08002d64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d101      	bne.n	8002d78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e0cc      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d78:	4b68      	ldr	r3, [pc, #416]	@ (8002f1c <HAL_RCC_ClockConfig+0x1b8>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0307 	and.w	r3, r3, #7
 8002d80:	683a      	ldr	r2, [r7, #0]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d90c      	bls.n	8002da0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d86:	4b65      	ldr	r3, [pc, #404]	@ (8002f1c <HAL_RCC_ClockConfig+0x1b8>)
 8002d88:	683a      	ldr	r2, [r7, #0]
 8002d8a:	b2d2      	uxtb	r2, r2
 8002d8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d8e:	4b63      	ldr	r3, [pc, #396]	@ (8002f1c <HAL_RCC_ClockConfig+0x1b8>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0307 	and.w	r3, r3, #7
 8002d96:	683a      	ldr	r2, [r7, #0]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d001      	beq.n	8002da0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e0b8      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d020      	beq.n	8002dee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0304 	and.w	r3, r3, #4
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d005      	beq.n	8002dc4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002db8:	4b59      	ldr	r3, [pc, #356]	@ (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	4a58      	ldr	r2, [pc, #352]	@ (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002dbe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002dc2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0308 	and.w	r3, r3, #8
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d005      	beq.n	8002ddc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002dd0:	4b53      	ldr	r3, [pc, #332]	@ (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	4a52      	ldr	r2, [pc, #328]	@ (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002dda:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ddc:	4b50      	ldr	r3, [pc, #320]	@ (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	494d      	ldr	r1, [pc, #308]	@ (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d044      	beq.n	8002e84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d107      	bne.n	8002e12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e02:	4b47      	ldr	r3, [pc, #284]	@ (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d119      	bne.n	8002e42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e07f      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d003      	beq.n	8002e22 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e1e:	2b03      	cmp	r3, #3
 8002e20:	d107      	bne.n	8002e32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e22:	4b3f      	ldr	r3, [pc, #252]	@ (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d109      	bne.n	8002e42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e06f      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e32:	4b3b      	ldr	r3, [pc, #236]	@ (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d101      	bne.n	8002e42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e067      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e42:	4b37      	ldr	r3, [pc, #220]	@ (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f023 0203 	bic.w	r2, r3, #3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	4934      	ldr	r1, [pc, #208]	@ (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e54:	f7fd fdf8 	bl	8000a48 <HAL_GetTick>
 8002e58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e5a:	e00a      	b.n	8002e72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e5c:	f7fd fdf4 	bl	8000a48 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e04f      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e72:	4b2b      	ldr	r3, [pc, #172]	@ (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f003 020c 	and.w	r2, r3, #12
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d1eb      	bne.n	8002e5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e84:	4b25      	ldr	r3, [pc, #148]	@ (8002f1c <HAL_RCC_ClockConfig+0x1b8>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0307 	and.w	r3, r3, #7
 8002e8c:	683a      	ldr	r2, [r7, #0]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d20c      	bcs.n	8002eac <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e92:	4b22      	ldr	r3, [pc, #136]	@ (8002f1c <HAL_RCC_ClockConfig+0x1b8>)
 8002e94:	683a      	ldr	r2, [r7, #0]
 8002e96:	b2d2      	uxtb	r2, r2
 8002e98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e9a:	4b20      	ldr	r3, [pc, #128]	@ (8002f1c <HAL_RCC_ClockConfig+0x1b8>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0307 	and.w	r3, r3, #7
 8002ea2:	683a      	ldr	r2, [r7, #0]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d001      	beq.n	8002eac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e032      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0304 	and.w	r3, r3, #4
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d008      	beq.n	8002eca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002eb8:	4b19      	ldr	r3, [pc, #100]	@ (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	4916      	ldr	r1, [pc, #88]	@ (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0308 	and.w	r3, r3, #8
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d009      	beq.n	8002eea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ed6:	4b12      	ldr	r3, [pc, #72]	@ (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	00db      	lsls	r3, r3, #3
 8002ee4:	490e      	ldr	r1, [pc, #56]	@ (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002eea:	f000 f821 	bl	8002f30 <HAL_RCC_GetSysClockFreq>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	091b      	lsrs	r3, r3, #4
 8002ef6:	f003 030f 	and.w	r3, r3, #15
 8002efa:	490a      	ldr	r1, [pc, #40]	@ (8002f24 <HAL_RCC_ClockConfig+0x1c0>)
 8002efc:	5ccb      	ldrb	r3, [r1, r3]
 8002efe:	fa22 f303 	lsr.w	r3, r2, r3
 8002f02:	4a09      	ldr	r2, [pc, #36]	@ (8002f28 <HAL_RCC_ClockConfig+0x1c4>)
 8002f04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002f06:	4b09      	ldr	r3, [pc, #36]	@ (8002f2c <HAL_RCC_ClockConfig+0x1c8>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7fd fd58 	bl	80009c0 <HAL_InitTick>

  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3710      	adds	r7, #16
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	40023c00 	.word	0x40023c00
 8002f20:	40023800 	.word	0x40023800
 8002f24:	08007778 	.word	0x08007778
 8002f28:	20000000 	.word	0x20000000
 8002f2c:	20000004 	.word	0x20000004

08002f30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f34:	b090      	sub	sp, #64	@ 0x40
 8002f36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002f40:	2300      	movs	r3, #0
 8002f42:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002f44:	2300      	movs	r3, #0
 8002f46:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f48:	4b59      	ldr	r3, [pc, #356]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f003 030c 	and.w	r3, r3, #12
 8002f50:	2b08      	cmp	r3, #8
 8002f52:	d00d      	beq.n	8002f70 <HAL_RCC_GetSysClockFreq+0x40>
 8002f54:	2b08      	cmp	r3, #8
 8002f56:	f200 80a1 	bhi.w	800309c <HAL_RCC_GetSysClockFreq+0x16c>
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d002      	beq.n	8002f64 <HAL_RCC_GetSysClockFreq+0x34>
 8002f5e:	2b04      	cmp	r3, #4
 8002f60:	d003      	beq.n	8002f6a <HAL_RCC_GetSysClockFreq+0x3a>
 8002f62:	e09b      	b.n	800309c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f64:	4b53      	ldr	r3, [pc, #332]	@ (80030b4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002f66:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002f68:	e09b      	b.n	80030a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f6a:	4b53      	ldr	r3, [pc, #332]	@ (80030b8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f6c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002f6e:	e098      	b.n	80030a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f70:	4b4f      	ldr	r3, [pc, #316]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f78:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f7a:	4b4d      	ldr	r3, [pc, #308]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d028      	beq.n	8002fd8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f86:	4b4a      	ldr	r3, [pc, #296]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	099b      	lsrs	r3, r3, #6
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	623b      	str	r3, [r7, #32]
 8002f90:	627a      	str	r2, [r7, #36]	@ 0x24
 8002f92:	6a3b      	ldr	r3, [r7, #32]
 8002f94:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002f98:	2100      	movs	r1, #0
 8002f9a:	4b47      	ldr	r3, [pc, #284]	@ (80030b8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f9c:	fb03 f201 	mul.w	r2, r3, r1
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	fb00 f303 	mul.w	r3, r0, r3
 8002fa6:	4413      	add	r3, r2
 8002fa8:	4a43      	ldr	r2, [pc, #268]	@ (80030b8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002faa:	fba0 1202 	umull	r1, r2, r0, r2
 8002fae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002fb0:	460a      	mov	r2, r1
 8002fb2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002fb4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002fb6:	4413      	add	r3, r2
 8002fb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002fba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	61bb      	str	r3, [r7, #24]
 8002fc0:	61fa      	str	r2, [r7, #28]
 8002fc2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fc6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002fca:	f7fd f903 	bl	80001d4 <__aeabi_uldivmod>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002fd6:	e053      	b.n	8003080 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fd8:	4b35      	ldr	r3, [pc, #212]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	099b      	lsrs	r3, r3, #6
 8002fde:	2200      	movs	r2, #0
 8002fe0:	613b      	str	r3, [r7, #16]
 8002fe2:	617a      	str	r2, [r7, #20]
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002fea:	f04f 0b00 	mov.w	fp, #0
 8002fee:	4652      	mov	r2, sl
 8002ff0:	465b      	mov	r3, fp
 8002ff2:	f04f 0000 	mov.w	r0, #0
 8002ff6:	f04f 0100 	mov.w	r1, #0
 8002ffa:	0159      	lsls	r1, r3, #5
 8002ffc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003000:	0150      	lsls	r0, r2, #5
 8003002:	4602      	mov	r2, r0
 8003004:	460b      	mov	r3, r1
 8003006:	ebb2 080a 	subs.w	r8, r2, sl
 800300a:	eb63 090b 	sbc.w	r9, r3, fp
 800300e:	f04f 0200 	mov.w	r2, #0
 8003012:	f04f 0300 	mov.w	r3, #0
 8003016:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800301a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800301e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003022:	ebb2 0408 	subs.w	r4, r2, r8
 8003026:	eb63 0509 	sbc.w	r5, r3, r9
 800302a:	f04f 0200 	mov.w	r2, #0
 800302e:	f04f 0300 	mov.w	r3, #0
 8003032:	00eb      	lsls	r3, r5, #3
 8003034:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003038:	00e2      	lsls	r2, r4, #3
 800303a:	4614      	mov	r4, r2
 800303c:	461d      	mov	r5, r3
 800303e:	eb14 030a 	adds.w	r3, r4, sl
 8003042:	603b      	str	r3, [r7, #0]
 8003044:	eb45 030b 	adc.w	r3, r5, fp
 8003048:	607b      	str	r3, [r7, #4]
 800304a:	f04f 0200 	mov.w	r2, #0
 800304e:	f04f 0300 	mov.w	r3, #0
 8003052:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003056:	4629      	mov	r1, r5
 8003058:	028b      	lsls	r3, r1, #10
 800305a:	4621      	mov	r1, r4
 800305c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003060:	4621      	mov	r1, r4
 8003062:	028a      	lsls	r2, r1, #10
 8003064:	4610      	mov	r0, r2
 8003066:	4619      	mov	r1, r3
 8003068:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800306a:	2200      	movs	r2, #0
 800306c:	60bb      	str	r3, [r7, #8]
 800306e:	60fa      	str	r2, [r7, #12]
 8003070:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003074:	f7fd f8ae 	bl	80001d4 <__aeabi_uldivmod>
 8003078:	4602      	mov	r2, r0
 800307a:	460b      	mov	r3, r1
 800307c:	4613      	mov	r3, r2
 800307e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003080:	4b0b      	ldr	r3, [pc, #44]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	0c1b      	lsrs	r3, r3, #16
 8003086:	f003 0303 	and.w	r3, r3, #3
 800308a:	3301      	adds	r3, #1
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003090:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003094:	fbb2 f3f3 	udiv	r3, r2, r3
 8003098:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800309a:	e002      	b.n	80030a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800309c:	4b05      	ldr	r3, [pc, #20]	@ (80030b4 <HAL_RCC_GetSysClockFreq+0x184>)
 800309e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80030a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3740      	adds	r7, #64	@ 0x40
 80030a8:	46bd      	mov	sp, r7
 80030aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030ae:	bf00      	nop
 80030b0:	40023800 	.word	0x40023800
 80030b4:	00f42400 	.word	0x00f42400
 80030b8:	017d7840 	.word	0x017d7840

080030bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030c0:	4b03      	ldr	r3, [pc, #12]	@ (80030d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80030c2:	681b      	ldr	r3, [r3, #0]
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	20000000 	.word	0x20000000

080030d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d101      	bne.n	80030e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e041      	b.n	800316a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d106      	bne.n	8003100 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f7fd fb80 	bl	8000800 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2202      	movs	r2, #2
 8003104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	3304      	adds	r3, #4
 8003110:	4619      	mov	r1, r3
 8003112:	4610      	mov	r0, r2
 8003114:	f000 fa70 	bl	80035f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
	...

08003174 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003174:	b480      	push	{r7}
 8003176:	b085      	sub	sp, #20
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003182:	b2db      	uxtb	r3, r3
 8003184:	2b01      	cmp	r3, #1
 8003186:	d001      	beq.n	800318c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e044      	b.n	8003216 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2202      	movs	r2, #2
 8003190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68da      	ldr	r2, [r3, #12]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f042 0201 	orr.w	r2, r2, #1
 80031a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a1e      	ldr	r2, [pc, #120]	@ (8003224 <HAL_TIM_Base_Start_IT+0xb0>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d018      	beq.n	80031e0 <HAL_TIM_Base_Start_IT+0x6c>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031b6:	d013      	beq.n	80031e0 <HAL_TIM_Base_Start_IT+0x6c>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a1a      	ldr	r2, [pc, #104]	@ (8003228 <HAL_TIM_Base_Start_IT+0xb4>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d00e      	beq.n	80031e0 <HAL_TIM_Base_Start_IT+0x6c>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a19      	ldr	r2, [pc, #100]	@ (800322c <HAL_TIM_Base_Start_IT+0xb8>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d009      	beq.n	80031e0 <HAL_TIM_Base_Start_IT+0x6c>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a17      	ldr	r2, [pc, #92]	@ (8003230 <HAL_TIM_Base_Start_IT+0xbc>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d004      	beq.n	80031e0 <HAL_TIM_Base_Start_IT+0x6c>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a16      	ldr	r2, [pc, #88]	@ (8003234 <HAL_TIM_Base_Start_IT+0xc0>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d111      	bne.n	8003204 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f003 0307 	and.w	r3, r3, #7
 80031ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2b06      	cmp	r3, #6
 80031f0:	d010      	beq.n	8003214 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f042 0201 	orr.w	r2, r2, #1
 8003200:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003202:	e007      	b.n	8003214 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f042 0201 	orr.w	r2, r2, #1
 8003212:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	3714      	adds	r7, #20
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	40010000 	.word	0x40010000
 8003228:	40000400 	.word	0x40000400
 800322c:	40000800 	.word	0x40000800
 8003230:	40000c00 	.word	0x40000c00
 8003234:	40014000 	.word	0x40014000

08003238 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	f003 0302 	and.w	r3, r3, #2
 8003256:	2b00      	cmp	r3, #0
 8003258:	d020      	beq.n	800329c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f003 0302 	and.w	r3, r3, #2
 8003260:	2b00      	cmp	r3, #0
 8003262:	d01b      	beq.n	800329c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f06f 0202 	mvn.w	r2, #2
 800326c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2201      	movs	r2, #1
 8003272:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	699b      	ldr	r3, [r3, #24]
 800327a:	f003 0303 	and.w	r3, r3, #3
 800327e:	2b00      	cmp	r3, #0
 8003280:	d003      	beq.n	800328a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f000 f999 	bl	80035ba <HAL_TIM_IC_CaptureCallback>
 8003288:	e005      	b.n	8003296 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 f98b 	bl	80035a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f000 f99c 	bl	80035ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	f003 0304 	and.w	r3, r3, #4
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d020      	beq.n	80032e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f003 0304 	and.w	r3, r3, #4
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d01b      	beq.n	80032e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f06f 0204 	mvn.w	r2, #4
 80032b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2202      	movs	r2, #2
 80032be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	699b      	ldr	r3, [r3, #24]
 80032c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d003      	beq.n	80032d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f000 f973 	bl	80035ba <HAL_TIM_IC_CaptureCallback>
 80032d4:	e005      	b.n	80032e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 f965 	bl	80035a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f000 f976 	bl	80035ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	f003 0308 	and.w	r3, r3, #8
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d020      	beq.n	8003334 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f003 0308 	and.w	r3, r3, #8
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d01b      	beq.n	8003334 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f06f 0208 	mvn.w	r2, #8
 8003304:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2204      	movs	r2, #4
 800330a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	69db      	ldr	r3, [r3, #28]
 8003312:	f003 0303 	and.w	r3, r3, #3
 8003316:	2b00      	cmp	r3, #0
 8003318:	d003      	beq.n	8003322 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f000 f94d 	bl	80035ba <HAL_TIM_IC_CaptureCallback>
 8003320:	e005      	b.n	800332e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 f93f 	bl	80035a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f000 f950 	bl	80035ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	f003 0310 	and.w	r3, r3, #16
 800333a:	2b00      	cmp	r3, #0
 800333c:	d020      	beq.n	8003380 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f003 0310 	and.w	r3, r3, #16
 8003344:	2b00      	cmp	r3, #0
 8003346:	d01b      	beq.n	8003380 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f06f 0210 	mvn.w	r2, #16
 8003350:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2208      	movs	r2, #8
 8003356:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	69db      	ldr	r3, [r3, #28]
 800335e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003362:	2b00      	cmp	r3, #0
 8003364:	d003      	beq.n	800336e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f000 f927 	bl	80035ba <HAL_TIM_IC_CaptureCallback>
 800336c:	e005      	b.n	800337a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 f919 	bl	80035a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f000 f92a 	bl	80035ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00c      	beq.n	80033a4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	f003 0301 	and.w	r3, r3, #1
 8003390:	2b00      	cmp	r3, #0
 8003392:	d007      	beq.n	80033a4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f06f 0201 	mvn.w	r2, #1
 800339c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f7fd f9ea 	bl	8000778 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00c      	beq.n	80033c8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d007      	beq.n	80033c8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80033c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 fab6 	bl	8003934 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00c      	beq.n	80033ec <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d007      	beq.n	80033ec <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80033e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 f8fb 	bl	80035e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	f003 0320 	and.w	r3, r3, #32
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00c      	beq.n	8003410 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f003 0320 	and.w	r3, r3, #32
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d007      	beq.n	8003410 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f06f 0220 	mvn.w	r2, #32
 8003408:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 fa88 	bl	8003920 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003410:	bf00      	nop
 8003412:	3710      	adds	r7, #16
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003422:	2300      	movs	r3, #0
 8003424:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800342c:	2b01      	cmp	r3, #1
 800342e:	d101      	bne.n	8003434 <HAL_TIM_ConfigClockSource+0x1c>
 8003430:	2302      	movs	r3, #2
 8003432:	e0b4      	b.n	800359e <HAL_TIM_ConfigClockSource+0x186>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2202      	movs	r2, #2
 8003440:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003452:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800345a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	68ba      	ldr	r2, [r7, #8]
 8003462:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800346c:	d03e      	beq.n	80034ec <HAL_TIM_ConfigClockSource+0xd4>
 800346e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003472:	f200 8087 	bhi.w	8003584 <HAL_TIM_ConfigClockSource+0x16c>
 8003476:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800347a:	f000 8086 	beq.w	800358a <HAL_TIM_ConfigClockSource+0x172>
 800347e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003482:	d87f      	bhi.n	8003584 <HAL_TIM_ConfigClockSource+0x16c>
 8003484:	2b70      	cmp	r3, #112	@ 0x70
 8003486:	d01a      	beq.n	80034be <HAL_TIM_ConfigClockSource+0xa6>
 8003488:	2b70      	cmp	r3, #112	@ 0x70
 800348a:	d87b      	bhi.n	8003584 <HAL_TIM_ConfigClockSource+0x16c>
 800348c:	2b60      	cmp	r3, #96	@ 0x60
 800348e:	d050      	beq.n	8003532 <HAL_TIM_ConfigClockSource+0x11a>
 8003490:	2b60      	cmp	r3, #96	@ 0x60
 8003492:	d877      	bhi.n	8003584 <HAL_TIM_ConfigClockSource+0x16c>
 8003494:	2b50      	cmp	r3, #80	@ 0x50
 8003496:	d03c      	beq.n	8003512 <HAL_TIM_ConfigClockSource+0xfa>
 8003498:	2b50      	cmp	r3, #80	@ 0x50
 800349a:	d873      	bhi.n	8003584 <HAL_TIM_ConfigClockSource+0x16c>
 800349c:	2b40      	cmp	r3, #64	@ 0x40
 800349e:	d058      	beq.n	8003552 <HAL_TIM_ConfigClockSource+0x13a>
 80034a0:	2b40      	cmp	r3, #64	@ 0x40
 80034a2:	d86f      	bhi.n	8003584 <HAL_TIM_ConfigClockSource+0x16c>
 80034a4:	2b30      	cmp	r3, #48	@ 0x30
 80034a6:	d064      	beq.n	8003572 <HAL_TIM_ConfigClockSource+0x15a>
 80034a8:	2b30      	cmp	r3, #48	@ 0x30
 80034aa:	d86b      	bhi.n	8003584 <HAL_TIM_ConfigClockSource+0x16c>
 80034ac:	2b20      	cmp	r3, #32
 80034ae:	d060      	beq.n	8003572 <HAL_TIM_ConfigClockSource+0x15a>
 80034b0:	2b20      	cmp	r3, #32
 80034b2:	d867      	bhi.n	8003584 <HAL_TIM_ConfigClockSource+0x16c>
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d05c      	beq.n	8003572 <HAL_TIM_ConfigClockSource+0x15a>
 80034b8:	2b10      	cmp	r3, #16
 80034ba:	d05a      	beq.n	8003572 <HAL_TIM_ConfigClockSource+0x15a>
 80034bc:	e062      	b.n	8003584 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80034ce:	f000 f999 	bl	8003804 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80034e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68ba      	ldr	r2, [r7, #8]
 80034e8:	609a      	str	r2, [r3, #8]
      break;
 80034ea:	e04f      	b.n	800358c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80034fc:	f000 f982 	bl	8003804 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	689a      	ldr	r2, [r3, #8]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800350e:	609a      	str	r2, [r3, #8]
      break;
 8003510:	e03c      	b.n	800358c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800351e:	461a      	mov	r2, r3
 8003520:	f000 f8f6 	bl	8003710 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2150      	movs	r1, #80	@ 0x50
 800352a:	4618      	mov	r0, r3
 800352c:	f000 f94f 	bl	80037ce <TIM_ITRx_SetConfig>
      break;
 8003530:	e02c      	b.n	800358c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800353e:	461a      	mov	r2, r3
 8003540:	f000 f915 	bl	800376e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2160      	movs	r1, #96	@ 0x60
 800354a:	4618      	mov	r0, r3
 800354c:	f000 f93f 	bl	80037ce <TIM_ITRx_SetConfig>
      break;
 8003550:	e01c      	b.n	800358c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800355e:	461a      	mov	r2, r3
 8003560:	f000 f8d6 	bl	8003710 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2140      	movs	r1, #64	@ 0x40
 800356a:	4618      	mov	r0, r3
 800356c:	f000 f92f 	bl	80037ce <TIM_ITRx_SetConfig>
      break;
 8003570:	e00c      	b.n	800358c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4619      	mov	r1, r3
 800357c:	4610      	mov	r0, r2
 800357e:	f000 f926 	bl	80037ce <TIM_ITRx_SetConfig>
      break;
 8003582:	e003      	b.n	800358c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	73fb      	strb	r3, [r7, #15]
      break;
 8003588:	e000      	b.n	800358c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800358a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800359c:	7bfb      	ldrb	r3, [r7, #15]
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3710      	adds	r7, #16
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035a6:	b480      	push	{r7}
 80035a8:	b083      	sub	sp, #12
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035ae:	bf00      	nop
 80035b0:	370c      	adds	r7, #12
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr

080035ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035ba:	b480      	push	{r7}
 80035bc:	b083      	sub	sp, #12
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035c2:	bf00      	nop
 80035c4:	370c      	adds	r7, #12
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr

080035ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035ce:	b480      	push	{r7}
 80035d0:	b083      	sub	sp, #12
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035d6:	bf00      	nop
 80035d8:	370c      	adds	r7, #12
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr

080035e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035e2:	b480      	push	{r7}
 80035e4:	b083      	sub	sp, #12
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035ea:	bf00      	nop
 80035ec:	370c      	adds	r7, #12
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
	...

080035f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b085      	sub	sp, #20
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4a3a      	ldr	r2, [pc, #232]	@ (80036f4 <TIM_Base_SetConfig+0xfc>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d00f      	beq.n	8003630 <TIM_Base_SetConfig+0x38>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003616:	d00b      	beq.n	8003630 <TIM_Base_SetConfig+0x38>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	4a37      	ldr	r2, [pc, #220]	@ (80036f8 <TIM_Base_SetConfig+0x100>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d007      	beq.n	8003630 <TIM_Base_SetConfig+0x38>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	4a36      	ldr	r2, [pc, #216]	@ (80036fc <TIM_Base_SetConfig+0x104>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d003      	beq.n	8003630 <TIM_Base_SetConfig+0x38>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	4a35      	ldr	r2, [pc, #212]	@ (8003700 <TIM_Base_SetConfig+0x108>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d108      	bne.n	8003642 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003636:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	68fa      	ldr	r2, [r7, #12]
 800363e:	4313      	orrs	r3, r2
 8003640:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a2b      	ldr	r2, [pc, #172]	@ (80036f4 <TIM_Base_SetConfig+0xfc>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d01b      	beq.n	8003682 <TIM_Base_SetConfig+0x8a>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003650:	d017      	beq.n	8003682 <TIM_Base_SetConfig+0x8a>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a28      	ldr	r2, [pc, #160]	@ (80036f8 <TIM_Base_SetConfig+0x100>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d013      	beq.n	8003682 <TIM_Base_SetConfig+0x8a>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a27      	ldr	r2, [pc, #156]	@ (80036fc <TIM_Base_SetConfig+0x104>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d00f      	beq.n	8003682 <TIM_Base_SetConfig+0x8a>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a26      	ldr	r2, [pc, #152]	@ (8003700 <TIM_Base_SetConfig+0x108>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d00b      	beq.n	8003682 <TIM_Base_SetConfig+0x8a>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a25      	ldr	r2, [pc, #148]	@ (8003704 <TIM_Base_SetConfig+0x10c>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d007      	beq.n	8003682 <TIM_Base_SetConfig+0x8a>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a24      	ldr	r2, [pc, #144]	@ (8003708 <TIM_Base_SetConfig+0x110>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d003      	beq.n	8003682 <TIM_Base_SetConfig+0x8a>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a23      	ldr	r2, [pc, #140]	@ (800370c <TIM_Base_SetConfig+0x114>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d108      	bne.n	8003694 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003688:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	68fa      	ldr	r2, [r7, #12]
 8003690:	4313      	orrs	r3, r2
 8003692:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	4313      	orrs	r3, r2
 80036a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	68fa      	ldr	r2, [r7, #12]
 80036a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	689a      	ldr	r2, [r3, #8]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4a0e      	ldr	r2, [pc, #56]	@ (80036f4 <TIM_Base_SetConfig+0xfc>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d103      	bne.n	80036c8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	691a      	ldr	r2, [r3, #16]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d105      	bne.n	80036e6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	f023 0201 	bic.w	r2, r3, #1
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	611a      	str	r2, [r3, #16]
  }
}
 80036e6:	bf00      	nop
 80036e8:	3714      	adds	r7, #20
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	40010000 	.word	0x40010000
 80036f8:	40000400 	.word	0x40000400
 80036fc:	40000800 	.word	0x40000800
 8003700:	40000c00 	.word	0x40000c00
 8003704:	40014000 	.word	0x40014000
 8003708:	40014400 	.word	0x40014400
 800370c:	40014800 	.word	0x40014800

08003710 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003710:	b480      	push	{r7}
 8003712:	b087      	sub	sp, #28
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6a1b      	ldr	r3, [r3, #32]
 8003720:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6a1b      	ldr	r3, [r3, #32]
 8003726:	f023 0201 	bic.w	r2, r3, #1
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800373a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	011b      	lsls	r3, r3, #4
 8003740:	693a      	ldr	r2, [r7, #16]
 8003742:	4313      	orrs	r3, r2
 8003744:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	f023 030a 	bic.w	r3, r3, #10
 800374c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800374e:	697a      	ldr	r2, [r7, #20]
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	4313      	orrs	r3, r2
 8003754:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	693a      	ldr	r2, [r7, #16]
 800375a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	697a      	ldr	r2, [r7, #20]
 8003760:	621a      	str	r2, [r3, #32]
}
 8003762:	bf00      	nop
 8003764:	371c      	adds	r7, #28
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr

0800376e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800376e:	b480      	push	{r7}
 8003770:	b087      	sub	sp, #28
 8003772:	af00      	add	r7, sp, #0
 8003774:	60f8      	str	r0, [r7, #12]
 8003776:	60b9      	str	r1, [r7, #8]
 8003778:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6a1b      	ldr	r3, [r3, #32]
 800377e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6a1b      	ldr	r3, [r3, #32]
 8003784:	f023 0210 	bic.w	r2, r3, #16
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	699b      	ldr	r3, [r3, #24]
 8003790:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003798:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	031b      	lsls	r3, r3, #12
 800379e:	693a      	ldr	r2, [r7, #16]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80037aa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	011b      	lsls	r3, r3, #4
 80037b0:	697a      	ldr	r2, [r7, #20]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	693a      	ldr	r2, [r7, #16]
 80037ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	697a      	ldr	r2, [r7, #20]
 80037c0:	621a      	str	r2, [r3, #32]
}
 80037c2:	bf00      	nop
 80037c4:	371c      	adds	r7, #28
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr

080037ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80037ce:	b480      	push	{r7}
 80037d0:	b085      	sub	sp, #20
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
 80037d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80037e6:	683a      	ldr	r2, [r7, #0]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	f043 0307 	orr.w	r3, r3, #7
 80037f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	68fa      	ldr	r2, [r7, #12]
 80037f6:	609a      	str	r2, [r3, #8]
}
 80037f8:	bf00      	nop
 80037fa:	3714      	adds	r7, #20
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr

08003804 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003804:	b480      	push	{r7}
 8003806:	b087      	sub	sp, #28
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	607a      	str	r2, [r7, #4]
 8003810:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800381e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	021a      	lsls	r2, r3, #8
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	431a      	orrs	r2, r3
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	4313      	orrs	r3, r2
 800382c:	697a      	ldr	r2, [r7, #20]
 800382e:	4313      	orrs	r3, r2
 8003830:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	697a      	ldr	r2, [r7, #20]
 8003836:	609a      	str	r2, [r3, #8]
}
 8003838:	bf00      	nop
 800383a:	371c      	adds	r7, #28
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003844:	b480      	push	{r7}
 8003846:	b085      	sub	sp, #20
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003854:	2b01      	cmp	r3, #1
 8003856:	d101      	bne.n	800385c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003858:	2302      	movs	r3, #2
 800385a:	e050      	b.n	80038fe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2202      	movs	r2, #2
 8003868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003882:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68fa      	ldr	r2, [r7, #12]
 800388a:	4313      	orrs	r3, r2
 800388c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68fa      	ldr	r2, [r7, #12]
 8003894:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a1c      	ldr	r2, [pc, #112]	@ (800390c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d018      	beq.n	80038d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038a8:	d013      	beq.n	80038d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a18      	ldr	r2, [pc, #96]	@ (8003910 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d00e      	beq.n	80038d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a16      	ldr	r2, [pc, #88]	@ (8003914 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d009      	beq.n	80038d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a15      	ldr	r2, [pc, #84]	@ (8003918 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d004      	beq.n	80038d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a13      	ldr	r2, [pc, #76]	@ (800391c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d10c      	bne.n	80038ec <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80038d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	68ba      	ldr	r2, [r7, #8]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	68ba      	ldr	r2, [r7, #8]
 80038ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80038fc:	2300      	movs	r3, #0
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3714      	adds	r7, #20
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	40010000 	.word	0x40010000
 8003910:	40000400 	.word	0x40000400
 8003914:	40000800 	.word	0x40000800
 8003918:	40000c00 	.word	0x40000c00
 800391c:	40014000 	.word	0x40014000

08003920 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003948:	b084      	sub	sp, #16
 800394a:	b580      	push	{r7, lr}
 800394c:	b084      	sub	sp, #16
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
 8003952:	f107 001c 	add.w	r0, r7, #28
 8003956:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800395a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800395e:	2b01      	cmp	r3, #1
 8003960:	d123      	bne.n	80039aa <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003966:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8003976:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800398a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800398e:	2b01      	cmp	r3, #1
 8003990:	d105      	bne.n	800399e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f001 fae8 	bl	8004f74 <USB_CoreReset>
 80039a4:	4603      	mov	r3, r0
 80039a6:	73fb      	strb	r3, [r7, #15]
 80039a8:	e01b      	b.n	80039e2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f001 fadc 	bl	8004f74 <USB_CoreReset>
 80039bc:	4603      	mov	r3, r0
 80039be:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80039c0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d106      	bne.n	80039d6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039cc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	639a      	str	r2, [r3, #56]	@ 0x38
 80039d4:	e005      	b.n	80039e2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039da:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80039e2:	7fbb      	ldrb	r3, [r7, #30]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d10b      	bne.n	8003a00 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f043 0206 	orr.w	r2, r3, #6
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f043 0220 	orr.w	r2, r3, #32
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3710      	adds	r7, #16
 8003a06:	46bd      	mov	sp, r7
 8003a08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003a0c:	b004      	add	sp, #16
 8003a0e:	4770      	bx	lr

08003a10 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b087      	sub	sp, #28
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003a1e:	79fb      	ldrb	r3, [r7, #7]
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d165      	bne.n	8003af0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	4a41      	ldr	r2, [pc, #260]	@ (8003b2c <USB_SetTurnaroundTime+0x11c>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d906      	bls.n	8003a3a <USB_SetTurnaroundTime+0x2a>
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	4a40      	ldr	r2, [pc, #256]	@ (8003b30 <USB_SetTurnaroundTime+0x120>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d202      	bcs.n	8003a3a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003a34:	230f      	movs	r3, #15
 8003a36:	617b      	str	r3, [r7, #20]
 8003a38:	e062      	b.n	8003b00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	4a3c      	ldr	r2, [pc, #240]	@ (8003b30 <USB_SetTurnaroundTime+0x120>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d306      	bcc.n	8003a50 <USB_SetTurnaroundTime+0x40>
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	4a3b      	ldr	r2, [pc, #236]	@ (8003b34 <USB_SetTurnaroundTime+0x124>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d202      	bcs.n	8003a50 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003a4a:	230e      	movs	r3, #14
 8003a4c:	617b      	str	r3, [r7, #20]
 8003a4e:	e057      	b.n	8003b00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	4a38      	ldr	r2, [pc, #224]	@ (8003b34 <USB_SetTurnaroundTime+0x124>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d306      	bcc.n	8003a66 <USB_SetTurnaroundTime+0x56>
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	4a37      	ldr	r2, [pc, #220]	@ (8003b38 <USB_SetTurnaroundTime+0x128>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d202      	bcs.n	8003a66 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003a60:	230d      	movs	r3, #13
 8003a62:	617b      	str	r3, [r7, #20]
 8003a64:	e04c      	b.n	8003b00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	4a33      	ldr	r2, [pc, #204]	@ (8003b38 <USB_SetTurnaroundTime+0x128>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d306      	bcc.n	8003a7c <USB_SetTurnaroundTime+0x6c>
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	4a32      	ldr	r2, [pc, #200]	@ (8003b3c <USB_SetTurnaroundTime+0x12c>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d802      	bhi.n	8003a7c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003a76:	230c      	movs	r3, #12
 8003a78:	617b      	str	r3, [r7, #20]
 8003a7a:	e041      	b.n	8003b00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	4a2f      	ldr	r2, [pc, #188]	@ (8003b3c <USB_SetTurnaroundTime+0x12c>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d906      	bls.n	8003a92 <USB_SetTurnaroundTime+0x82>
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	4a2e      	ldr	r2, [pc, #184]	@ (8003b40 <USB_SetTurnaroundTime+0x130>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d802      	bhi.n	8003a92 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003a8c:	230b      	movs	r3, #11
 8003a8e:	617b      	str	r3, [r7, #20]
 8003a90:	e036      	b.n	8003b00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	4a2a      	ldr	r2, [pc, #168]	@ (8003b40 <USB_SetTurnaroundTime+0x130>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d906      	bls.n	8003aa8 <USB_SetTurnaroundTime+0x98>
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	4a29      	ldr	r2, [pc, #164]	@ (8003b44 <USB_SetTurnaroundTime+0x134>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d802      	bhi.n	8003aa8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003aa2:	230a      	movs	r3, #10
 8003aa4:	617b      	str	r3, [r7, #20]
 8003aa6:	e02b      	b.n	8003b00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	4a26      	ldr	r2, [pc, #152]	@ (8003b44 <USB_SetTurnaroundTime+0x134>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d906      	bls.n	8003abe <USB_SetTurnaroundTime+0xae>
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	4a25      	ldr	r2, [pc, #148]	@ (8003b48 <USB_SetTurnaroundTime+0x138>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d202      	bcs.n	8003abe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003ab8:	2309      	movs	r3, #9
 8003aba:	617b      	str	r3, [r7, #20]
 8003abc:	e020      	b.n	8003b00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	4a21      	ldr	r2, [pc, #132]	@ (8003b48 <USB_SetTurnaroundTime+0x138>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d306      	bcc.n	8003ad4 <USB_SetTurnaroundTime+0xc4>
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	4a20      	ldr	r2, [pc, #128]	@ (8003b4c <USB_SetTurnaroundTime+0x13c>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d802      	bhi.n	8003ad4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003ace:	2308      	movs	r3, #8
 8003ad0:	617b      	str	r3, [r7, #20]
 8003ad2:	e015      	b.n	8003b00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	4a1d      	ldr	r2, [pc, #116]	@ (8003b4c <USB_SetTurnaroundTime+0x13c>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d906      	bls.n	8003aea <USB_SetTurnaroundTime+0xda>
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	4a1c      	ldr	r2, [pc, #112]	@ (8003b50 <USB_SetTurnaroundTime+0x140>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d202      	bcs.n	8003aea <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003ae4:	2307      	movs	r3, #7
 8003ae6:	617b      	str	r3, [r7, #20]
 8003ae8:	e00a      	b.n	8003b00 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003aea:	2306      	movs	r3, #6
 8003aec:	617b      	str	r3, [r7, #20]
 8003aee:	e007      	b.n	8003b00 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003af0:	79fb      	ldrb	r3, [r7, #7]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d102      	bne.n	8003afc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003af6:	2309      	movs	r3, #9
 8003af8:	617b      	str	r3, [r7, #20]
 8003afa:	e001      	b.n	8003b00 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003afc:	2309      	movs	r3, #9
 8003afe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	68da      	ldr	r2, [r3, #12]
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	029b      	lsls	r3, r3, #10
 8003b14:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8003b18:	431a      	orrs	r2, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003b1e:	2300      	movs	r3, #0
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	371c      	adds	r7, #28
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr
 8003b2c:	00d8acbf 	.word	0x00d8acbf
 8003b30:	00e4e1c0 	.word	0x00e4e1c0
 8003b34:	00f42400 	.word	0x00f42400
 8003b38:	01067380 	.word	0x01067380
 8003b3c:	011a499f 	.word	0x011a499f
 8003b40:	01312cff 	.word	0x01312cff
 8003b44:	014ca43f 	.word	0x014ca43f
 8003b48:	016e3600 	.word	0x016e3600
 8003b4c:	01a6ab1f 	.word	0x01a6ab1f
 8003b50:	01e84800 	.word	0x01e84800

08003b54 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f043 0201 	orr.w	r2, r3, #1
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003b68:	2300      	movs	r3, #0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	370c      	adds	r7, #12
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr

08003b76 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003b76:	b480      	push	{r7}
 8003b78:	b083      	sub	sp, #12
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f023 0201 	bic.w	r2, r3, #1
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003b8a:	2300      	movs	r3, #0
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003bb4:	78fb      	ldrb	r3, [r7, #3]
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d115      	bne.n	8003be6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003bc6:	200a      	movs	r0, #10
 8003bc8:	f7fc ff4a 	bl	8000a60 <HAL_Delay>
      ms += 10U;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	330a      	adds	r3, #10
 8003bd0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f001 f93f 	bl	8004e56 <USB_GetMode>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d01e      	beq.n	8003c1c <USB_SetCurrentMode+0x84>
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2bc7      	cmp	r3, #199	@ 0xc7
 8003be2:	d9f0      	bls.n	8003bc6 <USB_SetCurrentMode+0x2e>
 8003be4:	e01a      	b.n	8003c1c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003be6:	78fb      	ldrb	r3, [r7, #3]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d115      	bne.n	8003c18 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003bf8:	200a      	movs	r0, #10
 8003bfa:	f7fc ff31 	bl	8000a60 <HAL_Delay>
      ms += 10U;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	330a      	adds	r3, #10
 8003c02:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f001 f926 	bl	8004e56 <USB_GetMode>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d005      	beq.n	8003c1c <USB_SetCurrentMode+0x84>
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2bc7      	cmp	r3, #199	@ 0xc7
 8003c14:	d9f0      	bls.n	8003bf8 <USB_SetCurrentMode+0x60>
 8003c16:	e001      	b.n	8003c1c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e005      	b.n	8003c28 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2bc8      	cmp	r3, #200	@ 0xc8
 8003c20:	d101      	bne.n	8003c26 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e000      	b.n	8003c28 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003c26:	2300      	movs	r3, #0
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3710      	adds	r7, #16
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003c30:	b084      	sub	sp, #16
 8003c32:	b580      	push	{r7, lr}
 8003c34:	b086      	sub	sp, #24
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
 8003c3a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003c3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003c42:	2300      	movs	r3, #0
 8003c44:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	613b      	str	r3, [r7, #16]
 8003c4e:	e009      	b.n	8003c64 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	3340      	adds	r3, #64	@ 0x40
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	4413      	add	r3, r2
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	3301      	adds	r3, #1
 8003c62:	613b      	str	r3, [r7, #16]
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	2b0e      	cmp	r3, #14
 8003c68:	d9f2      	bls.n	8003c50 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003c6a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d11c      	bne.n	8003cac <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	68fa      	ldr	r2, [r7, #12]
 8003c7c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c80:	f043 0302 	orr.w	r3, r3, #2
 8003c84:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c8a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c96:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ca2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	639a      	str	r2, [r3, #56]	@ 0x38
 8003caa:	e00b      	b.n	8003cc4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cb0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cbc:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003cca:	461a      	mov	r2, r3
 8003ccc:	2300      	movs	r3, #0
 8003cce:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003cd0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d10d      	bne.n	8003cf4 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003cd8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d104      	bne.n	8003cea <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003ce0:	2100      	movs	r1, #0
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 f968 	bl	8003fb8 <USB_SetDevSpeed>
 8003ce8:	e008      	b.n	8003cfc <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003cea:	2101      	movs	r1, #1
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f000 f963 	bl	8003fb8 <USB_SetDevSpeed>
 8003cf2:	e003      	b.n	8003cfc <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003cf4:	2103      	movs	r1, #3
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 f95e 	bl	8003fb8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003cfc:	2110      	movs	r1, #16
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 f8fa 	bl	8003ef8 <USB_FlushTxFifo>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d001      	beq.n	8003d0e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f000 f924 	bl	8003f5c <USB_FlushRxFifo>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d001      	beq.n	8003d1e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d24:	461a      	mov	r2, r3
 8003d26:	2300      	movs	r3, #0
 8003d28:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d30:	461a      	mov	r2, r3
 8003d32:	2300      	movs	r3, #0
 8003d34:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	2300      	movs	r3, #0
 8003d40:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d42:	2300      	movs	r3, #0
 8003d44:	613b      	str	r3, [r7, #16]
 8003d46:	e043      	b.n	8003dd0 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	015a      	lsls	r2, r3, #5
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	4413      	add	r3, r2
 8003d50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003d5a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003d5e:	d118      	bne.n	8003d92 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d10a      	bne.n	8003d7c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	015a      	lsls	r2, r3, #5
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d72:	461a      	mov	r2, r3
 8003d74:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003d78:	6013      	str	r3, [r2, #0]
 8003d7a:	e013      	b.n	8003da4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	015a      	lsls	r2, r3, #5
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	4413      	add	r3, r2
 8003d84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d88:	461a      	mov	r2, r3
 8003d8a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003d8e:	6013      	str	r3, [r2, #0]
 8003d90:	e008      	b.n	8003da4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	015a      	lsls	r2, r3, #5
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	4413      	add	r3, r2
 8003d9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d9e:	461a      	mov	r2, r3
 8003da0:	2300      	movs	r3, #0
 8003da2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	015a      	lsls	r2, r3, #5
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	4413      	add	r3, r2
 8003dac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003db0:	461a      	mov	r2, r3
 8003db2:	2300      	movs	r3, #0
 8003db4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	015a      	lsls	r2, r3, #5
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	4413      	add	r3, r2
 8003dbe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003dc8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	3301      	adds	r3, #1
 8003dce:	613b      	str	r3, [r7, #16]
 8003dd0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d3b5      	bcc.n	8003d48 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ddc:	2300      	movs	r3, #0
 8003dde:	613b      	str	r3, [r7, #16]
 8003de0:	e043      	b.n	8003e6a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	015a      	lsls	r2, r3, #5
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	4413      	add	r3, r2
 8003dea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003df4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003df8:	d118      	bne.n	8003e2c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d10a      	bne.n	8003e16 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	015a      	lsls	r2, r3, #5
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	4413      	add	r3, r2
 8003e08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003e12:	6013      	str	r3, [r2, #0]
 8003e14:	e013      	b.n	8003e3e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	015a      	lsls	r2, r3, #5
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	4413      	add	r3, r2
 8003e1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e22:	461a      	mov	r2, r3
 8003e24:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003e28:	6013      	str	r3, [r2, #0]
 8003e2a:	e008      	b.n	8003e3e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	015a      	lsls	r2, r3, #5
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	4413      	add	r3, r2
 8003e34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e38:	461a      	mov	r2, r3
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	015a      	lsls	r2, r3, #5
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	4413      	add	r3, r2
 8003e46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	015a      	lsls	r2, r3, #5
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	4413      	add	r3, r2
 8003e58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003e62:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	3301      	adds	r3, #1
 8003e68:	613b      	str	r3, [r7, #16]
 8003e6a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003e6e:	461a      	mov	r2, r3
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d3b5      	bcc.n	8003de2 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	68fa      	ldr	r2, [r7, #12]
 8003e80:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e88:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003e96:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003e98:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d105      	bne.n	8003eac <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	699b      	ldr	r3, [r3, #24]
 8003ea4:	f043 0210 	orr.w	r2, r3, #16
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	699a      	ldr	r2, [r3, #24]
 8003eb0:	4b10      	ldr	r3, [pc, #64]	@ (8003ef4 <USB_DevInit+0x2c4>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003eb8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d005      	beq.n	8003ecc <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	f043 0208 	orr.w	r2, r3, #8
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003ecc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d107      	bne.n	8003ee4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	699b      	ldr	r3, [r3, #24]
 8003ed8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003edc:	f043 0304 	orr.w	r3, r3, #4
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003ee4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3718      	adds	r7, #24
 8003eea:	46bd      	mov	sp, r7
 8003eec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ef0:	b004      	add	sp, #16
 8003ef2:	4770      	bx	lr
 8003ef4:	803c3800 	.word	0x803c3800

08003ef8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b085      	sub	sp, #20
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003f02:	2300      	movs	r3, #0
 8003f04:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	3301      	adds	r3, #1
 8003f0a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003f12:	d901      	bls.n	8003f18 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e01b      	b.n	8003f50 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	691b      	ldr	r3, [r3, #16]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	daf2      	bge.n	8003f06 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003f20:	2300      	movs	r3, #0
 8003f22:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	019b      	lsls	r3, r3, #6
 8003f28:	f043 0220 	orr.w	r2, r3, #32
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	3301      	adds	r3, #1
 8003f34:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003f3c:	d901      	bls.n	8003f42 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e006      	b.n	8003f50 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	f003 0320 	and.w	r3, r3, #32
 8003f4a:	2b20      	cmp	r3, #32
 8003f4c:	d0f0      	beq.n	8003f30 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3714      	adds	r7, #20
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b085      	sub	sp, #20
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003f64:	2300      	movs	r3, #0
 8003f66:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	3301      	adds	r3, #1
 8003f6c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003f74:	d901      	bls.n	8003f7a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e018      	b.n	8003fac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	daf2      	bge.n	8003f68 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003f82:	2300      	movs	r3, #0
 8003f84:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2210      	movs	r2, #16
 8003f8a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	3301      	adds	r3, #1
 8003f90:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003f98:	d901      	bls.n	8003f9e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e006      	b.n	8003fac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	f003 0310 	and.w	r3, r3, #16
 8003fa6:	2b10      	cmp	r3, #16
 8003fa8:	d0f0      	beq.n	8003f8c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3714      	adds	r7, #20
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b085      	sub	sp, #20
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	78fb      	ldrb	r3, [r7, #3]
 8003fd2:	68f9      	ldr	r1, [r7, #12]
 8003fd4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003fdc:	2300      	movs	r3, #0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3714      	adds	r7, #20
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr

08003fea <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8003fea:	b480      	push	{r7}
 8003fec:	b087      	sub	sp, #28
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	f003 0306 	and.w	r3, r3, #6
 8004002:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d102      	bne.n	8004010 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800400a:	2300      	movs	r3, #0
 800400c:	75fb      	strb	r3, [r7, #23]
 800400e:	e00a      	b.n	8004026 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2b02      	cmp	r3, #2
 8004014:	d002      	beq.n	800401c <USB_GetDevSpeed+0x32>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2b06      	cmp	r3, #6
 800401a:	d102      	bne.n	8004022 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800401c:	2302      	movs	r3, #2
 800401e:	75fb      	strb	r3, [r7, #23]
 8004020:	e001      	b.n	8004026 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004022:	230f      	movs	r3, #15
 8004024:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004026:	7dfb      	ldrb	r3, [r7, #23]
}
 8004028:	4618      	mov	r0, r3
 800402a:	371c      	adds	r7, #28
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004034:	b480      	push	{r7}
 8004036:	b085      	sub	sp, #20
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	785b      	ldrb	r3, [r3, #1]
 800404c:	2b01      	cmp	r3, #1
 800404e:	d13a      	bne.n	80040c6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004056:	69da      	ldr	r2, [r3, #28]
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	781b      	ldrb	r3, [r3, #0]
 800405c:	f003 030f 	and.w	r3, r3, #15
 8004060:	2101      	movs	r1, #1
 8004062:	fa01 f303 	lsl.w	r3, r1, r3
 8004066:	b29b      	uxth	r3, r3
 8004068:	68f9      	ldr	r1, [r7, #12]
 800406a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800406e:	4313      	orrs	r3, r2
 8004070:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	015a      	lsls	r2, r3, #5
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	4413      	add	r3, r2
 800407a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d155      	bne.n	8004134 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	015a      	lsls	r2, r3, #5
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	4413      	add	r3, r2
 8004090:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	791b      	ldrb	r3, [r3, #4]
 80040a2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80040a4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	059b      	lsls	r3, r3, #22
 80040aa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80040ac:	4313      	orrs	r3, r2
 80040ae:	68ba      	ldr	r2, [r7, #8]
 80040b0:	0151      	lsls	r1, r2, #5
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	440a      	add	r2, r1
 80040b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80040ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80040c2:	6013      	str	r3, [r2, #0]
 80040c4:	e036      	b.n	8004134 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040cc:	69da      	ldr	r2, [r3, #28]
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	f003 030f 	and.w	r3, r3, #15
 80040d6:	2101      	movs	r1, #1
 80040d8:	fa01 f303 	lsl.w	r3, r1, r3
 80040dc:	041b      	lsls	r3, r3, #16
 80040de:	68f9      	ldr	r1, [r7, #12]
 80040e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80040e4:	4313      	orrs	r3, r2
 80040e6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	015a      	lsls	r2, r3, #5
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	4413      	add	r3, r2
 80040f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d11a      	bne.n	8004134 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	015a      	lsls	r2, r3, #5
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	4413      	add	r3, r2
 8004106:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	791b      	ldrb	r3, [r3, #4]
 8004118:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800411a:	430b      	orrs	r3, r1
 800411c:	4313      	orrs	r3, r2
 800411e:	68ba      	ldr	r2, [r7, #8]
 8004120:	0151      	lsls	r1, r2, #5
 8004122:	68fa      	ldr	r2, [r7, #12]
 8004124:	440a      	add	r2, r1
 8004126:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800412a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800412e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004132:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3714      	adds	r7, #20
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
	...

08004144 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004144:	b480      	push	{r7}
 8004146:	b085      	sub	sp, #20
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	785b      	ldrb	r3, [r3, #1]
 800415c:	2b01      	cmp	r3, #1
 800415e:	d161      	bne.n	8004224 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	015a      	lsls	r2, r3, #5
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	4413      	add	r3, r2
 8004168:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004172:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004176:	d11f      	bne.n	80041b8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	015a      	lsls	r2, r3, #5
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	4413      	add	r3, r2
 8004180:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68ba      	ldr	r2, [r7, #8]
 8004188:	0151      	lsls	r1, r2, #5
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	440a      	add	r2, r1
 800418e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004192:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004196:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	015a      	lsls	r2, r3, #5
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	4413      	add	r3, r2
 80041a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	68ba      	ldr	r2, [r7, #8]
 80041a8:	0151      	lsls	r1, r2, #5
 80041aa:	68fa      	ldr	r2, [r7, #12]
 80041ac:	440a      	add	r2, r1
 80041ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80041b2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80041b6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	f003 030f 	and.w	r3, r3, #15
 80041c8:	2101      	movs	r1, #1
 80041ca:	fa01 f303 	lsl.w	r3, r1, r3
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	43db      	mvns	r3, r3
 80041d2:	68f9      	ldr	r1, [r7, #12]
 80041d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80041d8:	4013      	ands	r3, r2
 80041da:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041e2:	69da      	ldr	r2, [r3, #28]
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	f003 030f 	and.w	r3, r3, #15
 80041ec:	2101      	movs	r1, #1
 80041ee:	fa01 f303 	lsl.w	r3, r1, r3
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	43db      	mvns	r3, r3
 80041f6:	68f9      	ldr	r1, [r7, #12]
 80041f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80041fc:	4013      	ands	r3, r2
 80041fe:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	015a      	lsls	r2, r3, #5
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	4413      	add	r3, r2
 8004208:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	0159      	lsls	r1, r3, #5
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	440b      	add	r3, r1
 8004216:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800421a:	4619      	mov	r1, r3
 800421c:	4b35      	ldr	r3, [pc, #212]	@ (80042f4 <USB_DeactivateEndpoint+0x1b0>)
 800421e:	4013      	ands	r3, r2
 8004220:	600b      	str	r3, [r1, #0]
 8004222:	e060      	b.n	80042e6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	015a      	lsls	r2, r3, #5
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	4413      	add	r3, r2
 800422c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004236:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800423a:	d11f      	bne.n	800427c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	015a      	lsls	r2, r3, #5
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	4413      	add	r3, r2
 8004244:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	68ba      	ldr	r2, [r7, #8]
 800424c:	0151      	lsls	r1, r2, #5
 800424e:	68fa      	ldr	r2, [r7, #12]
 8004250:	440a      	add	r2, r1
 8004252:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004256:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800425a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	015a      	lsls	r2, r3, #5
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	4413      	add	r3, r2
 8004264:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	68ba      	ldr	r2, [r7, #8]
 800426c:	0151      	lsls	r1, r2, #5
 800426e:	68fa      	ldr	r2, [r7, #12]
 8004270:	440a      	add	r2, r1
 8004272:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004276:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800427a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004282:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	f003 030f 	and.w	r3, r3, #15
 800428c:	2101      	movs	r1, #1
 800428e:	fa01 f303 	lsl.w	r3, r1, r3
 8004292:	041b      	lsls	r3, r3, #16
 8004294:	43db      	mvns	r3, r3
 8004296:	68f9      	ldr	r1, [r7, #12]
 8004298:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800429c:	4013      	ands	r3, r2
 800429e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042a6:	69da      	ldr	r2, [r3, #28]
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	f003 030f 	and.w	r3, r3, #15
 80042b0:	2101      	movs	r1, #1
 80042b2:	fa01 f303 	lsl.w	r3, r1, r3
 80042b6:	041b      	lsls	r3, r3, #16
 80042b8:	43db      	mvns	r3, r3
 80042ba:	68f9      	ldr	r1, [r7, #12]
 80042bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80042c0:	4013      	ands	r3, r2
 80042c2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	015a      	lsls	r2, r3, #5
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	4413      	add	r3, r2
 80042cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	0159      	lsls	r1, r3, #5
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	440b      	add	r3, r1
 80042da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042de:	4619      	mov	r1, r3
 80042e0:	4b05      	ldr	r3, [pc, #20]	@ (80042f8 <USB_DeactivateEndpoint+0x1b4>)
 80042e2:	4013      	ands	r3, r2
 80042e4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80042e6:	2300      	movs	r3, #0
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3714      	adds	r7, #20
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr
 80042f4:	ec337800 	.word	0xec337800
 80042f8:	eff37800 	.word	0xeff37800

080042fc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b08a      	sub	sp, #40	@ 0x28
 8004300:	af02      	add	r7, sp, #8
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	4613      	mov	r3, r2
 8004308:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	785b      	ldrb	r3, [r3, #1]
 8004318:	2b01      	cmp	r3, #1
 800431a:	f040 817f 	bne.w	800461c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d132      	bne.n	800438c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	015a      	lsls	r2, r3, #5
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	4413      	add	r3, r2
 800432e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004332:	691b      	ldr	r3, [r3, #16]
 8004334:	69ba      	ldr	r2, [r7, #24]
 8004336:	0151      	lsls	r1, r2, #5
 8004338:	69fa      	ldr	r2, [r7, #28]
 800433a:	440a      	add	r2, r1
 800433c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004340:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004344:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004348:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	015a      	lsls	r2, r3, #5
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	4413      	add	r3, r2
 8004352:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004356:	691b      	ldr	r3, [r3, #16]
 8004358:	69ba      	ldr	r2, [r7, #24]
 800435a:	0151      	lsls	r1, r2, #5
 800435c:	69fa      	ldr	r2, [r7, #28]
 800435e:	440a      	add	r2, r1
 8004360:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004364:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004368:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	015a      	lsls	r2, r3, #5
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	4413      	add	r3, r2
 8004372:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004376:	691b      	ldr	r3, [r3, #16]
 8004378:	69ba      	ldr	r2, [r7, #24]
 800437a:	0151      	lsls	r1, r2, #5
 800437c:	69fa      	ldr	r2, [r7, #28]
 800437e:	440a      	add	r2, r1
 8004380:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004384:	0cdb      	lsrs	r3, r3, #19
 8004386:	04db      	lsls	r3, r3, #19
 8004388:	6113      	str	r3, [r2, #16]
 800438a:	e097      	b.n	80044bc <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	015a      	lsls	r2, r3, #5
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	4413      	add	r3, r2
 8004394:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	69ba      	ldr	r2, [r7, #24]
 800439c:	0151      	lsls	r1, r2, #5
 800439e:	69fa      	ldr	r2, [r7, #28]
 80043a0:	440a      	add	r2, r1
 80043a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80043a6:	0cdb      	lsrs	r3, r3, #19
 80043a8:	04db      	lsls	r3, r3, #19
 80043aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80043ac:	69bb      	ldr	r3, [r7, #24]
 80043ae:	015a      	lsls	r2, r3, #5
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	4413      	add	r3, r2
 80043b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	69ba      	ldr	r2, [r7, #24]
 80043bc:	0151      	lsls	r1, r2, #5
 80043be:	69fa      	ldr	r2, [r7, #28]
 80043c0:	440a      	add	r2, r1
 80043c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80043c6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80043ca:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80043ce:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d11a      	bne.n	800440c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	691a      	ldr	r2, [r3, #16]
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d903      	bls.n	80043ea <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	689a      	ldr	r2, [r3, #8]
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80043ea:	69bb      	ldr	r3, [r7, #24]
 80043ec:	015a      	lsls	r2, r3, #5
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	4413      	add	r3, r2
 80043f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043f6:	691b      	ldr	r3, [r3, #16]
 80043f8:	69ba      	ldr	r2, [r7, #24]
 80043fa:	0151      	lsls	r1, r2, #5
 80043fc:	69fa      	ldr	r2, [r7, #28]
 80043fe:	440a      	add	r2, r1
 8004400:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004404:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004408:	6113      	str	r3, [r2, #16]
 800440a:	e044      	b.n	8004496 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	691a      	ldr	r2, [r3, #16]
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	4413      	add	r3, r2
 8004416:	1e5a      	subs	r2, r3, #1
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004420:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	015a      	lsls	r2, r3, #5
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	4413      	add	r3, r2
 800442a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800442e:	691a      	ldr	r2, [r3, #16]
 8004430:	8afb      	ldrh	r3, [r7, #22]
 8004432:	04d9      	lsls	r1, r3, #19
 8004434:	4ba4      	ldr	r3, [pc, #656]	@ (80046c8 <USB_EPStartXfer+0x3cc>)
 8004436:	400b      	ands	r3, r1
 8004438:	69b9      	ldr	r1, [r7, #24]
 800443a:	0148      	lsls	r0, r1, #5
 800443c:	69f9      	ldr	r1, [r7, #28]
 800443e:	4401      	add	r1, r0
 8004440:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004444:	4313      	orrs	r3, r2
 8004446:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	791b      	ldrb	r3, [r3, #4]
 800444c:	2b01      	cmp	r3, #1
 800444e:	d122      	bne.n	8004496 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	015a      	lsls	r2, r3, #5
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	4413      	add	r3, r2
 8004458:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	69ba      	ldr	r2, [r7, #24]
 8004460:	0151      	lsls	r1, r2, #5
 8004462:	69fa      	ldr	r2, [r7, #28]
 8004464:	440a      	add	r2, r1
 8004466:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800446a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800446e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	015a      	lsls	r2, r3, #5
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	4413      	add	r3, r2
 8004478:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800447c:	691a      	ldr	r2, [r3, #16]
 800447e:	8afb      	ldrh	r3, [r7, #22]
 8004480:	075b      	lsls	r3, r3, #29
 8004482:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8004486:	69b9      	ldr	r1, [r7, #24]
 8004488:	0148      	lsls	r0, r1, #5
 800448a:	69f9      	ldr	r1, [r7, #28]
 800448c:	4401      	add	r1, r0
 800448e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004492:	4313      	orrs	r3, r2
 8004494:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	015a      	lsls	r2, r3, #5
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	4413      	add	r3, r2
 800449e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044a2:	691a      	ldr	r2, [r3, #16]
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044ac:	69b9      	ldr	r1, [r7, #24]
 80044ae:	0148      	lsls	r0, r1, #5
 80044b0:	69f9      	ldr	r1, [r7, #28]
 80044b2:	4401      	add	r1, r0
 80044b4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80044b8:	4313      	orrs	r3, r2
 80044ba:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80044bc:	79fb      	ldrb	r3, [r7, #7]
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d14b      	bne.n	800455a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	69db      	ldr	r3, [r3, #28]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d009      	beq.n	80044de <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80044ca:	69bb      	ldr	r3, [r7, #24]
 80044cc:	015a      	lsls	r2, r3, #5
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	4413      	add	r3, r2
 80044d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044d6:	461a      	mov	r2, r3
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	69db      	ldr	r3, [r3, #28]
 80044dc:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	791b      	ldrb	r3, [r3, #4]
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d128      	bne.n	8004538 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d110      	bne.n	8004518 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	015a      	lsls	r2, r3, #5
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	4413      	add	r3, r2
 80044fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	69ba      	ldr	r2, [r7, #24]
 8004506:	0151      	lsls	r1, r2, #5
 8004508:	69fa      	ldr	r2, [r7, #28]
 800450a:	440a      	add	r2, r1
 800450c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004510:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004514:	6013      	str	r3, [r2, #0]
 8004516:	e00f      	b.n	8004538 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	015a      	lsls	r2, r3, #5
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	4413      	add	r3, r2
 8004520:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	69ba      	ldr	r2, [r7, #24]
 8004528:	0151      	lsls	r1, r2, #5
 800452a:	69fa      	ldr	r2, [r7, #28]
 800452c:	440a      	add	r2, r1
 800452e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004532:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004536:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	015a      	lsls	r2, r3, #5
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	4413      	add	r3, r2
 8004540:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	69ba      	ldr	r2, [r7, #24]
 8004548:	0151      	lsls	r1, r2, #5
 800454a:	69fa      	ldr	r2, [r7, #28]
 800454c:	440a      	add	r2, r1
 800454e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004552:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004556:	6013      	str	r3, [r2, #0]
 8004558:	e166      	b.n	8004828 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800455a:	69bb      	ldr	r3, [r7, #24]
 800455c:	015a      	lsls	r2, r3, #5
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	4413      	add	r3, r2
 8004562:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	69ba      	ldr	r2, [r7, #24]
 800456a:	0151      	lsls	r1, r2, #5
 800456c:	69fa      	ldr	r2, [r7, #28]
 800456e:	440a      	add	r2, r1
 8004570:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004574:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004578:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	791b      	ldrb	r3, [r3, #4]
 800457e:	2b01      	cmp	r3, #1
 8004580:	d015      	beq.n	80045ae <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	2b00      	cmp	r3, #0
 8004588:	f000 814e 	beq.w	8004828 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004592:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	f003 030f 	and.w	r3, r3, #15
 800459c:	2101      	movs	r1, #1
 800459e:	fa01 f303 	lsl.w	r3, r1, r3
 80045a2:	69f9      	ldr	r1, [r7, #28]
 80045a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80045a8:	4313      	orrs	r3, r2
 80045aa:	634b      	str	r3, [r1, #52]	@ 0x34
 80045ac:	e13c      	b.n	8004828 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d110      	bne.n	80045e0 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	015a      	lsls	r2, r3, #5
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	4413      	add	r3, r2
 80045c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	69ba      	ldr	r2, [r7, #24]
 80045ce:	0151      	lsls	r1, r2, #5
 80045d0:	69fa      	ldr	r2, [r7, #28]
 80045d2:	440a      	add	r2, r1
 80045d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80045d8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80045dc:	6013      	str	r3, [r2, #0]
 80045de:	e00f      	b.n	8004600 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	015a      	lsls	r2, r3, #5
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	4413      	add	r3, r2
 80045e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	69ba      	ldr	r2, [r7, #24]
 80045f0:	0151      	lsls	r1, r2, #5
 80045f2:	69fa      	ldr	r2, [r7, #28]
 80045f4:	440a      	add	r2, r1
 80045f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80045fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045fe:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	68d9      	ldr	r1, [r3, #12]
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	781a      	ldrb	r2, [r3, #0]
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	691b      	ldr	r3, [r3, #16]
 800460c:	b298      	uxth	r0, r3
 800460e:	79fb      	ldrb	r3, [r7, #7]
 8004610:	9300      	str	r3, [sp, #0]
 8004612:	4603      	mov	r3, r0
 8004614:	68f8      	ldr	r0, [r7, #12]
 8004616:	f000 f9b9 	bl	800498c <USB_WritePacket>
 800461a:	e105      	b.n	8004828 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800461c:	69bb      	ldr	r3, [r7, #24]
 800461e:	015a      	lsls	r2, r3, #5
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	4413      	add	r3, r2
 8004624:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	69ba      	ldr	r2, [r7, #24]
 800462c:	0151      	lsls	r1, r2, #5
 800462e:	69fa      	ldr	r2, [r7, #28]
 8004630:	440a      	add	r2, r1
 8004632:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004636:	0cdb      	lsrs	r3, r3, #19
 8004638:	04db      	lsls	r3, r3, #19
 800463a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	015a      	lsls	r2, r3, #5
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	4413      	add	r3, r2
 8004644:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	69ba      	ldr	r2, [r7, #24]
 800464c:	0151      	lsls	r1, r2, #5
 800464e:	69fa      	ldr	r2, [r7, #28]
 8004650:	440a      	add	r2, r1
 8004652:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004656:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800465a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800465e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8004660:	69bb      	ldr	r3, [r7, #24]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d132      	bne.n	80046cc <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d003      	beq.n	8004676 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	689a      	ldr	r2, [r3, #8]
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	689a      	ldr	r2, [r3, #8]
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	015a      	lsls	r2, r3, #5
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	4413      	add	r3, r2
 8004686:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800468a:	691a      	ldr	r2, [r3, #16]
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	6a1b      	ldr	r3, [r3, #32]
 8004690:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004694:	69b9      	ldr	r1, [r7, #24]
 8004696:	0148      	lsls	r0, r1, #5
 8004698:	69f9      	ldr	r1, [r7, #28]
 800469a:	4401      	add	r1, r0
 800469c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80046a0:	4313      	orrs	r3, r2
 80046a2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	015a      	lsls	r2, r3, #5
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	4413      	add	r3, r2
 80046ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046b0:	691b      	ldr	r3, [r3, #16]
 80046b2:	69ba      	ldr	r2, [r7, #24]
 80046b4:	0151      	lsls	r1, r2, #5
 80046b6:	69fa      	ldr	r2, [r7, #28]
 80046b8:	440a      	add	r2, r1
 80046ba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80046be:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80046c2:	6113      	str	r3, [r2, #16]
 80046c4:	e062      	b.n	800478c <USB_EPStartXfer+0x490>
 80046c6:	bf00      	nop
 80046c8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	691b      	ldr	r3, [r3, #16]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d123      	bne.n	800471c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	015a      	lsls	r2, r3, #5
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	4413      	add	r3, r2
 80046dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046e0:	691a      	ldr	r2, [r3, #16]
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046ea:	69b9      	ldr	r1, [r7, #24]
 80046ec:	0148      	lsls	r0, r1, #5
 80046ee:	69f9      	ldr	r1, [r7, #28]
 80046f0:	4401      	add	r1, r0
 80046f2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80046f6:	4313      	orrs	r3, r2
 80046f8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	015a      	lsls	r2, r3, #5
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	4413      	add	r3, r2
 8004702:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004706:	691b      	ldr	r3, [r3, #16]
 8004708:	69ba      	ldr	r2, [r7, #24]
 800470a:	0151      	lsls	r1, r2, #5
 800470c:	69fa      	ldr	r2, [r7, #28]
 800470e:	440a      	add	r2, r1
 8004710:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004714:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004718:	6113      	str	r3, [r2, #16]
 800471a:	e037      	b.n	800478c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	691a      	ldr	r2, [r3, #16]
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	4413      	add	r3, r2
 8004726:	1e5a      	subs	r2, r3, #1
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004730:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	8afa      	ldrh	r2, [r7, #22]
 8004738:	fb03 f202 	mul.w	r2, r3, r2
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	015a      	lsls	r2, r3, #5
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	4413      	add	r3, r2
 8004748:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800474c:	691a      	ldr	r2, [r3, #16]
 800474e:	8afb      	ldrh	r3, [r7, #22]
 8004750:	04d9      	lsls	r1, r3, #19
 8004752:	4b38      	ldr	r3, [pc, #224]	@ (8004834 <USB_EPStartXfer+0x538>)
 8004754:	400b      	ands	r3, r1
 8004756:	69b9      	ldr	r1, [r7, #24]
 8004758:	0148      	lsls	r0, r1, #5
 800475a:	69f9      	ldr	r1, [r7, #28]
 800475c:	4401      	add	r1, r0
 800475e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004762:	4313      	orrs	r3, r2
 8004764:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	015a      	lsls	r2, r3, #5
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	4413      	add	r3, r2
 800476e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004772:	691a      	ldr	r2, [r3, #16]
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	6a1b      	ldr	r3, [r3, #32]
 8004778:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800477c:	69b9      	ldr	r1, [r7, #24]
 800477e:	0148      	lsls	r0, r1, #5
 8004780:	69f9      	ldr	r1, [r7, #28]
 8004782:	4401      	add	r1, r0
 8004784:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004788:	4313      	orrs	r3, r2
 800478a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800478c:	79fb      	ldrb	r3, [r7, #7]
 800478e:	2b01      	cmp	r3, #1
 8004790:	d10d      	bne.n	80047ae <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d009      	beq.n	80047ae <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	68d9      	ldr	r1, [r3, #12]
 800479e:	69bb      	ldr	r3, [r7, #24]
 80047a0:	015a      	lsls	r2, r3, #5
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	4413      	add	r3, r2
 80047a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047aa:	460a      	mov	r2, r1
 80047ac:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	791b      	ldrb	r3, [r3, #4]
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d128      	bne.n	8004808 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d110      	bne.n	80047e8 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	015a      	lsls	r2, r3, #5
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	4413      	add	r3, r2
 80047ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	69ba      	ldr	r2, [r7, #24]
 80047d6:	0151      	lsls	r1, r2, #5
 80047d8:	69fa      	ldr	r2, [r7, #28]
 80047da:	440a      	add	r2, r1
 80047dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80047e0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80047e4:	6013      	str	r3, [r2, #0]
 80047e6:	e00f      	b.n	8004808 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80047e8:	69bb      	ldr	r3, [r7, #24]
 80047ea:	015a      	lsls	r2, r3, #5
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	4413      	add	r3, r2
 80047f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	69ba      	ldr	r2, [r7, #24]
 80047f8:	0151      	lsls	r1, r2, #5
 80047fa:	69fa      	ldr	r2, [r7, #28]
 80047fc:	440a      	add	r2, r1
 80047fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004802:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004806:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004808:	69bb      	ldr	r3, [r7, #24]
 800480a:	015a      	lsls	r2, r3, #5
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	4413      	add	r3, r2
 8004810:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	69ba      	ldr	r2, [r7, #24]
 8004818:	0151      	lsls	r1, r2, #5
 800481a:	69fa      	ldr	r2, [r7, #28]
 800481c:	440a      	add	r2, r1
 800481e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004822:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004826:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004828:	2300      	movs	r3, #0
}
 800482a:	4618      	mov	r0, r3
 800482c:	3720      	adds	r7, #32
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	1ff80000 	.word	0x1ff80000

08004838 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004838:	b480      	push	{r7}
 800483a:	b087      	sub	sp, #28
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004842:	2300      	movs	r3, #0
 8004844:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004846:	2300      	movs	r3, #0
 8004848:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	785b      	ldrb	r3, [r3, #1]
 8004852:	2b01      	cmp	r3, #1
 8004854:	d14a      	bne.n	80048ec <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	015a      	lsls	r2, r3, #5
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	4413      	add	r3, r2
 8004860:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800486a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800486e:	f040 8086 	bne.w	800497e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	015a      	lsls	r2, r3, #5
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	4413      	add	r3, r2
 800487c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	683a      	ldr	r2, [r7, #0]
 8004884:	7812      	ldrb	r2, [r2, #0]
 8004886:	0151      	lsls	r1, r2, #5
 8004888:	693a      	ldr	r2, [r7, #16]
 800488a:	440a      	add	r2, r1
 800488c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004890:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004894:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	015a      	lsls	r2, r3, #5
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	4413      	add	r3, r2
 80048a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	683a      	ldr	r2, [r7, #0]
 80048a8:	7812      	ldrb	r2, [r2, #0]
 80048aa:	0151      	lsls	r1, r2, #5
 80048ac:	693a      	ldr	r2, [r7, #16]
 80048ae:	440a      	add	r2, r1
 80048b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80048b4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80048b8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	3301      	adds	r3, #1
 80048be:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d902      	bls.n	80048d0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	75fb      	strb	r3, [r7, #23]
          break;
 80048ce:	e056      	b.n	800497e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	015a      	lsls	r2, r3, #5
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	4413      	add	r3, r2
 80048da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80048e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80048e8:	d0e7      	beq.n	80048ba <USB_EPStopXfer+0x82>
 80048ea:	e048      	b.n	800497e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	015a      	lsls	r2, r3, #5
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	4413      	add	r3, r2
 80048f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004900:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004904:	d13b      	bne.n	800497e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	015a      	lsls	r2, r3, #5
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	4413      	add	r3, r2
 8004910:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	683a      	ldr	r2, [r7, #0]
 8004918:	7812      	ldrb	r2, [r2, #0]
 800491a:	0151      	lsls	r1, r2, #5
 800491c:	693a      	ldr	r2, [r7, #16]
 800491e:	440a      	add	r2, r1
 8004920:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004924:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004928:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	015a      	lsls	r2, r3, #5
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	4413      	add	r3, r2
 8004934:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	683a      	ldr	r2, [r7, #0]
 800493c:	7812      	ldrb	r2, [r2, #0]
 800493e:	0151      	lsls	r1, r2, #5
 8004940:	693a      	ldr	r2, [r7, #16]
 8004942:	440a      	add	r2, r1
 8004944:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004948:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800494c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	3301      	adds	r3, #1
 8004952:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f242 7210 	movw	r2, #10000	@ 0x2710
 800495a:	4293      	cmp	r3, r2
 800495c:	d902      	bls.n	8004964 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	75fb      	strb	r3, [r7, #23]
          break;
 8004962:	e00c      	b.n	800497e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	015a      	lsls	r2, r3, #5
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	4413      	add	r3, r2
 800496e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004978:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800497c:	d0e7      	beq.n	800494e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800497e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004980:	4618      	mov	r0, r3
 8004982:	371c      	adds	r7, #28
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800498c:	b480      	push	{r7}
 800498e:	b089      	sub	sp, #36	@ 0x24
 8004990:	af00      	add	r7, sp, #0
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	60b9      	str	r1, [r7, #8]
 8004996:	4611      	mov	r1, r2
 8004998:	461a      	mov	r2, r3
 800499a:	460b      	mov	r3, r1
 800499c:	71fb      	strb	r3, [r7, #7]
 800499e:	4613      	mov	r3, r2
 80049a0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80049aa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d123      	bne.n	80049fa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80049b2:	88bb      	ldrh	r3, [r7, #4]
 80049b4:	3303      	adds	r3, #3
 80049b6:	089b      	lsrs	r3, r3, #2
 80049b8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80049ba:	2300      	movs	r3, #0
 80049bc:	61bb      	str	r3, [r7, #24]
 80049be:	e018      	b.n	80049f2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80049c0:	79fb      	ldrb	r3, [r7, #7]
 80049c2:	031a      	lsls	r2, r3, #12
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	4413      	add	r3, r2
 80049c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049cc:	461a      	mov	r2, r3
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	3301      	adds	r3, #1
 80049d8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	3301      	adds	r3, #1
 80049de:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	3301      	adds	r3, #1
 80049e4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	3301      	adds	r3, #1
 80049ea:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	3301      	adds	r3, #1
 80049f0:	61bb      	str	r3, [r7, #24]
 80049f2:	69ba      	ldr	r2, [r7, #24]
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d3e2      	bcc.n	80049c0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80049fa:	2300      	movs	r3, #0
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3724      	adds	r7, #36	@ 0x24
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b08b      	sub	sp, #44	@ 0x2c
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	4613      	mov	r3, r2
 8004a14:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004a1e:	88fb      	ldrh	r3, [r7, #6]
 8004a20:	089b      	lsrs	r3, r3, #2
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004a26:	88fb      	ldrh	r3, [r7, #6]
 8004a28:	f003 0303 	and.w	r3, r3, #3
 8004a2c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004a2e:	2300      	movs	r3, #0
 8004a30:	623b      	str	r3, [r7, #32]
 8004a32:	e014      	b.n	8004a5e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004a34:	69bb      	ldr	r3, [r7, #24]
 8004a36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a3e:	601a      	str	r2, [r3, #0]
    pDest++;
 8004a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a42:	3301      	adds	r3, #1
 8004a44:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a48:	3301      	adds	r3, #1
 8004a4a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a4e:	3301      	adds	r3, #1
 8004a50:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a54:	3301      	adds	r3, #1
 8004a56:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8004a58:	6a3b      	ldr	r3, [r7, #32]
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	623b      	str	r3, [r7, #32]
 8004a5e:	6a3a      	ldr	r2, [r7, #32]
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d3e6      	bcc.n	8004a34 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004a66:	8bfb      	ldrh	r3, [r7, #30]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d01e      	beq.n	8004aaa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a76:	461a      	mov	r2, r3
 8004a78:	f107 0310 	add.w	r3, r7, #16
 8004a7c:	6812      	ldr	r2, [r2, #0]
 8004a7e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004a80:	693a      	ldr	r2, [r7, #16]
 8004a82:	6a3b      	ldr	r3, [r7, #32]
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	00db      	lsls	r3, r3, #3
 8004a88:	fa22 f303 	lsr.w	r3, r2, r3
 8004a8c:	b2da      	uxtb	r2, r3
 8004a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a90:	701a      	strb	r2, [r3, #0]
      i++;
 8004a92:	6a3b      	ldr	r3, [r7, #32]
 8004a94:	3301      	adds	r3, #1
 8004a96:	623b      	str	r3, [r7, #32]
      pDest++;
 8004a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8004a9e:	8bfb      	ldrh	r3, [r7, #30]
 8004aa0:	3b01      	subs	r3, #1
 8004aa2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004aa4:	8bfb      	ldrh	r3, [r7, #30]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d1ea      	bne.n	8004a80 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	372c      	adds	r7, #44	@ 0x2c
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b085      	sub	sp, #20
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	785b      	ldrb	r3, [r3, #1]
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d12c      	bne.n	8004b2e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	015a      	lsls	r2, r3, #5
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	4413      	add	r3, r2
 8004adc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	db12      	blt.n	8004b0c <USB_EPSetStall+0x54>
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d00f      	beq.n	8004b0c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	015a      	lsls	r2, r3, #5
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	4413      	add	r3, r2
 8004af4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68ba      	ldr	r2, [r7, #8]
 8004afc:	0151      	lsls	r1, r2, #5
 8004afe:	68fa      	ldr	r2, [r7, #12]
 8004b00:	440a      	add	r2, r1
 8004b02:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b06:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004b0a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	015a      	lsls	r2, r3, #5
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	4413      	add	r3, r2
 8004b14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68ba      	ldr	r2, [r7, #8]
 8004b1c:	0151      	lsls	r1, r2, #5
 8004b1e:	68fa      	ldr	r2, [r7, #12]
 8004b20:	440a      	add	r2, r1
 8004b22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b26:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004b2a:	6013      	str	r3, [r2, #0]
 8004b2c:	e02b      	b.n	8004b86 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	015a      	lsls	r2, r3, #5
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	4413      	add	r3, r2
 8004b36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	db12      	blt.n	8004b66 <USB_EPSetStall+0xae>
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d00f      	beq.n	8004b66 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	015a      	lsls	r2, r3, #5
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	4413      	add	r3, r2
 8004b4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	68ba      	ldr	r2, [r7, #8]
 8004b56:	0151      	lsls	r1, r2, #5
 8004b58:	68fa      	ldr	r2, [r7, #12]
 8004b5a:	440a      	add	r2, r1
 8004b5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b60:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004b64:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	015a      	lsls	r2, r3, #5
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	4413      	add	r3, r2
 8004b6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68ba      	ldr	r2, [r7, #8]
 8004b76:	0151      	lsls	r1, r2, #5
 8004b78:	68fa      	ldr	r2, [r7, #12]
 8004b7a:	440a      	add	r2, r1
 8004b7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b80:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004b84:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004b86:	2300      	movs	r3, #0
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3714      	adds	r7, #20
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b085      	sub	sp, #20
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	785b      	ldrb	r3, [r3, #1]
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d128      	bne.n	8004c02 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	015a      	lsls	r2, r3, #5
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	4413      	add	r3, r2
 8004bb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	68ba      	ldr	r2, [r7, #8]
 8004bc0:	0151      	lsls	r1, r2, #5
 8004bc2:	68fa      	ldr	r2, [r7, #12]
 8004bc4:	440a      	add	r2, r1
 8004bc6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004bca:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004bce:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	791b      	ldrb	r3, [r3, #4]
 8004bd4:	2b03      	cmp	r3, #3
 8004bd6:	d003      	beq.n	8004be0 <USB_EPClearStall+0x4c>
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	791b      	ldrb	r3, [r3, #4]
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d138      	bne.n	8004c52 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	015a      	lsls	r2, r3, #5
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	4413      	add	r3, r2
 8004be8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	68ba      	ldr	r2, [r7, #8]
 8004bf0:	0151      	lsls	r1, r2, #5
 8004bf2:	68fa      	ldr	r2, [r7, #12]
 8004bf4:	440a      	add	r2, r1
 8004bf6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004bfa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bfe:	6013      	str	r3, [r2, #0]
 8004c00:	e027      	b.n	8004c52 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	015a      	lsls	r2, r3, #5
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	4413      	add	r3, r2
 8004c0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	68ba      	ldr	r2, [r7, #8]
 8004c12:	0151      	lsls	r1, r2, #5
 8004c14:	68fa      	ldr	r2, [r7, #12]
 8004c16:	440a      	add	r2, r1
 8004c18:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004c1c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004c20:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	791b      	ldrb	r3, [r3, #4]
 8004c26:	2b03      	cmp	r3, #3
 8004c28:	d003      	beq.n	8004c32 <USB_EPClearStall+0x9e>
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	791b      	ldrb	r3, [r3, #4]
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d10f      	bne.n	8004c52 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	015a      	lsls	r2, r3, #5
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	4413      	add	r3, r2
 8004c3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	68ba      	ldr	r2, [r7, #8]
 8004c42:	0151      	lsls	r1, r2, #5
 8004c44:	68fa      	ldr	r2, [r7, #12]
 8004c46:	440a      	add	r2, r1
 8004c48:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004c4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c50:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004c52:	2300      	movs	r3, #0
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3714      	adds	r7, #20
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr

08004c60 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b085      	sub	sp, #20
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	460b      	mov	r3, r1
 8004c6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	68fa      	ldr	r2, [r7, #12]
 8004c7a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004c7e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004c82:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	78fb      	ldrb	r3, [r7, #3]
 8004c8e:	011b      	lsls	r3, r3, #4
 8004c90:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8004c94:	68f9      	ldr	r1, [r7, #12]
 8004c96:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004c9e:	2300      	movs	r3, #0
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3714      	adds	r7, #20
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b085      	sub	sp, #20
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	68fa      	ldr	r2, [r7, #12]
 8004cc2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004cc6:	f023 0303 	bic.w	r3, r3, #3
 8004cca:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004cda:	f023 0302 	bic.w	r3, r3, #2
 8004cde:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3714      	adds	r7, #20
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr

08004cee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004cee:	b480      	push	{r7}
 8004cf0:	b085      	sub	sp, #20
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68fa      	ldr	r2, [r7, #12]
 8004d04:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004d08:	f023 0303 	bic.w	r3, r3, #3
 8004d0c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004d1c:	f043 0302 	orr.w	r3, r3, #2
 8004d20:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004d22:	2300      	movs	r3, #0
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3714      	adds	r7, #20
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr

08004d30 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b085      	sub	sp, #20
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	695b      	ldr	r3, [r3, #20]
 8004d3c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	699b      	ldr	r3, [r3, #24]
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	4013      	ands	r3, r2
 8004d46:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004d48:	68fb      	ldr	r3, [r7, #12]
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3714      	adds	r7, #20
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr

08004d56 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004d56:	b480      	push	{r7}
 8004d58:	b085      	sub	sp, #20
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d68:	699b      	ldr	r3, [r3, #24]
 8004d6a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d72:	69db      	ldr	r3, [r3, #28]
 8004d74:	68ba      	ldr	r2, [r7, #8]
 8004d76:	4013      	ands	r3, r2
 8004d78:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	0c1b      	lsrs	r3, r3, #16
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3714      	adds	r7, #20
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr

08004d8a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004d8a:	b480      	push	{r7}
 8004d8c:	b085      	sub	sp, #20
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d9c:	699b      	ldr	r3, [r3, #24]
 8004d9e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004da6:	69db      	ldr	r3, [r3, #28]
 8004da8:	68ba      	ldr	r2, [r7, #8]
 8004daa:	4013      	ands	r3, r2
 8004dac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	b29b      	uxth	r3, r3
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3714      	adds	r7, #20
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr

08004dbe <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004dbe:	b480      	push	{r7}
 8004dc0:	b085      	sub	sp, #20
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
 8004dc6:	460b      	mov	r3, r1
 8004dc8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004dce:	78fb      	ldrb	r3, [r7, #3]
 8004dd0:	015a      	lsls	r2, r3, #5
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	4413      	add	r3, r2
 8004dd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	68ba      	ldr	r2, [r7, #8]
 8004de8:	4013      	ands	r3, r2
 8004dea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004dec:	68bb      	ldr	r3, [r7, #8]
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3714      	adds	r7, #20
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr

08004dfa <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004dfa:	b480      	push	{r7}
 8004dfc:	b087      	sub	sp, #28
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
 8004e02:	460b      	mov	r3, r1
 8004e04:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e1c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004e1e:	78fb      	ldrb	r3, [r7, #3]
 8004e20:	f003 030f 	and.w	r3, r3, #15
 8004e24:	68fa      	ldr	r2, [r7, #12]
 8004e26:	fa22 f303 	lsr.w	r3, r2, r3
 8004e2a:	01db      	lsls	r3, r3, #7
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	693a      	ldr	r2, [r7, #16]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004e34:	78fb      	ldrb	r3, [r7, #3]
 8004e36:	015a      	lsls	r2, r3, #5
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	4413      	add	r3, r2
 8004e3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	693a      	ldr	r2, [r7, #16]
 8004e44:	4013      	ands	r3, r2
 8004e46:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004e48:	68bb      	ldr	r3, [r7, #8]
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	371c      	adds	r7, #28
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr

08004e56 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004e56:	b480      	push	{r7}
 8004e58:	b083      	sub	sp, #12
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	695b      	ldr	r3, [r3, #20]
 8004e62:	f003 0301 	and.w	r3, r3, #1
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	370c      	adds	r7, #12
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr

08004e72 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8004e72:	b480      	push	{r7}
 8004e74:	b085      	sub	sp, #20
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	68fa      	ldr	r2, [r7, #12]
 8004e88:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e8c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004e90:	f023 0307 	bic.w	r3, r3, #7
 8004e94:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	68fa      	ldr	r2, [r7, #12]
 8004ea0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004ea4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ea8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004eaa:	2300      	movs	r3, #0
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3714      	adds	r7, #20
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr

08004eb8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b087      	sub	sp, #28
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	607a      	str	r2, [r7, #4]
 8004ec4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	333c      	adds	r3, #60	@ 0x3c
 8004ece:	3304      	adds	r3, #4
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	4a26      	ldr	r2, [pc, #152]	@ (8004f70 <USB_EP0_OutStart+0xb8>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d90a      	bls.n	8004ef2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004ee8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004eec:	d101      	bne.n	8004ef2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	e037      	b.n	8004f62 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ef8:	461a      	mov	r2, r3
 8004efa:	2300      	movs	r3, #0
 8004efc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f04:	691b      	ldr	r3, [r3, #16]
 8004f06:	697a      	ldr	r2, [r7, #20]
 8004f08:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f0c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004f10:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f18:	691b      	ldr	r3, [r3, #16]
 8004f1a:	697a      	ldr	r2, [r7, #20]
 8004f1c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f20:	f043 0318 	orr.w	r3, r3, #24
 8004f24:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f2c:	691b      	ldr	r3, [r3, #16]
 8004f2e:	697a      	ldr	r2, [r7, #20]
 8004f30:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f34:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8004f38:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004f3a:	7afb      	ldrb	r3, [r7, #11]
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d10f      	bne.n	8004f60 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f46:	461a      	mov	r2, r3
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	697a      	ldr	r2, [r7, #20]
 8004f56:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f5a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8004f5e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004f60:	2300      	movs	r3, #0
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	371c      	adds	r7, #28
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr
 8004f6e:	bf00      	nop
 8004f70:	4f54300a 	.word	0x4f54300a

08004f74 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b085      	sub	sp, #20
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	3301      	adds	r3, #1
 8004f84:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004f8c:	d901      	bls.n	8004f92 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004f8e:	2303      	movs	r3, #3
 8004f90:	e01b      	b.n	8004fca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	daf2      	bge.n	8004f80 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	f043 0201 	orr.w	r2, r3, #1
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	3301      	adds	r3, #1
 8004fae:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004fb6:	d901      	bls.n	8004fbc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	e006      	b.n	8004fca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	691b      	ldr	r3, [r3, #16]
 8004fc0:	f003 0301 	and.w	r3, r3, #1
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d0f0      	beq.n	8004faa <USB_CoreReset+0x36>

  return HAL_OK;
 8004fc8:	2300      	movs	r3, #0
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3714      	adds	r7, #20
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr
	...

08004fd8 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8004fe4:	2054      	movs	r0, #84	@ 0x54
 8004fe6:	f002 fb1b 	bl	8007620 <USBD_static_malloc>
 8004fea:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d109      	bne.n	8005006 <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	32b0      	adds	r2, #176	@ 0xb0
 8004ffc:	2100      	movs	r1, #0
 8004ffe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005002:	2302      	movs	r3, #2
 8005004:	e08b      	b.n	800511e <USBD_CUSTOM_HID_Init+0x146>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	32b0      	adds	r2, #176	@ 0xb0
 8005010:	68f9      	ldr	r1, [r7, #12]
 8005012:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	32b0      	adds	r2, #176	@ 0xb0
 8005020:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	7c1b      	ldrb	r3, [r3, #16]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d11b      	bne.n	800506a <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005032:	4b3d      	ldr	r3, [pc, #244]	@ (8005128 <USBD_CUSTOM_HID_Init+0x150>)
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	f003 020f 	and.w	r2, r3, #15
 800503a:	6879      	ldr	r1, [r7, #4]
 800503c:	4613      	mov	r3, r2
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	4413      	add	r3, r2
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	440b      	add	r3, r1
 8005046:	3326      	adds	r3, #38	@ 0x26
 8005048:	2205      	movs	r2, #5
 800504a:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800504c:	4b37      	ldr	r3, [pc, #220]	@ (800512c <USBD_CUSTOM_HID_Init+0x154>)
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	f003 020f 	and.w	r2, r3, #15
 8005054:	6879      	ldr	r1, [r7, #4]
 8005056:	4613      	mov	r3, r2
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	4413      	add	r3, r2
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	440b      	add	r3, r1
 8005060:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8005064:	2205      	movs	r2, #5
 8005066:	801a      	strh	r2, [r3, #0]
 8005068:	e01a      	b.n	80050a0 <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800506a:	4b2f      	ldr	r3, [pc, #188]	@ (8005128 <USBD_CUSTOM_HID_Init+0x150>)
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	f003 020f 	and.w	r2, r3, #15
 8005072:	6879      	ldr	r1, [r7, #4]
 8005074:	4613      	mov	r3, r2
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	4413      	add	r3, r2
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	440b      	add	r3, r1
 800507e:	3326      	adds	r3, #38	@ 0x26
 8005080:	2205      	movs	r2, #5
 8005082:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005084:	4b29      	ldr	r3, [pc, #164]	@ (800512c <USBD_CUSTOM_HID_Init+0x154>)
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	f003 020f 	and.w	r2, r3, #15
 800508c:	6879      	ldr	r1, [r7, #4]
 800508e:	4613      	mov	r3, r2
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	4413      	add	r3, r2
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	440b      	add	r3, r1
 8005098:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 800509c:	2205      	movs	r2, #5
 800509e:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 80050a0:	4b21      	ldr	r3, [pc, #132]	@ (8005128 <USBD_CUSTOM_HID_Init+0x150>)
 80050a2:	7819      	ldrb	r1, [r3, #0]
 80050a4:	2302      	movs	r3, #2
 80050a6:	2203      	movs	r2, #3
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f002 f9a8 	bl	80073fe <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 80050ae:	4b1e      	ldr	r3, [pc, #120]	@ (8005128 <USBD_CUSTOM_HID_Init+0x150>)
 80050b0:	781b      	ldrb	r3, [r3, #0]
 80050b2:	f003 020f 	and.w	r2, r3, #15
 80050b6:	6879      	ldr	r1, [r7, #4]
 80050b8:	4613      	mov	r3, r2
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	4413      	add	r3, r2
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	440b      	add	r3, r1
 80050c2:	3324      	adds	r3, #36	@ 0x24
 80050c4:	2201      	movs	r2, #1
 80050c6:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 80050c8:	4b18      	ldr	r3, [pc, #96]	@ (800512c <USBD_CUSTOM_HID_Init+0x154>)
 80050ca:	7819      	ldrb	r1, [r3, #0]
 80050cc:	2302      	movs	r3, #2
 80050ce:	2203      	movs	r2, #3
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f002 f994 	bl	80073fe <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 80050d6:	4b15      	ldr	r3, [pc, #84]	@ (800512c <USBD_CUSTOM_HID_Init+0x154>)
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	f003 020f 	and.w	r2, r3, #15
 80050de:	6879      	ldr	r1, [r7, #4]
 80050e0:	4613      	mov	r3, r2
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	4413      	add	r3, r2
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	440b      	add	r3, r1
 80050ea:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80050ee:	2201      	movs	r2, #1
 80050f0:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2200      	movs	r2, #0
 80050f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	33b0      	adds	r3, #176	@ 0xb0
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	4413      	add	r3, r2
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 800510e:	4b07      	ldr	r3, [pc, #28]	@ (800512c <USBD_CUSTOM_HID_Init+0x154>)
 8005110:	7819      	ldrb	r1, [r3, #0]
 8005112:	68fa      	ldr	r2, [r7, #12]
 8005114:	2340      	movs	r3, #64	@ 0x40
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f002 fa60 	bl	80075dc <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
 800511c:	2300      	movs	r3, #0
}
 800511e:	4618      	mov	r0, r3
 8005120:	3710      	adds	r7, #16
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	20000086 	.word	0x20000086
 800512c:	20000087 	.word	0x20000087

08005130 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b082      	sub	sp, #8
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	460b      	mov	r3, r1
 800513a:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 800513c:	4b37      	ldr	r3, [pc, #220]	@ (800521c <USBD_CUSTOM_HID_DeInit+0xec>)
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	4619      	mov	r1, r3
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f002 f981 	bl	800744a <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 8005148:	4b34      	ldr	r3, [pc, #208]	@ (800521c <USBD_CUSTOM_HID_DeInit+0xec>)
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	f003 020f 	and.w	r2, r3, #15
 8005150:	6879      	ldr	r1, [r7, #4]
 8005152:	4613      	mov	r3, r2
 8005154:	009b      	lsls	r3, r3, #2
 8005156:	4413      	add	r3, r2
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	440b      	add	r3, r1
 800515c:	3324      	adds	r3, #36	@ 0x24
 800515e:	2200      	movs	r2, #0
 8005160:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 8005162:	4b2e      	ldr	r3, [pc, #184]	@ (800521c <USBD_CUSTOM_HID_DeInit+0xec>)
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	f003 020f 	and.w	r2, r3, #15
 800516a:	6879      	ldr	r1, [r7, #4]
 800516c:	4613      	mov	r3, r2
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	4413      	add	r3, r2
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	440b      	add	r3, r1
 8005176:	3326      	adds	r3, #38	@ 0x26
 8005178:	2200      	movs	r2, #0
 800517a:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 800517c:	4b28      	ldr	r3, [pc, #160]	@ (8005220 <USBD_CUSTOM_HID_DeInit+0xf0>)
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	4619      	mov	r1, r3
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f002 f961 	bl	800744a <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 8005188:	4b25      	ldr	r3, [pc, #148]	@ (8005220 <USBD_CUSTOM_HID_DeInit+0xf0>)
 800518a:	781b      	ldrb	r3, [r3, #0]
 800518c:	f003 020f 	and.w	r2, r3, #15
 8005190:	6879      	ldr	r1, [r7, #4]
 8005192:	4613      	mov	r3, r2
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	4413      	add	r3, r2
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	440b      	add	r3, r1
 800519c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80051a0:	2200      	movs	r2, #0
 80051a2:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 80051a4:	4b1e      	ldr	r3, [pc, #120]	@ (8005220 <USBD_CUSTOM_HID_DeInit+0xf0>)
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	f003 020f 	and.w	r2, r3, #15
 80051ac:	6879      	ldr	r1, [r7, #4]
 80051ae:	4613      	mov	r3, r2
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	4413      	add	r3, r2
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	440b      	add	r3, r1
 80051b8:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 80051bc:	2200      	movs	r2, #0
 80051be:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	32b0      	adds	r2, #176	@ 0xb0
 80051ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d01f      	beq.n	8005212 <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	33b0      	adds	r3, #176	@ 0xb0
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	4413      	add	r3, r2
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	32b0      	adds	r2, #176	@ 0xb0
 80051f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051f4:	4618      	mov	r0, r3
 80051f6:	f002 fa21 	bl	800763c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	32b0      	adds	r2, #176	@ 0xb0
 8005204:	2100      	movs	r1, #0
 8005206:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005212:	2300      	movs	r3, #0
}
 8005214:	4618      	mov	r0, r3
 8005216:	3708      	adds	r7, #8
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}
 800521c:	20000086 	.word	0x20000086
 8005220:	20000087 	.word	0x20000087

08005224 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b088      	sub	sp, #32
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	32b0      	adds	r2, #176	@ 0xb0
 8005238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800523c:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800523e:	2300      	movs	r3, #0
 8005240:	83fb      	strh	r3, [r7, #30]
#ifdef USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED
  uint16_t ReportLength = 0U;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */
  uint8_t  *pbuf = NULL;
 8005242:	2300      	movs	r3, #0
 8005244:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8005246:	2300      	movs	r3, #0
 8005248:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 800524a:	2300      	movs	r3, #0
 800524c:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d101      	bne.n	8005258 <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 8005254:	2303      	movs	r3, #3
 8005256:	e102      	b.n	800545e <USBD_CUSTOM_HID_Setup+0x23a>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005260:	2b00      	cmp	r3, #0
 8005262:	d056      	beq.n	8005312 <USBD_CUSTOM_HID_Setup+0xee>
 8005264:	2b20      	cmp	r3, #32
 8005266:	f040 80f2 	bne.w	800544e <USBD_CUSTOM_HID_Setup+0x22a>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	785b      	ldrb	r3, [r3, #1]
 800526e:	3b02      	subs	r3, #2
 8005270:	2b09      	cmp	r3, #9
 8005272:	d846      	bhi.n	8005302 <USBD_CUSTOM_HID_Setup+0xde>
 8005274:	a201      	add	r2, pc, #4	@ (adr r2, 800527c <USBD_CUSTOM_HID_Setup+0x58>)
 8005276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800527a:	bf00      	nop
 800527c:	080052d5 	.word	0x080052d5
 8005280:	080052b3 	.word	0x080052b3
 8005284:	08005303 	.word	0x08005303
 8005288:	08005303 	.word	0x08005303
 800528c:	08005303 	.word	0x08005303
 8005290:	08005303 	.word	0x08005303
 8005294:	08005303 	.word	0x08005303
 8005298:	080052e5 	.word	0x080052e5
 800529c:	080052c3 	.word	0x080052c3
 80052a0:	080052a5 	.word	0x080052a5
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	885b      	ldrh	r3, [r3, #2]
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	461a      	mov	r2, r3
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	641a      	str	r2, [r3, #64]	@ 0x40
          break;
 80052b0:	e02e      	b.n	8005310 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	3340      	adds	r3, #64	@ 0x40
 80052b6:	2201      	movs	r2, #1
 80052b8:	4619      	mov	r1, r3
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f001 fce2 	bl	8006c84 <USBD_CtlSendData>
          break;
 80052c0:	e026      	b.n	8005310 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	885b      	ldrh	r3, [r3, #2]
 80052c6:	0a1b      	lsrs	r3, r3, #8
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	461a      	mov	r2, r3
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	645a      	str	r2, [r3, #68]	@ 0x44
          break;
 80052d2:	e01d      	b.n	8005310 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	3344      	adds	r3, #68	@ 0x44
 80052d8:	2201      	movs	r2, #1
 80052da:	4619      	mov	r1, r3
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f001 fcd1 	bl	8006c84 <USBD_CtlSendData>
          break;
 80052e2:	e015      	b.n	8005310 <USBD_CUSTOM_HID_Setup+0xec>
            ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->CtrlReqComplete(req->bRequest,
                                                                                            req->wLength);
          }
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED
          hhid->IsReportAvailable = 1U;
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	2201      	movs	r2, #1
 80052e8:	64da      	str	r2, [r3, #76]	@ 0x4c
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 80052ea:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	88db      	ldrh	r3, [r3, #6]
 80052f0:	2b40      	cmp	r3, #64	@ 0x40
 80052f2:	bf28      	it	cs
 80052f4:	2340      	movcs	r3, #64	@ 0x40
 80052f6:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 80052f8:	461a      	mov	r2, r3
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f001 fcee 	bl	8006cdc <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
 8005300:	e006      	b.n	8005310 <USBD_CUSTOM_HID_Setup+0xec>
          }
          break;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */

        default:
          USBD_CtlError(pdev, req);
 8005302:	6839      	ldr	r1, [r7, #0]
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f001 fc40 	bl	8006b8a <USBD_CtlError>
          ret = USBD_FAIL;
 800530a:	2303      	movs	r3, #3
 800530c:	75fb      	strb	r3, [r7, #23]
          break;
 800530e:	bf00      	nop
      }
      break;
 8005310:	e0a4      	b.n	800545c <USBD_CUSTOM_HID_Setup+0x238>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	785b      	ldrb	r3, [r3, #1]
 8005316:	2b0b      	cmp	r3, #11
 8005318:	f200 8090 	bhi.w	800543c <USBD_CUSTOM_HID_Setup+0x218>
 800531c:	a201      	add	r2, pc, #4	@ (adr r2, 8005324 <USBD_CUSTOM_HID_Setup+0x100>)
 800531e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005322:	bf00      	nop
 8005324:	08005355 	.word	0x08005355
 8005328:	0800544b 	.word	0x0800544b
 800532c:	0800543d 	.word	0x0800543d
 8005330:	0800543d 	.word	0x0800543d
 8005334:	0800543d 	.word	0x0800543d
 8005338:	0800543d 	.word	0x0800543d
 800533c:	0800537f 	.word	0x0800537f
 8005340:	0800543d 	.word	0x0800543d
 8005344:	0800543d 	.word	0x0800543d
 8005348:	0800543d 	.word	0x0800543d
 800534c:	080053eb 	.word	0x080053eb
 8005350:	08005415 	.word	0x08005415
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800535a:	b2db      	uxtb	r3, r3
 800535c:	2b03      	cmp	r3, #3
 800535e:	d107      	bne.n	8005370 <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005360:	f107 030e 	add.w	r3, r7, #14
 8005364:	2202      	movs	r2, #2
 8005366:	4619      	mov	r1, r3
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f001 fc8b 	bl	8006c84 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800536e:	e06d      	b.n	800544c <USBD_CUSTOM_HID_Setup+0x228>
            USBD_CtlError(pdev, req);
 8005370:	6839      	ldr	r1, [r7, #0]
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f001 fc09 	bl	8006b8a <USBD_CtlError>
            ret = USBD_FAIL;
 8005378:	2303      	movs	r3, #3
 800537a:	75fb      	strb	r3, [r7, #23]
          break;
 800537c:	e066      	b.n	800544c <USBD_CUSTOM_HID_Setup+0x228>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	885b      	ldrh	r3, [r3, #2]
 8005382:	0a1b      	lsrs	r3, r3, #8
 8005384:	b29b      	uxth	r3, r3
 8005386:	2b22      	cmp	r3, #34	@ 0x22
 8005388:	d110      	bne.n	80053ac <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	88db      	ldrh	r3, [r3, #6]
 800538e:	2b1b      	cmp	r3, #27
 8005390:	bf28      	it	cs
 8005392:	231b      	movcs	r3, #27
 8005394:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	33b0      	adds	r3, #176	@ 0xb0
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	4413      	add	r3, r2
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	61bb      	str	r3, [r7, #24]
 80053aa:	e00d      	b.n	80053c8 <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	885b      	ldrh	r3, [r3, #2]
 80053b0:	0a1b      	lsrs	r3, r3, #8
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	2b21      	cmp	r3, #33	@ 0x21
 80053b6:	d107      	bne.n	80053c8 <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 80053b8:	4b2b      	ldr	r3, [pc, #172]	@ (8005468 <USBD_CUSTOM_HID_Setup+0x244>)
 80053ba:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	88db      	ldrh	r3, [r3, #6]
 80053c0:	2b09      	cmp	r3, #9
 80053c2:	bf28      	it	cs
 80053c4:	2309      	movcs	r3, #9
 80053c6:	83fb      	strh	r3, [r7, #30]
            }
          }

          if (pbuf != NULL)
 80053c8:	69bb      	ldr	r3, [r7, #24]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d006      	beq.n	80053dc <USBD_CUSTOM_HID_Setup+0x1b8>
          {
            (void)USBD_CtlSendData(pdev, pbuf, len);
 80053ce:	8bfb      	ldrh	r3, [r7, #30]
 80053d0:	461a      	mov	r2, r3
 80053d2:	69b9      	ldr	r1, [r7, #24]
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f001 fc55 	bl	8006c84 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80053da:	e037      	b.n	800544c <USBD_CUSTOM_HID_Setup+0x228>
            USBD_CtlError(pdev, req);
 80053dc:	6839      	ldr	r1, [r7, #0]
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f001 fbd3 	bl	8006b8a <USBD_CtlError>
            ret = USBD_FAIL;
 80053e4:	2303      	movs	r3, #3
 80053e6:	75fb      	strb	r3, [r7, #23]
          break;
 80053e8:	e030      	b.n	800544c <USBD_CUSTOM_HID_Setup+0x228>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	2b03      	cmp	r3, #3
 80053f4:	d107      	bne.n	8005406 <USBD_CUSTOM_HID_Setup+0x1e2>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	3348      	adds	r3, #72	@ 0x48
 80053fa:	2201      	movs	r2, #1
 80053fc:	4619      	mov	r1, r3
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f001 fc40 	bl	8006c84 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005404:	e022      	b.n	800544c <USBD_CUSTOM_HID_Setup+0x228>
            USBD_CtlError(pdev, req);
 8005406:	6839      	ldr	r1, [r7, #0]
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f001 fbbe 	bl	8006b8a <USBD_CtlError>
            ret = USBD_FAIL;
 800540e:	2303      	movs	r3, #3
 8005410:	75fb      	strb	r3, [r7, #23]
          break;
 8005412:	e01b      	b.n	800544c <USBD_CUSTOM_HID_Setup+0x228>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800541a:	b2db      	uxtb	r3, r3
 800541c:	2b03      	cmp	r3, #3
 800541e:	d106      	bne.n	800542e <USBD_CUSTOM_HID_Setup+0x20a>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	885b      	ldrh	r3, [r3, #2]
 8005424:	b2db      	uxtb	r3, r3
 8005426:	461a      	mov	r2, r3
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	649a      	str	r2, [r3, #72]	@ 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800542c:	e00e      	b.n	800544c <USBD_CUSTOM_HID_Setup+0x228>
            USBD_CtlError(pdev, req);
 800542e:	6839      	ldr	r1, [r7, #0]
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f001 fbaa 	bl	8006b8a <USBD_CtlError>
            ret = USBD_FAIL;
 8005436:	2303      	movs	r3, #3
 8005438:	75fb      	strb	r3, [r7, #23]
          break;
 800543a:	e007      	b.n	800544c <USBD_CUSTOM_HID_Setup+0x228>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800543c:	6839      	ldr	r1, [r7, #0]
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f001 fba3 	bl	8006b8a <USBD_CtlError>
          ret = USBD_FAIL;
 8005444:	2303      	movs	r3, #3
 8005446:	75fb      	strb	r3, [r7, #23]
          break;
 8005448:	e000      	b.n	800544c <USBD_CUSTOM_HID_Setup+0x228>
          break;
 800544a:	bf00      	nop
      }
      break;
 800544c:	e006      	b.n	800545c <USBD_CUSTOM_HID_Setup+0x238>

    default:
      USBD_CtlError(pdev, req);
 800544e:	6839      	ldr	r1, [r7, #0]
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f001 fb9a 	bl	8006b8a <USBD_CtlError>
      ret = USBD_FAIL;
 8005456:	2303      	movs	r3, #3
 8005458:	75fb      	strb	r3, [r7, #23]
      break;
 800545a:	bf00      	nop
  }
  return (uint8_t)ret;
 800545c:	7dfb      	ldrb	r3, [r7, #23]
}
 800545e:	4618      	mov	r0, r3
 8005460:	3720      	adds	r7, #32
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}
 8005466:	bf00      	nop
 8005468:	20000070 	.word	0x20000070

0800546c <USBD_CUSTOM_HID_SendReport>:
{
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b086      	sub	sp, #24
 8005470:	af00      	add	r7, sp, #0
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	4613      	mov	r3, r2
 8005478:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	32b0      	adds	r2, #176	@ 0xb0
 8005484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005488:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d101      	bne.n	8005494 <USBD_CUSTOM_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005490:	2303      	movs	r3, #3
 8005492:	e019      	b.n	80054c8 <USBD_CUSTOM_HID_SendReport+0x5c>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800549a:	b2db      	uxtb	r3, r3
 800549c:	2b03      	cmp	r3, #3
 800549e:	d112      	bne.n	80054c6 <USBD_CUSTOM_HID_SendReport+0x5a>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d10b      	bne.n	80054c2 <USBD_CUSTOM_HID_SendReport+0x56>
    {
      hhid->state = CUSTOM_HID_BUSY;
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	2201      	movs	r2, #1
 80054ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 80054b2:	4b07      	ldr	r3, [pc, #28]	@ (80054d0 <USBD_CUSTOM_HID_SendReport+0x64>)
 80054b4:	7819      	ldrb	r1, [r3, #0]
 80054b6:	88fb      	ldrh	r3, [r7, #6]
 80054b8:	68ba      	ldr	r2, [r7, #8]
 80054ba:	68f8      	ldr	r0, [r7, #12]
 80054bc:	f002 f86d 	bl	800759a <USBD_LL_Transmit>
 80054c0:	e001      	b.n	80054c6 <USBD_CUSTOM_HID_SendReport+0x5a>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e000      	b.n	80054c8 <USBD_CUSTOM_HID_SendReport+0x5c>
    }
  }
  return (uint8_t)USBD_OK;
 80054c6:	2300      	movs	r3, #0
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3718      	adds	r7, #24
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	20000086 	.word	0x20000086

080054d4 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 80054dc:	2181      	movs	r1, #129	@ 0x81
 80054de:	4815      	ldr	r0, [pc, #84]	@ (8005534 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 80054e0:	f000 fd1d 	bl	8005f1e <USBD_GetEpDesc>
 80054e4:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 80054e6:	2101      	movs	r1, #1
 80054e8:	4812      	ldr	r0, [pc, #72]	@ (8005534 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 80054ea:	f000 fd18 	bl	8005f1e <USBD_GetEpDesc>
 80054ee:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d009      	beq.n	800550a <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f042 0202 	orr.w	r2, r2, #2
 80054fe:	711a      	strb	r2, [r3, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2205      	movs	r2, #5
 8005508:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d009      	beq.n	8005524 <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	2200      	movs	r2, #0
 8005514:	f042 0202 	orr.w	r2, r2, #2
 8005518:	711a      	strb	r2, [r3, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	2205      	movs	r2, #5
 8005522:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2229      	movs	r2, #41	@ 0x29
 8005528:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 800552a:	4b02      	ldr	r3, [pc, #8]	@ (8005534 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 800552c:	4618      	mov	r0, r3
 800552e:	3710      	adds	r7, #16
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}
 8005534:	20000044 	.word	0x20000044

08005538 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8005540:	2181      	movs	r1, #129	@ 0x81
 8005542:	4815      	ldr	r0, [pc, #84]	@ (8005598 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8005544:	f000 fceb 	bl	8005f1e <USBD_GetEpDesc>
 8005548:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 800554a:	2101      	movs	r1, #1
 800554c:	4812      	ldr	r0, [pc, #72]	@ (8005598 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 800554e:	f000 fce6 	bl	8005f1e <USBD_GetEpDesc>
 8005552:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d009      	beq.n	800556e <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2200      	movs	r2, #0
 800555e:	f042 0202 	orr.w	r2, r2, #2
 8005562:	711a      	strb	r2, [r3, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2205      	movs	r2, #5
 800556c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d009      	beq.n	8005588 <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	2200      	movs	r2, #0
 8005578:	f042 0202 	orr.w	r2, r2, #2
 800557c:	711a      	strb	r2, [r3, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	2205      	movs	r2, #5
 8005586:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2229      	movs	r2, #41	@ 0x29
 800558c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 800558e:	4b02      	ldr	r3, [pc, #8]	@ (8005598 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 8005590:	4618      	mov	r0, r3
 8005592:	3710      	adds	r7, #16
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}
 8005598:	20000044 	.word	0x20000044

0800559c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b084      	sub	sp, #16
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 80055a4:	2181      	movs	r1, #129	@ 0x81
 80055a6:	4815      	ldr	r0, [pc, #84]	@ (80055fc <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 80055a8:	f000 fcb9 	bl	8005f1e <USBD_GetEpDesc>
 80055ac:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 80055ae:	2101      	movs	r1, #1
 80055b0:	4812      	ldr	r0, [pc, #72]	@ (80055fc <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 80055b2:	f000 fcb4 	bl	8005f1e <USBD_GetEpDesc>
 80055b6:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d009      	beq.n	80055d2 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f042 0202 	orr.w	r2, r2, #2
 80055c6:	711a      	strb	r2, [r3, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2205      	movs	r2, #5
 80055d0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d009      	beq.n	80055ec <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	2200      	movs	r2, #0
 80055dc:	f042 0202 	orr.w	r2, r2, #2
 80055e0:	711a      	strb	r2, [r3, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	2205      	movs	r2, #5
 80055ea:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2229      	movs	r2, #41	@ 0x29
 80055f0:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 80055f2:	4b02      	ldr	r3, [pc, #8]	@ (80055fc <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3710      	adds	r7, #16
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}
 80055fc:	20000044 	.word	0x20000044

08005600 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005600:	b480      	push	{r7}
 8005602:	b083      	sub	sp, #12
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	460b      	mov	r3, r1
 800560a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	32b0      	adds	r2, #176	@ 0xb0
 8005616:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800561a:	2200      	movs	r2, #0
 800561c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return (uint8_t)USBD_OK;
 8005620:	2300      	movs	r3, #0
}
 8005622:	4618      	mov	r0, r3
 8005624:	370c      	adds	r7, #12
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr

0800562e <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800562e:	b580      	push	{r7, lr}
 8005630:	b084      	sub	sp, #16
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
 8005636:	460b      	mov	r3, r1
 8005638:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	32b0      	adds	r2, #176	@ 0xb0
 8005644:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d101      	bne.n	8005650 <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800564c:	2303      	movs	r3, #3
 800564e:	e017      	b.n	8005680 <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	32b0      	adds	r2, #176	@ 0xb0
 800565a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800565e:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	33b0      	adds	r3, #176	@ 0xb0
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	4413      	add	r3, r2
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	68fa      	ldr	r2, [r7, #12]
 8005674:	7810      	ldrb	r0, [r2, #0]
 8005676:	68fa      	ldr	r2, [r7, #12]
 8005678:	7852      	ldrb	r2, [r2, #1]
 800567a:	4611      	mov	r1, r2
 800567c:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 800567e:	2300      	movs	r3, #0
}
 8005680:	4618      	mov	r0, r3
 8005682:	3710      	adds	r7, #16
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}

08005688 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	32b0      	adds	r2, #176	@ 0xb0
 800569a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d101      	bne.n	80056a6 <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80056a2:	2303      	movs	r3, #3
 80056a4:	e00f      	b.n	80056c6 <USBD_CUSTOM_HID_ReceivePacket+0x3e>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	32b0      	adds	r2, #176	@ 0xb0
 80056b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056b4:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 80056b6:	4b06      	ldr	r3, [pc, #24]	@ (80056d0 <USBD_CUSTOM_HID_ReceivePacket+0x48>)
 80056b8:	7819      	ldrb	r1, [r3, #0]
 80056ba:	68fa      	ldr	r2, [r7, #12]
 80056bc:	2340      	movs	r3, #64	@ 0x40
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f001 ff8c 	bl	80075dc <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 80056c4:	2300      	movs	r3, #0
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3710      	adds	r7, #16
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}
 80056ce:	bf00      	nop
 80056d0:	20000087 	.word	0x20000087

080056d4 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b084      	sub	sp, #16
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	32b0      	adds	r2, #176	@ 0xb0
 80056e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056ea:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d101      	bne.n	80056f6 <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80056f2:	2303      	movs	r3, #3
 80056f4:	e016      	b.n	8005724 <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d111      	bne.n	8005722 <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	33b0      	adds	r3, #176	@ 0xb0
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	4413      	add	r3, r2
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	68fa      	ldr	r2, [r7, #12]
 8005712:	7810      	ldrb	r0, [r2, #0]
 8005714:	68fa      	ldr	r2, [r7, #12]
 8005716:	7852      	ldrb	r2, [r2, #1]
 8005718:	4611      	mov	r1, r2
 800571a:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2200      	movs	r2, #0
 8005720:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return (uint8_t)USBD_OK;
 8005722:	2300      	movs	r3, #0
}
 8005724:	4618      	mov	r0, r3
 8005726:	3710      	adds	r7, #16
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}

0800572c <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800572c:	b480      	push	{r7}
 800572e:	b083      	sub	sp, #12
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	220a      	movs	r2, #10
 8005738:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 800573a:	4b03      	ldr	r3, [pc, #12]	@ (8005748 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 800573c:	4618      	mov	r0, r3
 800573e:	370c      	adds	r7, #12
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr
 8005748:	2000007c 	.word	0x2000007c

0800574c <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 800574c:	b480      	push	{r7}
 800574e:	b083      	sub	sp, #12
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d101      	bne.n	8005760 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800575c:	2303      	movs	r3, #3
 800575e:	e009      	b.n	8005774 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	33b0      	adds	r3, #176	@ 0xb0
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	4413      	add	r3, r2
 800576e:	683a      	ldr	r2, [r7, #0]
 8005770:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005772:	2300      	movs	r3, #0
}
 8005774:	4618      	mov	r0, r3
 8005776:	370c      	adds	r7, #12
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b086      	sub	sp, #24
 8005784:	af00      	add	r7, sp, #0
 8005786:	60f8      	str	r0, [r7, #12]
 8005788:	60b9      	str	r1, [r7, #8]
 800578a:	4613      	mov	r3, r2
 800578c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d101      	bne.n	8005798 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005794:	2303      	movs	r3, #3
 8005796:	e01f      	b.n	80057d8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2200      	movs	r2, #0
 800579c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2200      	movs	r2, #0
 80057a4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d003      	beq.n	80057be <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	68ba      	ldr	r2, [r7, #8]
 80057ba:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2201      	movs	r2, #1
 80057c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	79fa      	ldrb	r2, [r7, #7]
 80057ca:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80057cc:	68f8      	ldr	r0, [r7, #12]
 80057ce:	f001 fdaf 	bl	8007330 <USBD_LL_Init>
 80057d2:	4603      	mov	r3, r0
 80057d4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80057d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3718      	adds	r7, #24
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}

080057e0 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b084      	sub	sp, #16
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80057ea:	2300      	movs	r3, #0
 80057ec:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d101      	bne.n	80057f8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80057f4:	2303      	movs	r3, #3
 80057f6:	e025      	b.n	8005844 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	683a      	ldr	r2, [r7, #0]
 80057fc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	32ae      	adds	r2, #174	@ 0xae
 800580a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800580e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005810:	2b00      	cmp	r3, #0
 8005812:	d00f      	beq.n	8005834 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	32ae      	adds	r2, #174	@ 0xae
 800581e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005824:	f107 020e 	add.w	r2, r7, #14
 8005828:	4610      	mov	r0, r2
 800582a:	4798      	blx	r3
 800582c:	4602      	mov	r2, r0
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800583a:	1c5a      	adds	r2, r3, #1
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8005842:	2300      	movs	r3, #0
}
 8005844:	4618      	mov	r0, r3
 8005846:	3710      	adds	r7, #16
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}

0800584c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b082      	sub	sp, #8
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f001 fdb7 	bl	80073c8 <USBD_LL_Start>
 800585a:	4603      	mov	r3, r0
}
 800585c:	4618      	mov	r0, r3
 800585e:	3708      	adds	r7, #8
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}

08005864 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800586c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800586e:	4618      	mov	r0, r3
 8005870:	370c      	adds	r7, #12
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr

0800587a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800587a:	b580      	push	{r7, lr}
 800587c:	b084      	sub	sp, #16
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
 8005882:	460b      	mov	r3, r1
 8005884:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005886:	2300      	movs	r3, #0
 8005888:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005890:	2b00      	cmp	r3, #0
 8005892:	d009      	beq.n	80058a8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	78fa      	ldrb	r2, [r7, #3]
 800589e:	4611      	mov	r1, r2
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	4798      	blx	r3
 80058a4:	4603      	mov	r3, r0
 80058a6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80058a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3710      	adds	r7, #16
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}

080058b2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80058b2:	b580      	push	{r7, lr}
 80058b4:	b084      	sub	sp, #16
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
 80058ba:	460b      	mov	r3, r1
 80058bc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80058be:	2300      	movs	r3, #0
 80058c0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	78fa      	ldrb	r2, [r7, #3]
 80058cc:	4611      	mov	r1, r2
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	4798      	blx	r3
 80058d2:	4603      	mov	r3, r0
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d001      	beq.n	80058dc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80058d8:	2303      	movs	r3, #3
 80058da:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80058dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3710      	adds	r7, #16
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}

080058e6 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80058e6:	b580      	push	{r7, lr}
 80058e8:	b084      	sub	sp, #16
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
 80058ee:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80058f6:	6839      	ldr	r1, [r7, #0]
 80058f8:	4618      	mov	r0, r3
 80058fa:	f001 f90c 	bl	8006b16 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2201      	movs	r2, #1
 8005902:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800590c:	461a      	mov	r2, r3
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800591a:	f003 031f 	and.w	r3, r3, #31
 800591e:	2b02      	cmp	r3, #2
 8005920:	d01a      	beq.n	8005958 <USBD_LL_SetupStage+0x72>
 8005922:	2b02      	cmp	r3, #2
 8005924:	d822      	bhi.n	800596c <USBD_LL_SetupStage+0x86>
 8005926:	2b00      	cmp	r3, #0
 8005928:	d002      	beq.n	8005930 <USBD_LL_SetupStage+0x4a>
 800592a:	2b01      	cmp	r3, #1
 800592c:	d00a      	beq.n	8005944 <USBD_LL_SetupStage+0x5e>
 800592e:	e01d      	b.n	800596c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005936:	4619      	mov	r1, r3
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f000 fb63 	bl	8006004 <USBD_StdDevReq>
 800593e:	4603      	mov	r3, r0
 8005940:	73fb      	strb	r3, [r7, #15]
      break;
 8005942:	e020      	b.n	8005986 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800594a:	4619      	mov	r1, r3
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f000 fbcb 	bl	80060e8 <USBD_StdItfReq>
 8005952:	4603      	mov	r3, r0
 8005954:	73fb      	strb	r3, [r7, #15]
      break;
 8005956:	e016      	b.n	8005986 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800595e:	4619      	mov	r1, r3
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f000 fc2d 	bl	80061c0 <USBD_StdEPReq>
 8005966:	4603      	mov	r3, r0
 8005968:	73fb      	strb	r3, [r7, #15]
      break;
 800596a:	e00c      	b.n	8005986 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005972:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005976:	b2db      	uxtb	r3, r3
 8005978:	4619      	mov	r1, r3
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f001 fd84 	bl	8007488 <USBD_LL_StallEP>
 8005980:	4603      	mov	r3, r0
 8005982:	73fb      	strb	r3, [r7, #15]
      break;
 8005984:	bf00      	nop
  }

  return ret;
 8005986:	7bfb      	ldrb	r3, [r7, #15]
}
 8005988:	4618      	mov	r0, r3
 800598a:	3710      	adds	r7, #16
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}

08005990 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b086      	sub	sp, #24
 8005994:	af00      	add	r7, sp, #0
 8005996:	60f8      	str	r0, [r7, #12]
 8005998:	460b      	mov	r3, r1
 800599a:	607a      	str	r2, [r7, #4]
 800599c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800599e:	2300      	movs	r3, #0
 80059a0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80059a2:	7afb      	ldrb	r3, [r7, #11]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d16e      	bne.n	8005a86 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80059ae:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80059b6:	2b03      	cmp	r3, #3
 80059b8:	f040 8098 	bne.w	8005aec <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	689a      	ldr	r2, [r3, #8]
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d913      	bls.n	80059f0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	689a      	ldr	r2, [r3, #8]
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	1ad2      	subs	r2, r2, r3
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	68da      	ldr	r2, [r3, #12]
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	4293      	cmp	r3, r2
 80059e0:	bf28      	it	cs
 80059e2:	4613      	movcs	r3, r2
 80059e4:	461a      	mov	r2, r3
 80059e6:	6879      	ldr	r1, [r7, #4]
 80059e8:	68f8      	ldr	r0, [r7, #12]
 80059ea:	f001 f994 	bl	8006d16 <USBD_CtlContinueRx>
 80059ee:	e07d      	b.n	8005aec <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80059f6:	f003 031f 	and.w	r3, r3, #31
 80059fa:	2b02      	cmp	r3, #2
 80059fc:	d014      	beq.n	8005a28 <USBD_LL_DataOutStage+0x98>
 80059fe:	2b02      	cmp	r3, #2
 8005a00:	d81d      	bhi.n	8005a3e <USBD_LL_DataOutStage+0xae>
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d002      	beq.n	8005a0c <USBD_LL_DataOutStage+0x7c>
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d003      	beq.n	8005a12 <USBD_LL_DataOutStage+0x82>
 8005a0a:	e018      	b.n	8005a3e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	75bb      	strb	r3, [r7, #22]
            break;
 8005a10:	e018      	b.n	8005a44 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	4619      	mov	r1, r3
 8005a1c:	68f8      	ldr	r0, [r7, #12]
 8005a1e:	f000 fa64 	bl	8005eea <USBD_CoreFindIF>
 8005a22:	4603      	mov	r3, r0
 8005a24:	75bb      	strb	r3, [r7, #22]
            break;
 8005a26:	e00d      	b.n	8005a44 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	4619      	mov	r1, r3
 8005a32:	68f8      	ldr	r0, [r7, #12]
 8005a34:	f000 fa66 	bl	8005f04 <USBD_CoreFindEP>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	75bb      	strb	r3, [r7, #22]
            break;
 8005a3c:	e002      	b.n	8005a44 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	75bb      	strb	r3, [r7, #22]
            break;
 8005a42:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005a44:	7dbb      	ldrb	r3, [r7, #22]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d119      	bne.n	8005a7e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	2b03      	cmp	r3, #3
 8005a54:	d113      	bne.n	8005a7e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005a56:	7dba      	ldrb	r2, [r7, #22]
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	32ae      	adds	r2, #174	@ 0xae
 8005a5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d00b      	beq.n	8005a7e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005a66:	7dba      	ldrb	r2, [r7, #22]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005a6e:	7dba      	ldrb	r2, [r7, #22]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	32ae      	adds	r2, #174	@ 0xae
 8005a74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a78:	691b      	ldr	r3, [r3, #16]
 8005a7a:	68f8      	ldr	r0, [r7, #12]
 8005a7c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005a7e:	68f8      	ldr	r0, [r7, #12]
 8005a80:	f001 f95a 	bl	8006d38 <USBD_CtlSendStatus>
 8005a84:	e032      	b.n	8005aec <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005a86:	7afb      	ldrb	r3, [r7, #11]
 8005a88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	4619      	mov	r1, r3
 8005a90:	68f8      	ldr	r0, [r7, #12]
 8005a92:	f000 fa37 	bl	8005f04 <USBD_CoreFindEP>
 8005a96:	4603      	mov	r3, r0
 8005a98:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005a9a:	7dbb      	ldrb	r3, [r7, #22]
 8005a9c:	2bff      	cmp	r3, #255	@ 0xff
 8005a9e:	d025      	beq.n	8005aec <USBD_LL_DataOutStage+0x15c>
 8005aa0:	7dbb      	ldrb	r3, [r7, #22]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d122      	bne.n	8005aec <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	2b03      	cmp	r3, #3
 8005ab0:	d117      	bne.n	8005ae2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005ab2:	7dba      	ldrb	r2, [r7, #22]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	32ae      	adds	r2, #174	@ 0xae
 8005ab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005abc:	699b      	ldr	r3, [r3, #24]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d00f      	beq.n	8005ae2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005ac2:	7dba      	ldrb	r2, [r7, #22]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005aca:	7dba      	ldrb	r2, [r7, #22]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	32ae      	adds	r2, #174	@ 0xae
 8005ad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ad4:	699b      	ldr	r3, [r3, #24]
 8005ad6:	7afa      	ldrb	r2, [r7, #11]
 8005ad8:	4611      	mov	r1, r2
 8005ada:	68f8      	ldr	r0, [r7, #12]
 8005adc:	4798      	blx	r3
 8005ade:	4603      	mov	r3, r0
 8005ae0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005ae2:	7dfb      	ldrb	r3, [r7, #23]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d001      	beq.n	8005aec <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005ae8:	7dfb      	ldrb	r3, [r7, #23]
 8005aea:	e000      	b.n	8005aee <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3718      	adds	r7, #24
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}

08005af6 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005af6:	b580      	push	{r7, lr}
 8005af8:	b086      	sub	sp, #24
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	60f8      	str	r0, [r7, #12]
 8005afe:	460b      	mov	r3, r1
 8005b00:	607a      	str	r2, [r7, #4]
 8005b02:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005b04:	7afb      	ldrb	r3, [r7, #11]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d16f      	bne.n	8005bea <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	3314      	adds	r3, #20
 8005b0e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005b16:	2b02      	cmp	r3, #2
 8005b18:	d15a      	bne.n	8005bd0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	689a      	ldr	r2, [r3, #8]
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	68db      	ldr	r3, [r3, #12]
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d914      	bls.n	8005b50 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	689a      	ldr	r2, [r3, #8]
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	1ad2      	subs	r2, r2, r3
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	461a      	mov	r2, r3
 8005b3a:	6879      	ldr	r1, [r7, #4]
 8005b3c:	68f8      	ldr	r0, [r7, #12]
 8005b3e:	f001 f8bc 	bl	8006cba <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005b42:	2300      	movs	r3, #0
 8005b44:	2200      	movs	r2, #0
 8005b46:	2100      	movs	r1, #0
 8005b48:	68f8      	ldr	r0, [r7, #12]
 8005b4a:	f001 fd47 	bl	80075dc <USBD_LL_PrepareReceive>
 8005b4e:	e03f      	b.n	8005bd0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	68da      	ldr	r2, [r3, #12]
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d11c      	bne.n	8005b96 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	685a      	ldr	r2, [r3, #4]
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d316      	bcc.n	8005b96 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	685a      	ldr	r2, [r3, #4]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d20f      	bcs.n	8005b96 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005b76:	2200      	movs	r2, #0
 8005b78:	2100      	movs	r1, #0
 8005b7a:	68f8      	ldr	r0, [r7, #12]
 8005b7c:	f001 f89d 	bl	8006cba <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2200      	movs	r2, #0
 8005b84:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005b88:	2300      	movs	r3, #0
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	2100      	movs	r1, #0
 8005b8e:	68f8      	ldr	r0, [r7, #12]
 8005b90:	f001 fd24 	bl	80075dc <USBD_LL_PrepareReceive>
 8005b94:	e01c      	b.n	8005bd0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	2b03      	cmp	r3, #3
 8005ba0:	d10f      	bne.n	8005bc2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d009      	beq.n	8005bc2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005bbc:	68db      	ldr	r3, [r3, #12]
 8005bbe:	68f8      	ldr	r0, [r7, #12]
 8005bc0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005bc2:	2180      	movs	r1, #128	@ 0x80
 8005bc4:	68f8      	ldr	r0, [r7, #12]
 8005bc6:	f001 fc5f 	bl	8007488 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005bca:	68f8      	ldr	r0, [r7, #12]
 8005bcc:	f001 f8c7 	bl	8006d5e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d03a      	beq.n	8005c50 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005bda:	68f8      	ldr	r0, [r7, #12]
 8005bdc:	f7ff fe42 	bl	8005864 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2200      	movs	r2, #0
 8005be4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8005be8:	e032      	b.n	8005c50 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005bea:	7afb      	ldrb	r3, [r7, #11]
 8005bec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	4619      	mov	r1, r3
 8005bf4:	68f8      	ldr	r0, [r7, #12]
 8005bf6:	f000 f985 	bl	8005f04 <USBD_CoreFindEP>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005bfe:	7dfb      	ldrb	r3, [r7, #23]
 8005c00:	2bff      	cmp	r3, #255	@ 0xff
 8005c02:	d025      	beq.n	8005c50 <USBD_LL_DataInStage+0x15a>
 8005c04:	7dfb      	ldrb	r3, [r7, #23]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d122      	bne.n	8005c50 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	2b03      	cmp	r3, #3
 8005c14:	d11c      	bne.n	8005c50 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005c16:	7dfa      	ldrb	r2, [r7, #23]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	32ae      	adds	r2, #174	@ 0xae
 8005c1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c20:	695b      	ldr	r3, [r3, #20]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d014      	beq.n	8005c50 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005c26:	7dfa      	ldrb	r2, [r7, #23]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005c2e:	7dfa      	ldrb	r2, [r7, #23]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	32ae      	adds	r2, #174	@ 0xae
 8005c34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c38:	695b      	ldr	r3, [r3, #20]
 8005c3a:	7afa      	ldrb	r2, [r7, #11]
 8005c3c:	4611      	mov	r1, r2
 8005c3e:	68f8      	ldr	r0, [r7, #12]
 8005c40:	4798      	blx	r3
 8005c42:	4603      	mov	r3, r0
 8005c44:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005c46:	7dbb      	ldrb	r3, [r7, #22]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d001      	beq.n	8005c50 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005c4c:	7dbb      	ldrb	r3, [r7, #22]
 8005c4e:	e000      	b.n	8005c52 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005c50:	2300      	movs	r3, #0
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3718      	adds	r7, #24
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}

08005c5a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005c5a:	b580      	push	{r7, lr}
 8005c5c:	b084      	sub	sp, #16
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c62:	2300      	movs	r3, #0
 8005c64:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2201      	movs	r2, #1
 8005c6a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2200      	movs	r2, #0
 8005c72:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d014      	beq.n	8005cc0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d00e      	beq.n	8005cc0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	6852      	ldr	r2, [r2, #4]
 8005cae:	b2d2      	uxtb	r2, r2
 8005cb0:	4611      	mov	r1, r2
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	4798      	blx	r3
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d001      	beq.n	8005cc0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005cbc:	2303      	movs	r3, #3
 8005cbe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005cc0:	2340      	movs	r3, #64	@ 0x40
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	2100      	movs	r1, #0
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f001 fb99 	bl	80073fe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2240      	movs	r2, #64	@ 0x40
 8005cd8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005cdc:	2340      	movs	r3, #64	@ 0x40
 8005cde:	2200      	movs	r2, #0
 8005ce0:	2180      	movs	r1, #128	@ 0x80
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f001 fb8b 	bl	80073fe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2201      	movs	r2, #1
 8005cec:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2240      	movs	r2, #64	@ 0x40
 8005cf2:	621a      	str	r2, [r3, #32]

  return ret;
 8005cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3710      	adds	r7, #16
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}

08005cfe <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005cfe:	b480      	push	{r7}
 8005d00:	b083      	sub	sp, #12
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	6078      	str	r0, [r7, #4]
 8005d06:	460b      	mov	r3, r1
 8005d08:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	78fa      	ldrb	r2, [r7, #3]
 8005d0e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005d10:	2300      	movs	r3, #0
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	370c      	adds	r7, #12
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr

08005d1e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005d1e:	b480      	push	{r7}
 8005d20:	b083      	sub	sp, #12
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	2b04      	cmp	r3, #4
 8005d30:	d006      	beq.n	8005d40 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005d38:	b2da      	uxtb	r2, r3
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2204      	movs	r2, #4
 8005d44:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8005d48:	2300      	movs	r3, #0
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	370c      	adds	r7, #12
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr

08005d56 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005d56:	b480      	push	{r7}
 8005d58:	b083      	sub	sp, #12
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	2b04      	cmp	r3, #4
 8005d68:	d106      	bne.n	8005d78 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8005d70:	b2da      	uxtb	r2, r3
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8005d78:	2300      	movs	r3, #0
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	370c      	adds	r7, #12
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr

08005d86 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005d86:	b580      	push	{r7, lr}
 8005d88:	b082      	sub	sp, #8
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	2b03      	cmp	r3, #3
 8005d98:	d110      	bne.n	8005dbc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d00b      	beq.n	8005dbc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005daa:	69db      	ldr	r3, [r3, #28]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d005      	beq.n	8005dbc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005db6:	69db      	ldr	r3, [r3, #28]
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005dbc:	2300      	movs	r3, #0
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3708      	adds	r7, #8
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}

08005dc6 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005dc6:	b580      	push	{r7, lr}
 8005dc8:	b082      	sub	sp, #8
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
 8005dce:	460b      	mov	r3, r1
 8005dd0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	32ae      	adds	r2, #174	@ 0xae
 8005ddc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d101      	bne.n	8005de8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005de4:	2303      	movs	r3, #3
 8005de6:	e01c      	b.n	8005e22 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005dee:	b2db      	uxtb	r3, r3
 8005df0:	2b03      	cmp	r3, #3
 8005df2:	d115      	bne.n	8005e20 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	32ae      	adds	r2, #174	@ 0xae
 8005dfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e02:	6a1b      	ldr	r3, [r3, #32]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d00b      	beq.n	8005e20 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	32ae      	adds	r2, #174	@ 0xae
 8005e12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e16:	6a1b      	ldr	r3, [r3, #32]
 8005e18:	78fa      	ldrb	r2, [r7, #3]
 8005e1a:	4611      	mov	r1, r2
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3708      	adds	r7, #8
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}

08005e2a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005e2a:	b580      	push	{r7, lr}
 8005e2c:	b082      	sub	sp, #8
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
 8005e32:	460b      	mov	r3, r1
 8005e34:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	32ae      	adds	r2, #174	@ 0xae
 8005e40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d101      	bne.n	8005e4c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005e48:	2303      	movs	r3, #3
 8005e4a:	e01c      	b.n	8005e86 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	2b03      	cmp	r3, #3
 8005e56:	d115      	bne.n	8005e84 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	32ae      	adds	r2, #174	@ 0xae
 8005e62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d00b      	beq.n	8005e84 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	32ae      	adds	r2, #174	@ 0xae
 8005e76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e7c:	78fa      	ldrb	r2, [r7, #3]
 8005e7e:	4611      	mov	r1, r2
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3708      	adds	r7, #8
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}

08005e8e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005e8e:	b480      	push	{r7}
 8005e90:	b083      	sub	sp, #12
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005e96:	2300      	movs	r3, #0
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	370c      	adds	r7, #12
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr

08005ea4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b084      	sub	sp, #16
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005eac:	2300      	movs	r3, #0
 8005eae:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d00e      	beq.n	8005ee0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	6852      	ldr	r2, [r2, #4]
 8005ece:	b2d2      	uxtb	r2, r2
 8005ed0:	4611      	mov	r1, r2
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	4798      	blx	r3
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d001      	beq.n	8005ee0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005edc:	2303      	movs	r3, #3
 8005ede:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3710      	adds	r7, #16
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}

08005eea <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005eea:	b480      	push	{r7}
 8005eec:	b083      	sub	sp, #12
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	6078      	str	r0, [r7, #4]
 8005ef2:	460b      	mov	r3, r1
 8005ef4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005ef6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	370c      	adds	r7, #12
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr

08005f04 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	460b      	mov	r3, r1
 8005f0e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005f10:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	370c      	adds	r7, #12
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr

08005f1e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005f1e:	b580      	push	{r7, lr}
 8005f20:	b086      	sub	sp, #24
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	6078      	str	r0, [r7, #4]
 8005f26:	460b      	mov	r3, r1
 8005f28:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005f32:	2300      	movs	r3, #0
 8005f34:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	885b      	ldrh	r3, [r3, #2]
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	7812      	ldrb	r2, [r2, #0]
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d91f      	bls.n	8005f84 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005f4a:	e013      	b.n	8005f74 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005f4c:	f107 030a 	add.w	r3, r7, #10
 8005f50:	4619      	mov	r1, r3
 8005f52:	6978      	ldr	r0, [r7, #20]
 8005f54:	f000 f81b 	bl	8005f8e <USBD_GetNextDesc>
 8005f58:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	785b      	ldrb	r3, [r3, #1]
 8005f5e:	2b05      	cmp	r3, #5
 8005f60:	d108      	bne.n	8005f74 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	789b      	ldrb	r3, [r3, #2]
 8005f6a:	78fa      	ldrb	r2, [r7, #3]
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d008      	beq.n	8005f82 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005f70:	2300      	movs	r3, #0
 8005f72:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	885b      	ldrh	r3, [r3, #2]
 8005f78:	b29a      	uxth	r2, r3
 8005f7a:	897b      	ldrh	r3, [r7, #10]
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d8e5      	bhi.n	8005f4c <USBD_GetEpDesc+0x2e>
 8005f80:	e000      	b.n	8005f84 <USBD_GetEpDesc+0x66>
          break;
 8005f82:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005f84:	693b      	ldr	r3, [r7, #16]
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3718      	adds	r7, #24
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}

08005f8e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005f8e:	b480      	push	{r7}
 8005f90:	b085      	sub	sp, #20
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
 8005f96:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	881b      	ldrh	r3, [r3, #0]
 8005fa0:	68fa      	ldr	r2, [r7, #12]
 8005fa2:	7812      	ldrb	r2, [r2, #0]
 8005fa4:	4413      	add	r3, r2
 8005fa6:	b29a      	uxth	r2, r3
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4413      	add	r3, r2
 8005fb6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3714      	adds	r7, #20
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr

08005fc6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005fc6:	b480      	push	{r7}
 8005fc8:	b087      	sub	sp, #28
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	3301      	adds	r3, #1
 8005fdc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005fe4:	8a3b      	ldrh	r3, [r7, #16]
 8005fe6:	021b      	lsls	r3, r3, #8
 8005fe8:	b21a      	sxth	r2, r3
 8005fea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	b21b      	sxth	r3, r3
 8005ff2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005ff4:	89fb      	ldrh	r3, [r7, #14]
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	371c      	adds	r7, #28
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr
	...

08006004 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800600e:	2300      	movs	r3, #0
 8006010:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800601a:	2b40      	cmp	r3, #64	@ 0x40
 800601c:	d005      	beq.n	800602a <USBD_StdDevReq+0x26>
 800601e:	2b40      	cmp	r3, #64	@ 0x40
 8006020:	d857      	bhi.n	80060d2 <USBD_StdDevReq+0xce>
 8006022:	2b00      	cmp	r3, #0
 8006024:	d00f      	beq.n	8006046 <USBD_StdDevReq+0x42>
 8006026:	2b20      	cmp	r3, #32
 8006028:	d153      	bne.n	80060d2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	32ae      	adds	r2, #174	@ 0xae
 8006034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	6839      	ldr	r1, [r7, #0]
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	4798      	blx	r3
 8006040:	4603      	mov	r3, r0
 8006042:	73fb      	strb	r3, [r7, #15]
      break;
 8006044:	e04a      	b.n	80060dc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	785b      	ldrb	r3, [r3, #1]
 800604a:	2b09      	cmp	r3, #9
 800604c:	d83b      	bhi.n	80060c6 <USBD_StdDevReq+0xc2>
 800604e:	a201      	add	r2, pc, #4	@ (adr r2, 8006054 <USBD_StdDevReq+0x50>)
 8006050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006054:	080060a9 	.word	0x080060a9
 8006058:	080060bd 	.word	0x080060bd
 800605c:	080060c7 	.word	0x080060c7
 8006060:	080060b3 	.word	0x080060b3
 8006064:	080060c7 	.word	0x080060c7
 8006068:	08006087 	.word	0x08006087
 800606c:	0800607d 	.word	0x0800607d
 8006070:	080060c7 	.word	0x080060c7
 8006074:	0800609f 	.word	0x0800609f
 8006078:	08006091 	.word	0x08006091
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800607c:	6839      	ldr	r1, [r7, #0]
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 fa3c 	bl	80064fc <USBD_GetDescriptor>
          break;
 8006084:	e024      	b.n	80060d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006086:	6839      	ldr	r1, [r7, #0]
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f000 fba1 	bl	80067d0 <USBD_SetAddress>
          break;
 800608e:	e01f      	b.n	80060d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006090:	6839      	ldr	r1, [r7, #0]
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 fbe0 	bl	8006858 <USBD_SetConfig>
 8006098:	4603      	mov	r3, r0
 800609a:	73fb      	strb	r3, [r7, #15]
          break;
 800609c:	e018      	b.n	80060d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800609e:	6839      	ldr	r1, [r7, #0]
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f000 fc83 	bl	80069ac <USBD_GetConfig>
          break;
 80060a6:	e013      	b.n	80060d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80060a8:	6839      	ldr	r1, [r7, #0]
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f000 fcb4 	bl	8006a18 <USBD_GetStatus>
          break;
 80060b0:	e00e      	b.n	80060d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80060b2:	6839      	ldr	r1, [r7, #0]
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f000 fce3 	bl	8006a80 <USBD_SetFeature>
          break;
 80060ba:	e009      	b.n	80060d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80060bc:	6839      	ldr	r1, [r7, #0]
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f000 fd07 	bl	8006ad2 <USBD_ClrFeature>
          break;
 80060c4:	e004      	b.n	80060d0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80060c6:	6839      	ldr	r1, [r7, #0]
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f000 fd5e 	bl	8006b8a <USBD_CtlError>
          break;
 80060ce:	bf00      	nop
      }
      break;
 80060d0:	e004      	b.n	80060dc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80060d2:	6839      	ldr	r1, [r7, #0]
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f000 fd58 	bl	8006b8a <USBD_CtlError>
      break;
 80060da:	bf00      	nop
  }

  return ret;
 80060dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3710      	adds	r7, #16
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}
 80060e6:	bf00      	nop

080060e8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b084      	sub	sp, #16
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80060f2:	2300      	movs	r3, #0
 80060f4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80060fe:	2b40      	cmp	r3, #64	@ 0x40
 8006100:	d005      	beq.n	800610e <USBD_StdItfReq+0x26>
 8006102:	2b40      	cmp	r3, #64	@ 0x40
 8006104:	d852      	bhi.n	80061ac <USBD_StdItfReq+0xc4>
 8006106:	2b00      	cmp	r3, #0
 8006108:	d001      	beq.n	800610e <USBD_StdItfReq+0x26>
 800610a:	2b20      	cmp	r3, #32
 800610c:	d14e      	bne.n	80061ac <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006114:	b2db      	uxtb	r3, r3
 8006116:	3b01      	subs	r3, #1
 8006118:	2b02      	cmp	r3, #2
 800611a:	d840      	bhi.n	800619e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	889b      	ldrh	r3, [r3, #4]
 8006120:	b2db      	uxtb	r3, r3
 8006122:	2b01      	cmp	r3, #1
 8006124:	d836      	bhi.n	8006194 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	889b      	ldrh	r3, [r3, #4]
 800612a:	b2db      	uxtb	r3, r3
 800612c:	4619      	mov	r1, r3
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f7ff fedb 	bl	8005eea <USBD_CoreFindIF>
 8006134:	4603      	mov	r3, r0
 8006136:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006138:	7bbb      	ldrb	r3, [r7, #14]
 800613a:	2bff      	cmp	r3, #255	@ 0xff
 800613c:	d01d      	beq.n	800617a <USBD_StdItfReq+0x92>
 800613e:	7bbb      	ldrb	r3, [r7, #14]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d11a      	bne.n	800617a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006144:	7bba      	ldrb	r2, [r7, #14]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	32ae      	adds	r2, #174	@ 0xae
 800614a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d00f      	beq.n	8006174 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006154:	7bba      	ldrb	r2, [r7, #14]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800615c:	7bba      	ldrb	r2, [r7, #14]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	32ae      	adds	r2, #174	@ 0xae
 8006162:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	6839      	ldr	r1, [r7, #0]
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	4798      	blx	r3
 800616e:	4603      	mov	r3, r0
 8006170:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006172:	e004      	b.n	800617e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006174:	2303      	movs	r3, #3
 8006176:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006178:	e001      	b.n	800617e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800617a:	2303      	movs	r3, #3
 800617c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	88db      	ldrh	r3, [r3, #6]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d110      	bne.n	80061a8 <USBD_StdItfReq+0xc0>
 8006186:	7bfb      	ldrb	r3, [r7, #15]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d10d      	bne.n	80061a8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f000 fdd3 	bl	8006d38 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006192:	e009      	b.n	80061a8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006194:	6839      	ldr	r1, [r7, #0]
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 fcf7 	bl	8006b8a <USBD_CtlError>
          break;
 800619c:	e004      	b.n	80061a8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800619e:	6839      	ldr	r1, [r7, #0]
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f000 fcf2 	bl	8006b8a <USBD_CtlError>
          break;
 80061a6:	e000      	b.n	80061aa <USBD_StdItfReq+0xc2>
          break;
 80061a8:	bf00      	nop
      }
      break;
 80061aa:	e004      	b.n	80061b6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80061ac:	6839      	ldr	r1, [r7, #0]
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 fceb 	bl	8006b8a <USBD_CtlError>
      break;
 80061b4:	bf00      	nop
  }

  return ret;
 80061b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3710      	adds	r7, #16
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}

080061c0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b084      	sub	sp, #16
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80061ca:	2300      	movs	r3, #0
 80061cc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	889b      	ldrh	r3, [r3, #4]
 80061d2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80061dc:	2b40      	cmp	r3, #64	@ 0x40
 80061de:	d007      	beq.n	80061f0 <USBD_StdEPReq+0x30>
 80061e0:	2b40      	cmp	r3, #64	@ 0x40
 80061e2:	f200 817f 	bhi.w	80064e4 <USBD_StdEPReq+0x324>
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d02a      	beq.n	8006240 <USBD_StdEPReq+0x80>
 80061ea:	2b20      	cmp	r3, #32
 80061ec:	f040 817a 	bne.w	80064e4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80061f0:	7bbb      	ldrb	r3, [r7, #14]
 80061f2:	4619      	mov	r1, r3
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f7ff fe85 	bl	8005f04 <USBD_CoreFindEP>
 80061fa:	4603      	mov	r3, r0
 80061fc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80061fe:	7b7b      	ldrb	r3, [r7, #13]
 8006200:	2bff      	cmp	r3, #255	@ 0xff
 8006202:	f000 8174 	beq.w	80064ee <USBD_StdEPReq+0x32e>
 8006206:	7b7b      	ldrb	r3, [r7, #13]
 8006208:	2b00      	cmp	r3, #0
 800620a:	f040 8170 	bne.w	80064ee <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800620e:	7b7a      	ldrb	r2, [r7, #13]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006216:	7b7a      	ldrb	r2, [r7, #13]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	32ae      	adds	r2, #174	@ 0xae
 800621c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	2b00      	cmp	r3, #0
 8006224:	f000 8163 	beq.w	80064ee <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006228:	7b7a      	ldrb	r2, [r7, #13]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	32ae      	adds	r2, #174	@ 0xae
 800622e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	6839      	ldr	r1, [r7, #0]
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	4798      	blx	r3
 800623a:	4603      	mov	r3, r0
 800623c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800623e:	e156      	b.n	80064ee <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	785b      	ldrb	r3, [r3, #1]
 8006244:	2b03      	cmp	r3, #3
 8006246:	d008      	beq.n	800625a <USBD_StdEPReq+0x9a>
 8006248:	2b03      	cmp	r3, #3
 800624a:	f300 8145 	bgt.w	80064d8 <USBD_StdEPReq+0x318>
 800624e:	2b00      	cmp	r3, #0
 8006250:	f000 809b 	beq.w	800638a <USBD_StdEPReq+0x1ca>
 8006254:	2b01      	cmp	r3, #1
 8006256:	d03c      	beq.n	80062d2 <USBD_StdEPReq+0x112>
 8006258:	e13e      	b.n	80064d8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006260:	b2db      	uxtb	r3, r3
 8006262:	2b02      	cmp	r3, #2
 8006264:	d002      	beq.n	800626c <USBD_StdEPReq+0xac>
 8006266:	2b03      	cmp	r3, #3
 8006268:	d016      	beq.n	8006298 <USBD_StdEPReq+0xd8>
 800626a:	e02c      	b.n	80062c6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800626c:	7bbb      	ldrb	r3, [r7, #14]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d00d      	beq.n	800628e <USBD_StdEPReq+0xce>
 8006272:	7bbb      	ldrb	r3, [r7, #14]
 8006274:	2b80      	cmp	r3, #128	@ 0x80
 8006276:	d00a      	beq.n	800628e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006278:	7bbb      	ldrb	r3, [r7, #14]
 800627a:	4619      	mov	r1, r3
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f001 f903 	bl	8007488 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006282:	2180      	movs	r1, #128	@ 0x80
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f001 f8ff 	bl	8007488 <USBD_LL_StallEP>
 800628a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800628c:	e020      	b.n	80062d0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800628e:	6839      	ldr	r1, [r7, #0]
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f000 fc7a 	bl	8006b8a <USBD_CtlError>
              break;
 8006296:	e01b      	b.n	80062d0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	885b      	ldrh	r3, [r3, #2]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d10e      	bne.n	80062be <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80062a0:	7bbb      	ldrb	r3, [r7, #14]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d00b      	beq.n	80062be <USBD_StdEPReq+0xfe>
 80062a6:	7bbb      	ldrb	r3, [r7, #14]
 80062a8:	2b80      	cmp	r3, #128	@ 0x80
 80062aa:	d008      	beq.n	80062be <USBD_StdEPReq+0xfe>
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	88db      	ldrh	r3, [r3, #6]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d104      	bne.n	80062be <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80062b4:	7bbb      	ldrb	r3, [r7, #14]
 80062b6:	4619      	mov	r1, r3
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f001 f8e5 	bl	8007488 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f000 fd3a 	bl	8006d38 <USBD_CtlSendStatus>

              break;
 80062c4:	e004      	b.n	80062d0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80062c6:	6839      	ldr	r1, [r7, #0]
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f000 fc5e 	bl	8006b8a <USBD_CtlError>
              break;
 80062ce:	bf00      	nop
          }
          break;
 80062d0:	e107      	b.n	80064e2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	2b02      	cmp	r3, #2
 80062dc:	d002      	beq.n	80062e4 <USBD_StdEPReq+0x124>
 80062de:	2b03      	cmp	r3, #3
 80062e0:	d016      	beq.n	8006310 <USBD_StdEPReq+0x150>
 80062e2:	e04b      	b.n	800637c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80062e4:	7bbb      	ldrb	r3, [r7, #14]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d00d      	beq.n	8006306 <USBD_StdEPReq+0x146>
 80062ea:	7bbb      	ldrb	r3, [r7, #14]
 80062ec:	2b80      	cmp	r3, #128	@ 0x80
 80062ee:	d00a      	beq.n	8006306 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80062f0:	7bbb      	ldrb	r3, [r7, #14]
 80062f2:	4619      	mov	r1, r3
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f001 f8c7 	bl	8007488 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80062fa:	2180      	movs	r1, #128	@ 0x80
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f001 f8c3 	bl	8007488 <USBD_LL_StallEP>
 8006302:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006304:	e040      	b.n	8006388 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006306:	6839      	ldr	r1, [r7, #0]
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f000 fc3e 	bl	8006b8a <USBD_CtlError>
              break;
 800630e:	e03b      	b.n	8006388 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	885b      	ldrh	r3, [r3, #2]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d136      	bne.n	8006386 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006318:	7bbb      	ldrb	r3, [r7, #14]
 800631a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800631e:	2b00      	cmp	r3, #0
 8006320:	d004      	beq.n	800632c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006322:	7bbb      	ldrb	r3, [r7, #14]
 8006324:	4619      	mov	r1, r3
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f001 f8cd 	bl	80074c6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f000 fd03 	bl	8006d38 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006332:	7bbb      	ldrb	r3, [r7, #14]
 8006334:	4619      	mov	r1, r3
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f7ff fde4 	bl	8005f04 <USBD_CoreFindEP>
 800633c:	4603      	mov	r3, r0
 800633e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006340:	7b7b      	ldrb	r3, [r7, #13]
 8006342:	2bff      	cmp	r3, #255	@ 0xff
 8006344:	d01f      	beq.n	8006386 <USBD_StdEPReq+0x1c6>
 8006346:	7b7b      	ldrb	r3, [r7, #13]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d11c      	bne.n	8006386 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800634c:	7b7a      	ldrb	r2, [r7, #13]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006354:	7b7a      	ldrb	r2, [r7, #13]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	32ae      	adds	r2, #174	@ 0xae
 800635a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d010      	beq.n	8006386 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006364:	7b7a      	ldrb	r2, [r7, #13]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	32ae      	adds	r2, #174	@ 0xae
 800636a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	6839      	ldr	r1, [r7, #0]
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	4798      	blx	r3
 8006376:	4603      	mov	r3, r0
 8006378:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800637a:	e004      	b.n	8006386 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800637c:	6839      	ldr	r1, [r7, #0]
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f000 fc03 	bl	8006b8a <USBD_CtlError>
              break;
 8006384:	e000      	b.n	8006388 <USBD_StdEPReq+0x1c8>
              break;
 8006386:	bf00      	nop
          }
          break;
 8006388:	e0ab      	b.n	80064e2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006390:	b2db      	uxtb	r3, r3
 8006392:	2b02      	cmp	r3, #2
 8006394:	d002      	beq.n	800639c <USBD_StdEPReq+0x1dc>
 8006396:	2b03      	cmp	r3, #3
 8006398:	d032      	beq.n	8006400 <USBD_StdEPReq+0x240>
 800639a:	e097      	b.n	80064cc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800639c:	7bbb      	ldrb	r3, [r7, #14]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d007      	beq.n	80063b2 <USBD_StdEPReq+0x1f2>
 80063a2:	7bbb      	ldrb	r3, [r7, #14]
 80063a4:	2b80      	cmp	r3, #128	@ 0x80
 80063a6:	d004      	beq.n	80063b2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80063a8:	6839      	ldr	r1, [r7, #0]
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f000 fbed 	bl	8006b8a <USBD_CtlError>
                break;
 80063b0:	e091      	b.n	80064d6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80063b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	da0b      	bge.n	80063d2 <USBD_StdEPReq+0x212>
 80063ba:	7bbb      	ldrb	r3, [r7, #14]
 80063bc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80063c0:	4613      	mov	r3, r2
 80063c2:	009b      	lsls	r3, r3, #2
 80063c4:	4413      	add	r3, r2
 80063c6:	009b      	lsls	r3, r3, #2
 80063c8:	3310      	adds	r3, #16
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	4413      	add	r3, r2
 80063ce:	3304      	adds	r3, #4
 80063d0:	e00b      	b.n	80063ea <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80063d2:	7bbb      	ldrb	r3, [r7, #14]
 80063d4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80063d8:	4613      	mov	r3, r2
 80063da:	009b      	lsls	r3, r3, #2
 80063dc:	4413      	add	r3, r2
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80063e4:	687a      	ldr	r2, [r7, #4]
 80063e6:	4413      	add	r3, r2
 80063e8:	3304      	adds	r3, #4
 80063ea:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	2200      	movs	r2, #0
 80063f0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	2202      	movs	r2, #2
 80063f6:	4619      	mov	r1, r3
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f000 fc43 	bl	8006c84 <USBD_CtlSendData>
              break;
 80063fe:	e06a      	b.n	80064d6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006400:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006404:	2b00      	cmp	r3, #0
 8006406:	da11      	bge.n	800642c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006408:	7bbb      	ldrb	r3, [r7, #14]
 800640a:	f003 020f 	and.w	r2, r3, #15
 800640e:	6879      	ldr	r1, [r7, #4]
 8006410:	4613      	mov	r3, r2
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	4413      	add	r3, r2
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	440b      	add	r3, r1
 800641a:	3324      	adds	r3, #36	@ 0x24
 800641c:	881b      	ldrh	r3, [r3, #0]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d117      	bne.n	8006452 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006422:	6839      	ldr	r1, [r7, #0]
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f000 fbb0 	bl	8006b8a <USBD_CtlError>
                  break;
 800642a:	e054      	b.n	80064d6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800642c:	7bbb      	ldrb	r3, [r7, #14]
 800642e:	f003 020f 	and.w	r2, r3, #15
 8006432:	6879      	ldr	r1, [r7, #4]
 8006434:	4613      	mov	r3, r2
 8006436:	009b      	lsls	r3, r3, #2
 8006438:	4413      	add	r3, r2
 800643a:	009b      	lsls	r3, r3, #2
 800643c:	440b      	add	r3, r1
 800643e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006442:	881b      	ldrh	r3, [r3, #0]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d104      	bne.n	8006452 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006448:	6839      	ldr	r1, [r7, #0]
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f000 fb9d 	bl	8006b8a <USBD_CtlError>
                  break;
 8006450:	e041      	b.n	80064d6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006452:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006456:	2b00      	cmp	r3, #0
 8006458:	da0b      	bge.n	8006472 <USBD_StdEPReq+0x2b2>
 800645a:	7bbb      	ldrb	r3, [r7, #14]
 800645c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006460:	4613      	mov	r3, r2
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	4413      	add	r3, r2
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	3310      	adds	r3, #16
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	4413      	add	r3, r2
 800646e:	3304      	adds	r3, #4
 8006470:	e00b      	b.n	800648a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006472:	7bbb      	ldrb	r3, [r7, #14]
 8006474:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006478:	4613      	mov	r3, r2
 800647a:	009b      	lsls	r3, r3, #2
 800647c:	4413      	add	r3, r2
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006484:	687a      	ldr	r2, [r7, #4]
 8006486:	4413      	add	r3, r2
 8006488:	3304      	adds	r3, #4
 800648a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800648c:	7bbb      	ldrb	r3, [r7, #14]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d002      	beq.n	8006498 <USBD_StdEPReq+0x2d8>
 8006492:	7bbb      	ldrb	r3, [r7, #14]
 8006494:	2b80      	cmp	r3, #128	@ 0x80
 8006496:	d103      	bne.n	80064a0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	2200      	movs	r2, #0
 800649c:	601a      	str	r2, [r3, #0]
 800649e:	e00e      	b.n	80064be <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80064a0:	7bbb      	ldrb	r3, [r7, #14]
 80064a2:	4619      	mov	r1, r3
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f001 f82d 	bl	8007504 <USBD_LL_IsStallEP>
 80064aa:	4603      	mov	r3, r0
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d003      	beq.n	80064b8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	2201      	movs	r2, #1
 80064b4:	601a      	str	r2, [r3, #0]
 80064b6:	e002      	b.n	80064be <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	2200      	movs	r2, #0
 80064bc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	2202      	movs	r2, #2
 80064c2:	4619      	mov	r1, r3
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f000 fbdd 	bl	8006c84 <USBD_CtlSendData>
              break;
 80064ca:	e004      	b.n	80064d6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80064cc:	6839      	ldr	r1, [r7, #0]
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 fb5b 	bl	8006b8a <USBD_CtlError>
              break;
 80064d4:	bf00      	nop
          }
          break;
 80064d6:	e004      	b.n	80064e2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80064d8:	6839      	ldr	r1, [r7, #0]
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f000 fb55 	bl	8006b8a <USBD_CtlError>
          break;
 80064e0:	bf00      	nop
      }
      break;
 80064e2:	e005      	b.n	80064f0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80064e4:	6839      	ldr	r1, [r7, #0]
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 fb4f 	bl	8006b8a <USBD_CtlError>
      break;
 80064ec:	e000      	b.n	80064f0 <USBD_StdEPReq+0x330>
      break;
 80064ee:	bf00      	nop
  }

  return ret;
 80064f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3710      	adds	r7, #16
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
	...

080064fc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b084      	sub	sp, #16
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006506:	2300      	movs	r3, #0
 8006508:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800650a:	2300      	movs	r3, #0
 800650c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800650e:	2300      	movs	r3, #0
 8006510:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	885b      	ldrh	r3, [r3, #2]
 8006516:	0a1b      	lsrs	r3, r3, #8
 8006518:	b29b      	uxth	r3, r3
 800651a:	3b01      	subs	r3, #1
 800651c:	2b06      	cmp	r3, #6
 800651e:	f200 8128 	bhi.w	8006772 <USBD_GetDescriptor+0x276>
 8006522:	a201      	add	r2, pc, #4	@ (adr r2, 8006528 <USBD_GetDescriptor+0x2c>)
 8006524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006528:	08006545 	.word	0x08006545
 800652c:	0800655d 	.word	0x0800655d
 8006530:	0800659d 	.word	0x0800659d
 8006534:	08006773 	.word	0x08006773
 8006538:	08006773 	.word	0x08006773
 800653c:	08006713 	.word	0x08006713
 8006540:	0800673f 	.word	0x0800673f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	687a      	ldr	r2, [r7, #4]
 800654e:	7c12      	ldrb	r2, [r2, #16]
 8006550:	f107 0108 	add.w	r1, r7, #8
 8006554:	4610      	mov	r0, r2
 8006556:	4798      	blx	r3
 8006558:	60f8      	str	r0, [r7, #12]
      break;
 800655a:	e112      	b.n	8006782 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	7c1b      	ldrb	r3, [r3, #16]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d10d      	bne.n	8006580 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800656a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800656c:	f107 0208 	add.w	r2, r7, #8
 8006570:	4610      	mov	r0, r2
 8006572:	4798      	blx	r3
 8006574:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	3301      	adds	r3, #1
 800657a:	2202      	movs	r2, #2
 800657c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800657e:	e100      	b.n	8006782 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006588:	f107 0208 	add.w	r2, r7, #8
 800658c:	4610      	mov	r0, r2
 800658e:	4798      	blx	r3
 8006590:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	3301      	adds	r3, #1
 8006596:	2202      	movs	r2, #2
 8006598:	701a      	strb	r2, [r3, #0]
      break;
 800659a:	e0f2      	b.n	8006782 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	885b      	ldrh	r3, [r3, #2]
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	2b05      	cmp	r3, #5
 80065a4:	f200 80ac 	bhi.w	8006700 <USBD_GetDescriptor+0x204>
 80065a8:	a201      	add	r2, pc, #4	@ (adr r2, 80065b0 <USBD_GetDescriptor+0xb4>)
 80065aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ae:	bf00      	nop
 80065b0:	080065c9 	.word	0x080065c9
 80065b4:	080065fd 	.word	0x080065fd
 80065b8:	08006631 	.word	0x08006631
 80065bc:	08006665 	.word	0x08006665
 80065c0:	08006699 	.word	0x08006699
 80065c4:	080066cd 	.word	0x080066cd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d00b      	beq.n	80065ec <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	7c12      	ldrb	r2, [r2, #16]
 80065e0:	f107 0108 	add.w	r1, r7, #8
 80065e4:	4610      	mov	r0, r2
 80065e6:	4798      	blx	r3
 80065e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80065ea:	e091      	b.n	8006710 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80065ec:	6839      	ldr	r1, [r7, #0]
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f000 facb 	bl	8006b8a <USBD_CtlError>
            err++;
 80065f4:	7afb      	ldrb	r3, [r7, #11]
 80065f6:	3301      	adds	r3, #1
 80065f8:	72fb      	strb	r3, [r7, #11]
          break;
 80065fa:	e089      	b.n	8006710 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d00b      	beq.n	8006620 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	687a      	ldr	r2, [r7, #4]
 8006612:	7c12      	ldrb	r2, [r2, #16]
 8006614:	f107 0108 	add.w	r1, r7, #8
 8006618:	4610      	mov	r0, r2
 800661a:	4798      	blx	r3
 800661c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800661e:	e077      	b.n	8006710 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006620:	6839      	ldr	r1, [r7, #0]
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f000 fab1 	bl	8006b8a <USBD_CtlError>
            err++;
 8006628:	7afb      	ldrb	r3, [r7, #11]
 800662a:	3301      	adds	r3, #1
 800662c:	72fb      	strb	r3, [r7, #11]
          break;
 800662e:	e06f      	b.n	8006710 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d00b      	beq.n	8006654 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006642:	68db      	ldr	r3, [r3, #12]
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	7c12      	ldrb	r2, [r2, #16]
 8006648:	f107 0108 	add.w	r1, r7, #8
 800664c:	4610      	mov	r0, r2
 800664e:	4798      	blx	r3
 8006650:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006652:	e05d      	b.n	8006710 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006654:	6839      	ldr	r1, [r7, #0]
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 fa97 	bl	8006b8a <USBD_CtlError>
            err++;
 800665c:	7afb      	ldrb	r3, [r7, #11]
 800665e:	3301      	adds	r3, #1
 8006660:	72fb      	strb	r3, [r7, #11]
          break;
 8006662:	e055      	b.n	8006710 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800666a:	691b      	ldr	r3, [r3, #16]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d00b      	beq.n	8006688 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006676:	691b      	ldr	r3, [r3, #16]
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	7c12      	ldrb	r2, [r2, #16]
 800667c:	f107 0108 	add.w	r1, r7, #8
 8006680:	4610      	mov	r0, r2
 8006682:	4798      	blx	r3
 8006684:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006686:	e043      	b.n	8006710 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006688:	6839      	ldr	r1, [r7, #0]
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f000 fa7d 	bl	8006b8a <USBD_CtlError>
            err++;
 8006690:	7afb      	ldrb	r3, [r7, #11]
 8006692:	3301      	adds	r3, #1
 8006694:	72fb      	strb	r3, [r7, #11]
          break;
 8006696:	e03b      	b.n	8006710 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800669e:	695b      	ldr	r3, [r3, #20]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d00b      	beq.n	80066bc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80066aa:	695b      	ldr	r3, [r3, #20]
 80066ac:	687a      	ldr	r2, [r7, #4]
 80066ae:	7c12      	ldrb	r2, [r2, #16]
 80066b0:	f107 0108 	add.w	r1, r7, #8
 80066b4:	4610      	mov	r0, r2
 80066b6:	4798      	blx	r3
 80066b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066ba:	e029      	b.n	8006710 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80066bc:	6839      	ldr	r1, [r7, #0]
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 fa63 	bl	8006b8a <USBD_CtlError>
            err++;
 80066c4:	7afb      	ldrb	r3, [r7, #11]
 80066c6:	3301      	adds	r3, #1
 80066c8:	72fb      	strb	r3, [r7, #11]
          break;
 80066ca:	e021      	b.n	8006710 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80066d2:	699b      	ldr	r3, [r3, #24]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d00b      	beq.n	80066f0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80066de:	699b      	ldr	r3, [r3, #24]
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	7c12      	ldrb	r2, [r2, #16]
 80066e4:	f107 0108 	add.w	r1, r7, #8
 80066e8:	4610      	mov	r0, r2
 80066ea:	4798      	blx	r3
 80066ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066ee:	e00f      	b.n	8006710 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80066f0:	6839      	ldr	r1, [r7, #0]
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 fa49 	bl	8006b8a <USBD_CtlError>
            err++;
 80066f8:	7afb      	ldrb	r3, [r7, #11]
 80066fa:	3301      	adds	r3, #1
 80066fc:	72fb      	strb	r3, [r7, #11]
          break;
 80066fe:	e007      	b.n	8006710 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006700:	6839      	ldr	r1, [r7, #0]
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 fa41 	bl	8006b8a <USBD_CtlError>
          err++;
 8006708:	7afb      	ldrb	r3, [r7, #11]
 800670a:	3301      	adds	r3, #1
 800670c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800670e:	bf00      	nop
      }
      break;
 8006710:	e037      	b.n	8006782 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	7c1b      	ldrb	r3, [r3, #16]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d109      	bne.n	800672e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006720:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006722:	f107 0208 	add.w	r2, r7, #8
 8006726:	4610      	mov	r0, r2
 8006728:	4798      	blx	r3
 800672a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800672c:	e029      	b.n	8006782 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800672e:	6839      	ldr	r1, [r7, #0]
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f000 fa2a 	bl	8006b8a <USBD_CtlError>
        err++;
 8006736:	7afb      	ldrb	r3, [r7, #11]
 8006738:	3301      	adds	r3, #1
 800673a:	72fb      	strb	r3, [r7, #11]
      break;
 800673c:	e021      	b.n	8006782 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	7c1b      	ldrb	r3, [r3, #16]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d10d      	bne.n	8006762 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800674c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800674e:	f107 0208 	add.w	r2, r7, #8
 8006752:	4610      	mov	r0, r2
 8006754:	4798      	blx	r3
 8006756:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	3301      	adds	r3, #1
 800675c:	2207      	movs	r2, #7
 800675e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006760:	e00f      	b.n	8006782 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006762:	6839      	ldr	r1, [r7, #0]
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f000 fa10 	bl	8006b8a <USBD_CtlError>
        err++;
 800676a:	7afb      	ldrb	r3, [r7, #11]
 800676c:	3301      	adds	r3, #1
 800676e:	72fb      	strb	r3, [r7, #11]
      break;
 8006770:	e007      	b.n	8006782 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006772:	6839      	ldr	r1, [r7, #0]
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f000 fa08 	bl	8006b8a <USBD_CtlError>
      err++;
 800677a:	7afb      	ldrb	r3, [r7, #11]
 800677c:	3301      	adds	r3, #1
 800677e:	72fb      	strb	r3, [r7, #11]
      break;
 8006780:	bf00      	nop
  }

  if (err != 0U)
 8006782:	7afb      	ldrb	r3, [r7, #11]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d11e      	bne.n	80067c6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	88db      	ldrh	r3, [r3, #6]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d016      	beq.n	80067be <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006790:	893b      	ldrh	r3, [r7, #8]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d00e      	beq.n	80067b4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	88da      	ldrh	r2, [r3, #6]
 800679a:	893b      	ldrh	r3, [r7, #8]
 800679c:	4293      	cmp	r3, r2
 800679e:	bf28      	it	cs
 80067a0:	4613      	movcs	r3, r2
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80067a6:	893b      	ldrh	r3, [r7, #8]
 80067a8:	461a      	mov	r2, r3
 80067aa:	68f9      	ldr	r1, [r7, #12]
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f000 fa69 	bl	8006c84 <USBD_CtlSendData>
 80067b2:	e009      	b.n	80067c8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80067b4:	6839      	ldr	r1, [r7, #0]
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f000 f9e7 	bl	8006b8a <USBD_CtlError>
 80067bc:	e004      	b.n	80067c8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 faba 	bl	8006d38 <USBD_CtlSendStatus>
 80067c4:	e000      	b.n	80067c8 <USBD_GetDescriptor+0x2cc>
    return;
 80067c6:	bf00      	nop
  }
}
 80067c8:	3710      	adds	r7, #16
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}
 80067ce:	bf00      	nop

080067d0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b084      	sub	sp, #16
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	889b      	ldrh	r3, [r3, #4]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d131      	bne.n	8006846 <USBD_SetAddress+0x76>
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	88db      	ldrh	r3, [r3, #6]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d12d      	bne.n	8006846 <USBD_SetAddress+0x76>
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	885b      	ldrh	r3, [r3, #2]
 80067ee:	2b7f      	cmp	r3, #127	@ 0x7f
 80067f0:	d829      	bhi.n	8006846 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	885b      	ldrh	r3, [r3, #2]
 80067f6:	b2db      	uxtb	r3, r3
 80067f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80067fc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006804:	b2db      	uxtb	r3, r3
 8006806:	2b03      	cmp	r3, #3
 8006808:	d104      	bne.n	8006814 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800680a:	6839      	ldr	r1, [r7, #0]
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f000 f9bc 	bl	8006b8a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006812:	e01d      	b.n	8006850 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	7bfa      	ldrb	r2, [r7, #15]
 8006818:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800681c:	7bfb      	ldrb	r3, [r7, #15]
 800681e:	4619      	mov	r1, r3
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f000 fe9b 	bl	800755c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 fa86 	bl	8006d38 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800682c:	7bfb      	ldrb	r3, [r7, #15]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d004      	beq.n	800683c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2202      	movs	r2, #2
 8006836:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800683a:	e009      	b.n	8006850 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2201      	movs	r2, #1
 8006840:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006844:	e004      	b.n	8006850 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006846:	6839      	ldr	r1, [r7, #0]
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f000 f99e 	bl	8006b8a <USBD_CtlError>
  }
}
 800684e:	bf00      	nop
 8006850:	bf00      	nop
 8006852:	3710      	adds	r7, #16
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}

08006858 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b084      	sub	sp, #16
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006862:	2300      	movs	r3, #0
 8006864:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	885b      	ldrh	r3, [r3, #2]
 800686a:	b2da      	uxtb	r2, r3
 800686c:	4b4e      	ldr	r3, [pc, #312]	@ (80069a8 <USBD_SetConfig+0x150>)
 800686e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006870:	4b4d      	ldr	r3, [pc, #308]	@ (80069a8 <USBD_SetConfig+0x150>)
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	2b01      	cmp	r3, #1
 8006876:	d905      	bls.n	8006884 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006878:	6839      	ldr	r1, [r7, #0]
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f000 f985 	bl	8006b8a <USBD_CtlError>
    return USBD_FAIL;
 8006880:	2303      	movs	r3, #3
 8006882:	e08c      	b.n	800699e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800688a:	b2db      	uxtb	r3, r3
 800688c:	2b02      	cmp	r3, #2
 800688e:	d002      	beq.n	8006896 <USBD_SetConfig+0x3e>
 8006890:	2b03      	cmp	r3, #3
 8006892:	d029      	beq.n	80068e8 <USBD_SetConfig+0x90>
 8006894:	e075      	b.n	8006982 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006896:	4b44      	ldr	r3, [pc, #272]	@ (80069a8 <USBD_SetConfig+0x150>)
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d020      	beq.n	80068e0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800689e:	4b42      	ldr	r3, [pc, #264]	@ (80069a8 <USBD_SetConfig+0x150>)
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	461a      	mov	r2, r3
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80068a8:	4b3f      	ldr	r3, [pc, #252]	@ (80069a8 <USBD_SetConfig+0x150>)
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	4619      	mov	r1, r3
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f7fe ffe3 	bl	800587a <USBD_SetClassConfig>
 80068b4:	4603      	mov	r3, r0
 80068b6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80068b8:	7bfb      	ldrb	r3, [r7, #15]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d008      	beq.n	80068d0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80068be:	6839      	ldr	r1, [r7, #0]
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f000 f962 	bl	8006b8a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2202      	movs	r2, #2
 80068ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80068ce:	e065      	b.n	800699c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 fa31 	bl	8006d38 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2203      	movs	r2, #3
 80068da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80068de:	e05d      	b.n	800699c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f000 fa29 	bl	8006d38 <USBD_CtlSendStatus>
      break;
 80068e6:	e059      	b.n	800699c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80068e8:	4b2f      	ldr	r3, [pc, #188]	@ (80069a8 <USBD_SetConfig+0x150>)
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d112      	bne.n	8006916 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2202      	movs	r2, #2
 80068f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80068f8:	4b2b      	ldr	r3, [pc, #172]	@ (80069a8 <USBD_SetConfig+0x150>)
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	461a      	mov	r2, r3
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006902:	4b29      	ldr	r3, [pc, #164]	@ (80069a8 <USBD_SetConfig+0x150>)
 8006904:	781b      	ldrb	r3, [r3, #0]
 8006906:	4619      	mov	r1, r3
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f7fe ffd2 	bl	80058b2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 fa12 	bl	8006d38 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006914:	e042      	b.n	800699c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006916:	4b24      	ldr	r3, [pc, #144]	@ (80069a8 <USBD_SetConfig+0x150>)
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	461a      	mov	r2, r3
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	429a      	cmp	r2, r3
 8006922:	d02a      	beq.n	800697a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	b2db      	uxtb	r3, r3
 800692a:	4619      	mov	r1, r3
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f7fe ffc0 	bl	80058b2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006932:	4b1d      	ldr	r3, [pc, #116]	@ (80069a8 <USBD_SetConfig+0x150>)
 8006934:	781b      	ldrb	r3, [r3, #0]
 8006936:	461a      	mov	r2, r3
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800693c:	4b1a      	ldr	r3, [pc, #104]	@ (80069a8 <USBD_SetConfig+0x150>)
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	4619      	mov	r1, r3
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f7fe ff99 	bl	800587a <USBD_SetClassConfig>
 8006948:	4603      	mov	r3, r0
 800694a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800694c:	7bfb      	ldrb	r3, [r7, #15]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d00f      	beq.n	8006972 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006952:	6839      	ldr	r1, [r7, #0]
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f000 f918 	bl	8006b8a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	b2db      	uxtb	r3, r3
 8006960:	4619      	mov	r1, r3
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f7fe ffa5 	bl	80058b2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2202      	movs	r2, #2
 800696c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006970:	e014      	b.n	800699c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f000 f9e0 	bl	8006d38 <USBD_CtlSendStatus>
      break;
 8006978:	e010      	b.n	800699c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 f9dc 	bl	8006d38 <USBD_CtlSendStatus>
      break;
 8006980:	e00c      	b.n	800699c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006982:	6839      	ldr	r1, [r7, #0]
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f000 f900 	bl	8006b8a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800698a:	4b07      	ldr	r3, [pc, #28]	@ (80069a8 <USBD_SetConfig+0x150>)
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	4619      	mov	r1, r3
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f7fe ff8e 	bl	80058b2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006996:	2303      	movs	r3, #3
 8006998:	73fb      	strb	r3, [r7, #15]
      break;
 800699a:	bf00      	nop
  }

  return ret;
 800699c:	7bfb      	ldrb	r3, [r7, #15]
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3710      	adds	r7, #16
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}
 80069a6:	bf00      	nop
 80069a8:	20000204 	.word	0x20000204

080069ac <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b082      	sub	sp, #8
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	88db      	ldrh	r3, [r3, #6]
 80069ba:	2b01      	cmp	r3, #1
 80069bc:	d004      	beq.n	80069c8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80069be:	6839      	ldr	r1, [r7, #0]
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f000 f8e2 	bl	8006b8a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80069c6:	e023      	b.n	8006a10 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80069ce:	b2db      	uxtb	r3, r3
 80069d0:	2b02      	cmp	r3, #2
 80069d2:	dc02      	bgt.n	80069da <USBD_GetConfig+0x2e>
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	dc03      	bgt.n	80069e0 <USBD_GetConfig+0x34>
 80069d8:	e015      	b.n	8006a06 <USBD_GetConfig+0x5a>
 80069da:	2b03      	cmp	r3, #3
 80069dc:	d00b      	beq.n	80069f6 <USBD_GetConfig+0x4a>
 80069de:	e012      	b.n	8006a06 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2200      	movs	r2, #0
 80069e4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	3308      	adds	r3, #8
 80069ea:	2201      	movs	r2, #1
 80069ec:	4619      	mov	r1, r3
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 f948 	bl	8006c84 <USBD_CtlSendData>
        break;
 80069f4:	e00c      	b.n	8006a10 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	3304      	adds	r3, #4
 80069fa:	2201      	movs	r2, #1
 80069fc:	4619      	mov	r1, r3
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 f940 	bl	8006c84 <USBD_CtlSendData>
        break;
 8006a04:	e004      	b.n	8006a10 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006a06:	6839      	ldr	r1, [r7, #0]
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f000 f8be 	bl	8006b8a <USBD_CtlError>
        break;
 8006a0e:	bf00      	nop
}
 8006a10:	bf00      	nop
 8006a12:	3708      	adds	r7, #8
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}

08006a18 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b082      	sub	sp, #8
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	3b01      	subs	r3, #1
 8006a2c:	2b02      	cmp	r3, #2
 8006a2e:	d81e      	bhi.n	8006a6e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	88db      	ldrh	r3, [r3, #6]
 8006a34:	2b02      	cmp	r3, #2
 8006a36:	d004      	beq.n	8006a42 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006a38:	6839      	ldr	r1, [r7, #0]
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f000 f8a5 	bl	8006b8a <USBD_CtlError>
        break;
 8006a40:	e01a      	b.n	8006a78 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
      pdev->dev_config_status = 0U;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2200      	movs	r2, #0
 8006a46:	60da      	str	r2, [r3, #12]
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d005      	beq.n	8006a5e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	68db      	ldr	r3, [r3, #12]
 8006a56:	f043 0202 	orr.w	r2, r3, #2
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	330c      	adds	r3, #12
 8006a62:	2202      	movs	r2, #2
 8006a64:	4619      	mov	r1, r3
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f000 f90c 	bl	8006c84 <USBD_CtlSendData>
      break;
 8006a6c:	e004      	b.n	8006a78 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006a6e:	6839      	ldr	r1, [r7, #0]
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f000 f88a 	bl	8006b8a <USBD_CtlError>
      break;
 8006a76:	bf00      	nop
  }
}
 8006a78:	bf00      	nop
 8006a7a:	3708      	adds	r7, #8
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}

08006a80 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b082      	sub	sp, #8
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	885b      	ldrh	r3, [r3, #2]
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d107      	bne.n	8006aa2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2201      	movs	r2, #1
 8006a96:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f000 f94c 	bl	8006d38 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006aa0:	e013      	b.n	8006aca <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	885b      	ldrh	r3, [r3, #2]
 8006aa6:	2b02      	cmp	r3, #2
 8006aa8:	d10b      	bne.n	8006ac2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	889b      	ldrh	r3, [r3, #4]
 8006aae:	0a1b      	lsrs	r3, r3, #8
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	b2da      	uxtb	r2, r3
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f000 f93c 	bl	8006d38 <USBD_CtlSendStatus>
}
 8006ac0:	e003      	b.n	8006aca <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006ac2:	6839      	ldr	r1, [r7, #0]
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f000 f860 	bl	8006b8a <USBD_CtlError>
}
 8006aca:	bf00      	nop
 8006acc:	3708      	adds	r7, #8
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}

08006ad2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ad2:	b580      	push	{r7, lr}
 8006ad4:	b082      	sub	sp, #8
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	6078      	str	r0, [r7, #4]
 8006ada:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ae2:	b2db      	uxtb	r3, r3
 8006ae4:	3b01      	subs	r3, #1
 8006ae6:	2b02      	cmp	r3, #2
 8006ae8:	d80b      	bhi.n	8006b02 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	885b      	ldrh	r3, [r3, #2]
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d10c      	bne.n	8006b0c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2200      	movs	r2, #0
 8006af6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 f91c 	bl	8006d38 <USBD_CtlSendStatus>
      }
      break;
 8006b00:	e004      	b.n	8006b0c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006b02:	6839      	ldr	r1, [r7, #0]
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f000 f840 	bl	8006b8a <USBD_CtlError>
      break;
 8006b0a:	e000      	b.n	8006b0e <USBD_ClrFeature+0x3c>
      break;
 8006b0c:	bf00      	nop
  }
}
 8006b0e:	bf00      	nop
 8006b10:	3708      	adds	r7, #8
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}

08006b16 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006b16:	b580      	push	{r7, lr}
 8006b18:	b084      	sub	sp, #16
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	6078      	str	r0, [r7, #4]
 8006b1e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	781a      	ldrb	r2, [r3, #0]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	3301      	adds	r3, #1
 8006b30:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	781a      	ldrb	r2, [r3, #0]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	3301      	adds	r3, #1
 8006b3e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006b40:	68f8      	ldr	r0, [r7, #12]
 8006b42:	f7ff fa40 	bl	8005fc6 <SWAPBYTE>
 8006b46:	4603      	mov	r3, r0
 8006b48:	461a      	mov	r2, r3
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	3301      	adds	r3, #1
 8006b52:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	3301      	adds	r3, #1
 8006b58:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006b5a:	68f8      	ldr	r0, [r7, #12]
 8006b5c:	f7ff fa33 	bl	8005fc6 <SWAPBYTE>
 8006b60:	4603      	mov	r3, r0
 8006b62:	461a      	mov	r2, r3
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	3301      	adds	r3, #1
 8006b6c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	3301      	adds	r3, #1
 8006b72:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006b74:	68f8      	ldr	r0, [r7, #12]
 8006b76:	f7ff fa26 	bl	8005fc6 <SWAPBYTE>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	80da      	strh	r2, [r3, #6]
}
 8006b82:	bf00      	nop
 8006b84:	3710      	adds	r7, #16
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}

08006b8a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b8a:	b580      	push	{r7, lr}
 8006b8c:	b082      	sub	sp, #8
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	6078      	str	r0, [r7, #4]
 8006b92:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b94:	2180      	movs	r1, #128	@ 0x80
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f000 fc76 	bl	8007488 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006b9c:	2100      	movs	r1, #0
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 fc72 	bl	8007488 <USBD_LL_StallEP>
}
 8006ba4:	bf00      	nop
 8006ba6:	3708      	adds	r7, #8
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b086      	sub	sp, #24
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	60f8      	str	r0, [r7, #12]
 8006bb4:	60b9      	str	r1, [r7, #8]
 8006bb6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d042      	beq.n	8006c48 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8006bc6:	6938      	ldr	r0, [r7, #16]
 8006bc8:	f000 f842 	bl	8006c50 <USBD_GetLen>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	3301      	adds	r3, #1
 8006bd0:	005b      	lsls	r3, r3, #1
 8006bd2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006bd6:	d808      	bhi.n	8006bea <USBD_GetString+0x3e>
 8006bd8:	6938      	ldr	r0, [r7, #16]
 8006bda:	f000 f839 	bl	8006c50 <USBD_GetLen>
 8006bde:	4603      	mov	r3, r0
 8006be0:	3301      	adds	r3, #1
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	005b      	lsls	r3, r3, #1
 8006be6:	b29a      	uxth	r2, r3
 8006be8:	e001      	b.n	8006bee <USBD_GetString+0x42>
 8006bea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006bf2:	7dfb      	ldrb	r3, [r7, #23]
 8006bf4:	68ba      	ldr	r2, [r7, #8]
 8006bf6:	4413      	add	r3, r2
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	7812      	ldrb	r2, [r2, #0]
 8006bfc:	701a      	strb	r2, [r3, #0]
  idx++;
 8006bfe:	7dfb      	ldrb	r3, [r7, #23]
 8006c00:	3301      	adds	r3, #1
 8006c02:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006c04:	7dfb      	ldrb	r3, [r7, #23]
 8006c06:	68ba      	ldr	r2, [r7, #8]
 8006c08:	4413      	add	r3, r2
 8006c0a:	2203      	movs	r2, #3
 8006c0c:	701a      	strb	r2, [r3, #0]
  idx++;
 8006c0e:	7dfb      	ldrb	r3, [r7, #23]
 8006c10:	3301      	adds	r3, #1
 8006c12:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006c14:	e013      	b.n	8006c3e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8006c16:	7dfb      	ldrb	r3, [r7, #23]
 8006c18:	68ba      	ldr	r2, [r7, #8]
 8006c1a:	4413      	add	r3, r2
 8006c1c:	693a      	ldr	r2, [r7, #16]
 8006c1e:	7812      	ldrb	r2, [r2, #0]
 8006c20:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	3301      	adds	r3, #1
 8006c26:	613b      	str	r3, [r7, #16]
    idx++;
 8006c28:	7dfb      	ldrb	r3, [r7, #23]
 8006c2a:	3301      	adds	r3, #1
 8006c2c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006c2e:	7dfb      	ldrb	r3, [r7, #23]
 8006c30:	68ba      	ldr	r2, [r7, #8]
 8006c32:	4413      	add	r3, r2
 8006c34:	2200      	movs	r2, #0
 8006c36:	701a      	strb	r2, [r3, #0]
    idx++;
 8006c38:	7dfb      	ldrb	r3, [r7, #23]
 8006c3a:	3301      	adds	r3, #1
 8006c3c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	781b      	ldrb	r3, [r3, #0]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d1e7      	bne.n	8006c16 <USBD_GetString+0x6a>
 8006c46:	e000      	b.n	8006c4a <USBD_GetString+0x9e>
    return;
 8006c48:	bf00      	nop
  }
}
 8006c4a:	3718      	adds	r7, #24
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}

08006c50 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b085      	sub	sp, #20
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006c60:	e005      	b.n	8006c6e <USBD_GetLen+0x1e>
  {
    len++;
 8006c62:	7bfb      	ldrb	r3, [r7, #15]
 8006c64:	3301      	adds	r3, #1
 8006c66:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	3301      	adds	r3, #1
 8006c6c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d1f5      	bne.n	8006c62 <USBD_GetLen+0x12>
  }

  return len;
 8006c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3714      	adds	r7, #20
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr

08006c84 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b084      	sub	sp, #16
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	60f8      	str	r0, [r7, #12]
 8006c8c:	60b9      	str	r1, [r7, #8]
 8006c8e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2202      	movs	r2, #2
 8006c94:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	687a      	ldr	r2, [r7, #4]
 8006c9c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	687a      	ldr	r2, [r7, #4]
 8006ca2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	68ba      	ldr	r2, [r7, #8]
 8006ca8:	2100      	movs	r1, #0
 8006caa:	68f8      	ldr	r0, [r7, #12]
 8006cac:	f000 fc75 	bl	800759a <USBD_LL_Transmit>

  return USBD_OK;
 8006cb0:	2300      	movs	r3, #0
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3710      	adds	r7, #16
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}

08006cba <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006cba:	b580      	push	{r7, lr}
 8006cbc:	b084      	sub	sp, #16
 8006cbe:	af00      	add	r7, sp, #0
 8006cc0:	60f8      	str	r0, [r7, #12]
 8006cc2:	60b9      	str	r1, [r7, #8]
 8006cc4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	68ba      	ldr	r2, [r7, #8]
 8006cca:	2100      	movs	r1, #0
 8006ccc:	68f8      	ldr	r0, [r7, #12]
 8006cce:	f000 fc64 	bl	800759a <USBD_LL_Transmit>

  return USBD_OK;
 8006cd2:	2300      	movs	r3, #0
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3710      	adds	r7, #16
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}

08006cdc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b084      	sub	sp, #16
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	60f8      	str	r0, [r7, #12]
 8006ce4:	60b9      	str	r1, [r7, #8]
 8006ce6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2203      	movs	r2, #3
 8006cec:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	687a      	ldr	r2, [r7, #4]
 8006cf4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	687a      	ldr	r2, [r7, #4]
 8006cfc:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	68ba      	ldr	r2, [r7, #8]
 8006d04:	2100      	movs	r1, #0
 8006d06:	68f8      	ldr	r0, [r7, #12]
 8006d08:	f000 fc68 	bl	80075dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d0c:	2300      	movs	r3, #0
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3710      	adds	r7, #16
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}

08006d16 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006d16:	b580      	push	{r7, lr}
 8006d18:	b084      	sub	sp, #16
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	60f8      	str	r0, [r7, #12]
 8006d1e:	60b9      	str	r1, [r7, #8]
 8006d20:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	68ba      	ldr	r2, [r7, #8]
 8006d26:	2100      	movs	r1, #0
 8006d28:	68f8      	ldr	r0, [r7, #12]
 8006d2a:	f000 fc57 	bl	80075dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d2e:	2300      	movs	r3, #0
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3710      	adds	r7, #16
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b082      	sub	sp, #8
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2204      	movs	r2, #4
 8006d44:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006d48:	2300      	movs	r3, #0
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	2100      	movs	r1, #0
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f000 fc23 	bl	800759a <USBD_LL_Transmit>

  return USBD_OK;
 8006d54:	2300      	movs	r3, #0
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3708      	adds	r7, #8
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}

08006d5e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006d5e:	b580      	push	{r7, lr}
 8006d60:	b082      	sub	sp, #8
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2205      	movs	r2, #5
 8006d6a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d6e:	2300      	movs	r3, #0
 8006d70:	2200      	movs	r2, #0
 8006d72:	2100      	movs	r1, #0
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f000 fc31 	bl	80075dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d7a:	2300      	movs	r3, #0
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3708      	adds	r7, #8
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}

08006d84 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006d88:	2200      	movs	r2, #0
 8006d8a:	4912      	ldr	r1, [pc, #72]	@ (8006dd4 <MX_USB_DEVICE_Init+0x50>)
 8006d8c:	4812      	ldr	r0, [pc, #72]	@ (8006dd8 <MX_USB_DEVICE_Init+0x54>)
 8006d8e:	f7fe fcf7 	bl	8005780 <USBD_Init>
 8006d92:	4603      	mov	r3, r0
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d001      	beq.n	8006d9c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006d98:	f7f9 fd04 	bl	80007a4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8006d9c:	490f      	ldr	r1, [pc, #60]	@ (8006ddc <MX_USB_DEVICE_Init+0x58>)
 8006d9e:	480e      	ldr	r0, [pc, #56]	@ (8006dd8 <MX_USB_DEVICE_Init+0x54>)
 8006da0:	f7fe fd1e 	bl	80057e0 <USBD_RegisterClass>
 8006da4:	4603      	mov	r3, r0
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d001      	beq.n	8006dae <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006daa:	f7f9 fcfb 	bl	80007a4 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8006dae:	490c      	ldr	r1, [pc, #48]	@ (8006de0 <MX_USB_DEVICE_Init+0x5c>)
 8006db0:	4809      	ldr	r0, [pc, #36]	@ (8006dd8 <MX_USB_DEVICE_Init+0x54>)
 8006db2:	f7fe fccb 	bl	800574c <USBD_CUSTOM_HID_RegisterInterface>
 8006db6:	4603      	mov	r3, r0
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d001      	beq.n	8006dc0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006dbc:	f7f9 fcf2 	bl	80007a4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006dc0:	4805      	ldr	r0, [pc, #20]	@ (8006dd8 <MX_USB_DEVICE_Init+0x54>)
 8006dc2:	f7fe fd43 	bl	800584c <USBD_Start>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d001      	beq.n	8006dd0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006dcc:	f7f9 fcea 	bl	80007a4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006dd0:	bf00      	nop
 8006dd2:	bd80      	pop	{r7, pc}
 8006dd4:	200000b4 	.word	0x200000b4
 8006dd8:	20000208 	.word	0x20000208
 8006ddc:	2000000c 	.word	0x2000000c
 8006de0:	200000a4 	.word	0x200000a4

08006de4 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8006de4:	b480      	push	{r7}
 8006de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006de8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr

08006df4 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8006df4:	b480      	push	{r7}
 8006df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8006df8:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr

08006e04 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b084      	sub	sp, #16
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	460a      	mov	r2, r1
 8006e0e:	71fb      	strb	r3, [r7, #7]
 8006e10:	4613      	mov	r3, r2
 8006e12:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  //Get pointer to received data (1 byte ID, 63 byte data)
  USBD_CUSTOM_HID_HandleTypeDef *hhid =
 8006e14:	4b0d      	ldr	r3, [pc, #52]	@ (8006e4c <CUSTOM_HID_OutEvent_FS+0x48>)
 8006e16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006e1a:	60fb      	str	r3, [r7, #12]
          (USBD_CUSTOM_HID_HandleTypeDef *)hUsbDeviceFS.pClassData;

      if (hhid == NULL) {
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d102      	bne.n	8006e28 <CUSTOM_HID_OutEvent_FS+0x24>
          return -1; // Handle error case
 8006e22:	f04f 33ff 	mov.w	r3, #4294967295
 8006e26:	e00c      	b.n	8006e42 <CUSTOM_HID_OutEvent_FS+0x3e>
      }

      // Pointer to received data buffer
      receivedData = hhid->Report_buf;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	4a09      	ldr	r2, [pc, #36]	@ (8006e50 <CUSTOM_HID_OutEvent_FS+0x4c>)
 8006e2c:	6013      	str	r3, [r2, #0]

  if (receivedData[0]) {}
  /* Start next USB packet transfer once data processing is completed */
  if (USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS) != (uint8_t)USBD_OK)
 8006e2e:	4807      	ldr	r0, [pc, #28]	@ (8006e4c <CUSTOM_HID_OutEvent_FS+0x48>)
 8006e30:	f7fe fc2a 	bl	8005688 <USBD_CUSTOM_HID_ReceivePacket>
 8006e34:	4603      	mov	r3, r0
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d002      	beq.n	8006e40 <CUSTOM_HID_OutEvent_FS+0x3c>
  {
    return -1;
 8006e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8006e3e:	e000      	b.n	8006e42 <CUSTOM_HID_OutEvent_FS+0x3e>
  }

  return (USBD_OK);
 8006e40:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3710      	adds	r7, #16
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
 8006e4a:	bf00      	nop
 8006e4c:	20000208 	.word	0x20000208
 8006e50:	200004e4 	.word	0x200004e4

08006e54 <Send_Data_ReportTest>:

void Send_Sleep_Report(uint8_t key_state) {
    uint8_t report[2] = {0x0A, key_state}; // Report ID 8 and key state (0x01 for press, 0x00 for release)
    USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, report, sizeof(report));  // Send the report
}
void Send_Data_ReportTest() {
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b088      	sub	sp, #32
 8006e58:	af00      	add	r7, sp, #0

	  if (hUsbDeviceFS.dev_state == USBD_STATE_CONFIGURED)
 8006e5a:	4b0e      	ldr	r3, [pc, #56]	@ (8006e94 <Send_Data_ReportTest+0x40>)
 8006e5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e60:	b2db      	uxtb	r3, r3
 8006e62:	2b03      	cmp	r3, #3
 8006e64:	d111      	bne.n	8006e8a <Send_Data_ReportTest+0x36>
	  {
	  uint8_t report[0x20];
	  report[0] = 0xFF;  // Report ID (if not using multiple IDs)
 8006e66:	23ff      	movs	r3, #255	@ 0xff
 8006e68:	703b      	strb	r3, [r7, #0]
	  report[1] = 0x00;  // Example data
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	707b      	strb	r3, [r7, #1]
	  report[2] = 0x01;  // Example data
 8006e6e:	2301      	movs	r3, #1
 8006e70:	70bb      	strb	r3, [r7, #2]
	  report[3] = 0x02;  // Example data
 8006e72:	2302      	movs	r3, #2
 8006e74:	70fb      	strb	r3, [r7, #3]
	  report[4] = 0x03;  // Example data
 8006e76:	2303      	movs	r3, #3
 8006e78:	713b      	strb	r3, [r7, #4]
	  report[5] = 0x04;  // Example data
 8006e7a:	2304      	movs	r3, #4
 8006e7c:	717b      	strb	r3, [r7, #5]
	  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, report, sizeof(report));
 8006e7e:	463b      	mov	r3, r7
 8006e80:	2220      	movs	r2, #32
 8006e82:	4619      	mov	r1, r3
 8006e84:	4803      	ldr	r0, [pc, #12]	@ (8006e94 <Send_Data_ReportTest+0x40>)
 8006e86:	f7fe faf1 	bl	800546c <USBD_CUSTOM_HID_SendReport>
	     }
}
 8006e8a:	bf00      	nop
 8006e8c:	3720      	adds	r7, #32
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}
 8006e92:	bf00      	nop
 8006e94:	20000208 	.word	0x20000208

08006e98 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b083      	sub	sp, #12
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	6039      	str	r1, [r7, #0]
 8006ea2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	2212      	movs	r2, #18
 8006ea8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006eaa:	4b03      	ldr	r3, [pc, #12]	@ (8006eb8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	370c      	adds	r7, #12
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr
 8006eb8:	200000d0 	.word	0x200000d0

08006ebc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b083      	sub	sp, #12
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	6039      	str	r1, [r7, #0]
 8006ec6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	2204      	movs	r2, #4
 8006ecc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006ece:	4b03      	ldr	r3, [pc, #12]	@ (8006edc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	370c      	adds	r7, #12
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr
 8006edc:	200000e4 	.word	0x200000e4

08006ee0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b082      	sub	sp, #8
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	6039      	str	r1, [r7, #0]
 8006eea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006eec:	79fb      	ldrb	r3, [r7, #7]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d105      	bne.n	8006efe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006ef2:	683a      	ldr	r2, [r7, #0]
 8006ef4:	4907      	ldr	r1, [pc, #28]	@ (8006f14 <USBD_FS_ProductStrDescriptor+0x34>)
 8006ef6:	4808      	ldr	r0, [pc, #32]	@ (8006f18 <USBD_FS_ProductStrDescriptor+0x38>)
 8006ef8:	f7ff fe58 	bl	8006bac <USBD_GetString>
 8006efc:	e004      	b.n	8006f08 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006efe:	683a      	ldr	r2, [r7, #0]
 8006f00:	4904      	ldr	r1, [pc, #16]	@ (8006f14 <USBD_FS_ProductStrDescriptor+0x34>)
 8006f02:	4805      	ldr	r0, [pc, #20]	@ (8006f18 <USBD_FS_ProductStrDescriptor+0x38>)
 8006f04:	f7ff fe52 	bl	8006bac <USBD_GetString>
  }
  return USBD_StrDesc;
 8006f08:	4b02      	ldr	r3, [pc, #8]	@ (8006f14 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3708      	adds	r7, #8
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}
 8006f12:	bf00      	nop
 8006f14:	200004e8 	.word	0x200004e8
 8006f18:	08007718 	.word	0x08007718

08006f1c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b082      	sub	sp, #8
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	4603      	mov	r3, r0
 8006f24:	6039      	str	r1, [r7, #0]
 8006f26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006f28:	683a      	ldr	r2, [r7, #0]
 8006f2a:	4904      	ldr	r1, [pc, #16]	@ (8006f3c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006f2c:	4804      	ldr	r0, [pc, #16]	@ (8006f40 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006f2e:	f7ff fe3d 	bl	8006bac <USBD_GetString>
  return USBD_StrDesc;
 8006f32:	4b02      	ldr	r3, [pc, #8]	@ (8006f3c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3708      	adds	r7, #8
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}
 8006f3c:	200004e8 	.word	0x200004e8
 8006f40:	08007738 	.word	0x08007738

08006f44 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b082      	sub	sp, #8
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	6039      	str	r1, [r7, #0]
 8006f4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	221a      	movs	r2, #26
 8006f54:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006f56:	f000 f843 	bl	8006fe0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006f5a:	4b02      	ldr	r3, [pc, #8]	@ (8006f64 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3708      	adds	r7, #8
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}
 8006f64:	200000e8 	.word	0x200000e8

08006f68 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b082      	sub	sp, #8
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	4603      	mov	r3, r0
 8006f70:	6039      	str	r1, [r7, #0]
 8006f72:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006f74:	79fb      	ldrb	r3, [r7, #7]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d105      	bne.n	8006f86 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006f7a:	683a      	ldr	r2, [r7, #0]
 8006f7c:	4907      	ldr	r1, [pc, #28]	@ (8006f9c <USBD_FS_ConfigStrDescriptor+0x34>)
 8006f7e:	4808      	ldr	r0, [pc, #32]	@ (8006fa0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006f80:	f7ff fe14 	bl	8006bac <USBD_GetString>
 8006f84:	e004      	b.n	8006f90 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006f86:	683a      	ldr	r2, [r7, #0]
 8006f88:	4904      	ldr	r1, [pc, #16]	@ (8006f9c <USBD_FS_ConfigStrDescriptor+0x34>)
 8006f8a:	4805      	ldr	r0, [pc, #20]	@ (8006fa0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006f8c:	f7ff fe0e 	bl	8006bac <USBD_GetString>
  }
  return USBD_StrDesc;
 8006f90:	4b02      	ldr	r3, [pc, #8]	@ (8006f9c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3708      	adds	r7, #8
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}
 8006f9a:	bf00      	nop
 8006f9c:	200004e8 	.word	0x200004e8
 8006fa0:	0800774c 	.word	0x0800774c

08006fa4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b082      	sub	sp, #8
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	4603      	mov	r3, r0
 8006fac:	6039      	str	r1, [r7, #0]
 8006fae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006fb0:	79fb      	ldrb	r3, [r7, #7]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d105      	bne.n	8006fc2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006fb6:	683a      	ldr	r2, [r7, #0]
 8006fb8:	4907      	ldr	r1, [pc, #28]	@ (8006fd8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006fba:	4808      	ldr	r0, [pc, #32]	@ (8006fdc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006fbc:	f7ff fdf6 	bl	8006bac <USBD_GetString>
 8006fc0:	e004      	b.n	8006fcc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006fc2:	683a      	ldr	r2, [r7, #0]
 8006fc4:	4904      	ldr	r1, [pc, #16]	@ (8006fd8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006fc6:	4805      	ldr	r0, [pc, #20]	@ (8006fdc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006fc8:	f7ff fdf0 	bl	8006bac <USBD_GetString>
  }
  return USBD_StrDesc;
 8006fcc:	4b02      	ldr	r3, [pc, #8]	@ (8006fd8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3708      	adds	r7, #8
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}
 8006fd6:	bf00      	nop
 8006fd8:	200004e8 	.word	0x200004e8
 8006fdc:	08007760 	.word	0x08007760

08006fe0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b084      	sub	sp, #16
 8006fe4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006fe6:	4b0f      	ldr	r3, [pc, #60]	@ (8007024 <Get_SerialNum+0x44>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006fec:	4b0e      	ldr	r3, [pc, #56]	@ (8007028 <Get_SerialNum+0x48>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006ff2:	4b0e      	ldr	r3, [pc, #56]	@ (800702c <Get_SerialNum+0x4c>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006ff8:	68fa      	ldr	r2, [r7, #12]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	4413      	add	r3, r2
 8006ffe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d009      	beq.n	800701a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007006:	2208      	movs	r2, #8
 8007008:	4909      	ldr	r1, [pc, #36]	@ (8007030 <Get_SerialNum+0x50>)
 800700a:	68f8      	ldr	r0, [r7, #12]
 800700c:	f000 f814 	bl	8007038 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007010:	2204      	movs	r2, #4
 8007012:	4908      	ldr	r1, [pc, #32]	@ (8007034 <Get_SerialNum+0x54>)
 8007014:	68b8      	ldr	r0, [r7, #8]
 8007016:	f000 f80f 	bl	8007038 <IntToUnicode>
  }
}
 800701a:	bf00      	nop
 800701c:	3710      	adds	r7, #16
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	1fff7a10 	.word	0x1fff7a10
 8007028:	1fff7a14 	.word	0x1fff7a14
 800702c:	1fff7a18 	.word	0x1fff7a18
 8007030:	200000ea 	.word	0x200000ea
 8007034:	200000fa 	.word	0x200000fa

08007038 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007038:	b480      	push	{r7}
 800703a:	b087      	sub	sp, #28
 800703c:	af00      	add	r7, sp, #0
 800703e:	60f8      	str	r0, [r7, #12]
 8007040:	60b9      	str	r1, [r7, #8]
 8007042:	4613      	mov	r3, r2
 8007044:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007046:	2300      	movs	r3, #0
 8007048:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800704a:	2300      	movs	r3, #0
 800704c:	75fb      	strb	r3, [r7, #23]
 800704e:	e027      	b.n	80070a0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	0f1b      	lsrs	r3, r3, #28
 8007054:	2b09      	cmp	r3, #9
 8007056:	d80b      	bhi.n	8007070 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	0f1b      	lsrs	r3, r3, #28
 800705c:	b2da      	uxtb	r2, r3
 800705e:	7dfb      	ldrb	r3, [r7, #23]
 8007060:	005b      	lsls	r3, r3, #1
 8007062:	4619      	mov	r1, r3
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	440b      	add	r3, r1
 8007068:	3230      	adds	r2, #48	@ 0x30
 800706a:	b2d2      	uxtb	r2, r2
 800706c:	701a      	strb	r2, [r3, #0]
 800706e:	e00a      	b.n	8007086 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	0f1b      	lsrs	r3, r3, #28
 8007074:	b2da      	uxtb	r2, r3
 8007076:	7dfb      	ldrb	r3, [r7, #23]
 8007078:	005b      	lsls	r3, r3, #1
 800707a:	4619      	mov	r1, r3
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	440b      	add	r3, r1
 8007080:	3237      	adds	r2, #55	@ 0x37
 8007082:	b2d2      	uxtb	r2, r2
 8007084:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	011b      	lsls	r3, r3, #4
 800708a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800708c:	7dfb      	ldrb	r3, [r7, #23]
 800708e:	005b      	lsls	r3, r3, #1
 8007090:	3301      	adds	r3, #1
 8007092:	68ba      	ldr	r2, [r7, #8]
 8007094:	4413      	add	r3, r2
 8007096:	2200      	movs	r2, #0
 8007098:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800709a:	7dfb      	ldrb	r3, [r7, #23]
 800709c:	3301      	adds	r3, #1
 800709e:	75fb      	strb	r3, [r7, #23]
 80070a0:	7dfa      	ldrb	r2, [r7, #23]
 80070a2:	79fb      	ldrb	r3, [r7, #7]
 80070a4:	429a      	cmp	r2, r3
 80070a6:	d3d3      	bcc.n	8007050 <IntToUnicode+0x18>
  }
}
 80070a8:	bf00      	nop
 80070aa:	bf00      	nop
 80070ac:	371c      	adds	r7, #28
 80070ae:	46bd      	mov	sp, r7
 80070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b4:	4770      	bx	lr
	...

080070b8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b08a      	sub	sp, #40	@ 0x28
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80070c0:	f107 0314 	add.w	r3, r7, #20
 80070c4:	2200      	movs	r2, #0
 80070c6:	601a      	str	r2, [r3, #0]
 80070c8:	605a      	str	r2, [r3, #4]
 80070ca:	609a      	str	r2, [r3, #8]
 80070cc:	60da      	str	r2, [r3, #12]
 80070ce:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80070d8:	d13a      	bne.n	8007150 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80070da:	2300      	movs	r3, #0
 80070dc:	613b      	str	r3, [r7, #16]
 80070de:	4b1e      	ldr	r3, [pc, #120]	@ (8007158 <HAL_PCD_MspInit+0xa0>)
 80070e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070e2:	4a1d      	ldr	r2, [pc, #116]	@ (8007158 <HAL_PCD_MspInit+0xa0>)
 80070e4:	f043 0301 	orr.w	r3, r3, #1
 80070e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80070ea:	4b1b      	ldr	r3, [pc, #108]	@ (8007158 <HAL_PCD_MspInit+0xa0>)
 80070ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070ee:	f003 0301 	and.w	r3, r3, #1
 80070f2:	613b      	str	r3, [r7, #16]
 80070f4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80070f6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80070fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070fc:	2302      	movs	r3, #2
 80070fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007100:	2300      	movs	r3, #0
 8007102:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007104:	2303      	movs	r3, #3
 8007106:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007108:	230a      	movs	r3, #10
 800710a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800710c:	f107 0314 	add.w	r3, r7, #20
 8007110:	4619      	mov	r1, r3
 8007112:	4812      	ldr	r0, [pc, #72]	@ (800715c <HAL_PCD_MspInit+0xa4>)
 8007114:	f7f9 fff0 	bl	80010f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007118:	4b0f      	ldr	r3, [pc, #60]	@ (8007158 <HAL_PCD_MspInit+0xa0>)
 800711a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800711c:	4a0e      	ldr	r2, [pc, #56]	@ (8007158 <HAL_PCD_MspInit+0xa0>)
 800711e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007122:	6353      	str	r3, [r2, #52]	@ 0x34
 8007124:	2300      	movs	r3, #0
 8007126:	60fb      	str	r3, [r7, #12]
 8007128:	4b0b      	ldr	r3, [pc, #44]	@ (8007158 <HAL_PCD_MspInit+0xa0>)
 800712a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800712c:	4a0a      	ldr	r2, [pc, #40]	@ (8007158 <HAL_PCD_MspInit+0xa0>)
 800712e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007132:	6453      	str	r3, [r2, #68]	@ 0x44
 8007134:	4b08      	ldr	r3, [pc, #32]	@ (8007158 <HAL_PCD_MspInit+0xa0>)
 8007136:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007138:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800713c:	60fb      	str	r3, [r7, #12]
 800713e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007140:	2200      	movs	r2, #0
 8007142:	2100      	movs	r1, #0
 8007144:	2043      	movs	r0, #67	@ 0x43
 8007146:	f7f9 ff1a 	bl	8000f7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800714a:	2043      	movs	r0, #67	@ 0x43
 800714c:	f7f9 ff33 	bl	8000fb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007150:	bf00      	nop
 8007152:	3728      	adds	r7, #40	@ 0x28
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}
 8007158:	40023800 	.word	0x40023800
 800715c:	40020000 	.word	0x40020000

08007160 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b082      	sub	sp, #8
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007174:	4619      	mov	r1, r3
 8007176:	4610      	mov	r0, r2
 8007178:	f7fe fbb5 	bl	80058e6 <USBD_LL_SetupStage>
}
 800717c:	bf00      	nop
 800717e:	3708      	adds	r7, #8
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}

08007184 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b082      	sub	sp, #8
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	460b      	mov	r3, r1
 800718e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007196:	78fa      	ldrb	r2, [r7, #3]
 8007198:	6879      	ldr	r1, [r7, #4]
 800719a:	4613      	mov	r3, r2
 800719c:	00db      	lsls	r3, r3, #3
 800719e:	4413      	add	r3, r2
 80071a0:	009b      	lsls	r3, r3, #2
 80071a2:	440b      	add	r3, r1
 80071a4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	78fb      	ldrb	r3, [r7, #3]
 80071ac:	4619      	mov	r1, r3
 80071ae:	f7fe fbef 	bl	8005990 <USBD_LL_DataOutStage>
}
 80071b2:	bf00      	nop
 80071b4:	3708      	adds	r7, #8
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}

080071ba <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071ba:	b580      	push	{r7, lr}
 80071bc:	b082      	sub	sp, #8
 80071be:	af00      	add	r7, sp, #0
 80071c0:	6078      	str	r0, [r7, #4]
 80071c2:	460b      	mov	r3, r1
 80071c4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80071cc:	78fa      	ldrb	r2, [r7, #3]
 80071ce:	6879      	ldr	r1, [r7, #4]
 80071d0:	4613      	mov	r3, r2
 80071d2:	00db      	lsls	r3, r3, #3
 80071d4:	4413      	add	r3, r2
 80071d6:	009b      	lsls	r3, r3, #2
 80071d8:	440b      	add	r3, r1
 80071da:	3320      	adds	r3, #32
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	78fb      	ldrb	r3, [r7, #3]
 80071e0:	4619      	mov	r1, r3
 80071e2:	f7fe fc88 	bl	8005af6 <USBD_LL_DataInStage>
}
 80071e6:	bf00      	nop
 80071e8:	3708      	adds	r7, #8
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}

080071ee <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071ee:	b580      	push	{r7, lr}
 80071f0:	b082      	sub	sp, #8
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80071fc:	4618      	mov	r0, r3
 80071fe:	f7fe fdc2 	bl	8005d86 <USBD_LL_SOF>
}
 8007202:	bf00      	nop
 8007204:	3708      	adds	r7, #8
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}

0800720a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800720a:	b580      	push	{r7, lr}
 800720c:	b084      	sub	sp, #16
 800720e:	af00      	add	r7, sp, #0
 8007210:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007212:	2301      	movs	r3, #1
 8007214:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	79db      	ldrb	r3, [r3, #7]
 800721a:	2b02      	cmp	r3, #2
 800721c:	d001      	beq.n	8007222 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800721e:	f7f9 fac1 	bl	80007a4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007228:	7bfa      	ldrb	r2, [r7, #15]
 800722a:	4611      	mov	r1, r2
 800722c:	4618      	mov	r0, r3
 800722e:	f7fe fd66 	bl	8005cfe <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007238:	4618      	mov	r0, r3
 800723a:	f7fe fd0e 	bl	8005c5a <USBD_LL_Reset>
}
 800723e:	bf00      	nop
 8007240:	3710      	adds	r7, #16
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}
	...

08007248 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b082      	sub	sp, #8
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007256:	4618      	mov	r0, r3
 8007258:	f7fe fd61 	bl	8005d1e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	687a      	ldr	r2, [r7, #4]
 8007268:	6812      	ldr	r2, [r2, #0]
 800726a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800726e:	f043 0301 	orr.w	r3, r3, #1
 8007272:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	7adb      	ldrb	r3, [r3, #11]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d005      	beq.n	8007288 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800727c:	4b04      	ldr	r3, [pc, #16]	@ (8007290 <HAL_PCD_SuspendCallback+0x48>)
 800727e:	691b      	ldr	r3, [r3, #16]
 8007280:	4a03      	ldr	r2, [pc, #12]	@ (8007290 <HAL_PCD_SuspendCallback+0x48>)
 8007282:	f043 0306 	orr.w	r3, r3, #6
 8007286:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007288:	bf00      	nop
 800728a:	3708      	adds	r7, #8
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}
 8007290:	e000ed00 	.word	0xe000ed00

08007294 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b082      	sub	sp, #8
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80072a2:	4618      	mov	r0, r3
 80072a4:	f7fe fd57 	bl	8005d56 <USBD_LL_Resume>
}
 80072a8:	bf00      	nop
 80072aa:	3708      	adds	r7, #8
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}

080072b0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b082      	sub	sp, #8
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	460b      	mov	r3, r1
 80072ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80072c2:	78fa      	ldrb	r2, [r7, #3]
 80072c4:	4611      	mov	r1, r2
 80072c6:	4618      	mov	r0, r3
 80072c8:	f7fe fdaf 	bl	8005e2a <USBD_LL_IsoOUTIncomplete>
}
 80072cc:	bf00      	nop
 80072ce:	3708      	adds	r7, #8
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}

080072d4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b082      	sub	sp, #8
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
 80072dc:	460b      	mov	r3, r1
 80072de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80072e6:	78fa      	ldrb	r2, [r7, #3]
 80072e8:	4611      	mov	r1, r2
 80072ea:	4618      	mov	r0, r3
 80072ec:	f7fe fd6b 	bl	8005dc6 <USBD_LL_IsoINIncomplete>
}
 80072f0:	bf00      	nop
 80072f2:	3708      	adds	r7, #8
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b082      	sub	sp, #8
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007306:	4618      	mov	r0, r3
 8007308:	f7fe fdc1 	bl	8005e8e <USBD_LL_DevConnected>
}
 800730c:	bf00      	nop
 800730e:	3708      	adds	r7, #8
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b082      	sub	sp, #8
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007322:	4618      	mov	r0, r3
 8007324:	f7fe fdbe 	bl	8005ea4 <USBD_LL_DevDisconnected>
}
 8007328:	bf00      	nop
 800732a:	3708      	adds	r7, #8
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}

08007330 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b082      	sub	sp, #8
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	781b      	ldrb	r3, [r3, #0]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d13c      	bne.n	80073ba <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007340:	4a20      	ldr	r2, [pc, #128]	@ (80073c4 <USBD_LL_Init+0x94>)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	4a1e      	ldr	r2, [pc, #120]	@ (80073c4 <USBD_LL_Init+0x94>)
 800734c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007350:	4b1c      	ldr	r3, [pc, #112]	@ (80073c4 <USBD_LL_Init+0x94>)
 8007352:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8007356:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007358:	4b1a      	ldr	r3, [pc, #104]	@ (80073c4 <USBD_LL_Init+0x94>)
 800735a:	2204      	movs	r2, #4
 800735c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800735e:	4b19      	ldr	r3, [pc, #100]	@ (80073c4 <USBD_LL_Init+0x94>)
 8007360:	2202      	movs	r2, #2
 8007362:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007364:	4b17      	ldr	r3, [pc, #92]	@ (80073c4 <USBD_LL_Init+0x94>)
 8007366:	2200      	movs	r2, #0
 8007368:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800736a:	4b16      	ldr	r3, [pc, #88]	@ (80073c4 <USBD_LL_Init+0x94>)
 800736c:	2202      	movs	r2, #2
 800736e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007370:	4b14      	ldr	r3, [pc, #80]	@ (80073c4 <USBD_LL_Init+0x94>)
 8007372:	2200      	movs	r2, #0
 8007374:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007376:	4b13      	ldr	r3, [pc, #76]	@ (80073c4 <USBD_LL_Init+0x94>)
 8007378:	2200      	movs	r2, #0
 800737a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800737c:	4b11      	ldr	r3, [pc, #68]	@ (80073c4 <USBD_LL_Init+0x94>)
 800737e:	2200      	movs	r2, #0
 8007380:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007382:	4b10      	ldr	r3, [pc, #64]	@ (80073c4 <USBD_LL_Init+0x94>)
 8007384:	2200      	movs	r2, #0
 8007386:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007388:	4b0e      	ldr	r3, [pc, #56]	@ (80073c4 <USBD_LL_Init+0x94>)
 800738a:	2200      	movs	r2, #0
 800738c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800738e:	480d      	ldr	r0, [pc, #52]	@ (80073c4 <USBD_LL_Init+0x94>)
 8007390:	f7fa f836 	bl	8001400 <HAL_PCD_Init>
 8007394:	4603      	mov	r3, r0
 8007396:	2b00      	cmp	r3, #0
 8007398:	d001      	beq.n	800739e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800739a:	f7f9 fa03 	bl	80007a4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800739e:	2180      	movs	r1, #128	@ 0x80
 80073a0:	4808      	ldr	r0, [pc, #32]	@ (80073c4 <USBD_LL_Init+0x94>)
 80073a2:	f7fb fa4a 	bl	800283a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80073a6:	2240      	movs	r2, #64	@ 0x40
 80073a8:	2100      	movs	r1, #0
 80073aa:	4806      	ldr	r0, [pc, #24]	@ (80073c4 <USBD_LL_Init+0x94>)
 80073ac:	f7fb f9fe 	bl	80027ac <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80073b0:	2280      	movs	r2, #128	@ 0x80
 80073b2:	2101      	movs	r1, #1
 80073b4:	4803      	ldr	r0, [pc, #12]	@ (80073c4 <USBD_LL_Init+0x94>)
 80073b6:	f7fb f9f9 	bl	80027ac <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80073ba:	2300      	movs	r3, #0
}
 80073bc:	4618      	mov	r0, r3
 80073be:	3708      	adds	r7, #8
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}
 80073c4:	200006e8 	.word	0x200006e8

080073c8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b084      	sub	sp, #16
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073d0:	2300      	movs	r3, #0
 80073d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073d4:	2300      	movs	r3, #0
 80073d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80073de:	4618      	mov	r0, r3
 80073e0:	f7fa f91d 	bl	800161e <HAL_PCD_Start>
 80073e4:	4603      	mov	r3, r0
 80073e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80073e8:	7bfb      	ldrb	r3, [r7, #15]
 80073ea:	4618      	mov	r0, r3
 80073ec:	f000 f930 	bl	8007650 <USBD_Get_USB_Status>
 80073f0:	4603      	mov	r3, r0
 80073f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80073f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3710      	adds	r7, #16
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}

080073fe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80073fe:	b580      	push	{r7, lr}
 8007400:	b084      	sub	sp, #16
 8007402:	af00      	add	r7, sp, #0
 8007404:	6078      	str	r0, [r7, #4]
 8007406:	4608      	mov	r0, r1
 8007408:	4611      	mov	r1, r2
 800740a:	461a      	mov	r2, r3
 800740c:	4603      	mov	r3, r0
 800740e:	70fb      	strb	r3, [r7, #3]
 8007410:	460b      	mov	r3, r1
 8007412:	70bb      	strb	r3, [r7, #2]
 8007414:	4613      	mov	r3, r2
 8007416:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007418:	2300      	movs	r3, #0
 800741a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800741c:	2300      	movs	r3, #0
 800741e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007426:	78bb      	ldrb	r3, [r7, #2]
 8007428:	883a      	ldrh	r2, [r7, #0]
 800742a:	78f9      	ldrb	r1, [r7, #3]
 800742c:	f7fa fdf1 	bl	8002012 <HAL_PCD_EP_Open>
 8007430:	4603      	mov	r3, r0
 8007432:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007434:	7bfb      	ldrb	r3, [r7, #15]
 8007436:	4618      	mov	r0, r3
 8007438:	f000 f90a 	bl	8007650 <USBD_Get_USB_Status>
 800743c:	4603      	mov	r3, r0
 800743e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007440:	7bbb      	ldrb	r3, [r7, #14]
}
 8007442:	4618      	mov	r0, r3
 8007444:	3710      	adds	r7, #16
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}

0800744a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800744a:	b580      	push	{r7, lr}
 800744c:	b084      	sub	sp, #16
 800744e:	af00      	add	r7, sp, #0
 8007450:	6078      	str	r0, [r7, #4]
 8007452:	460b      	mov	r3, r1
 8007454:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007456:	2300      	movs	r3, #0
 8007458:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800745a:	2300      	movs	r3, #0
 800745c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007464:	78fa      	ldrb	r2, [r7, #3]
 8007466:	4611      	mov	r1, r2
 8007468:	4618      	mov	r0, r3
 800746a:	f7fa fe3c 	bl	80020e6 <HAL_PCD_EP_Close>
 800746e:	4603      	mov	r3, r0
 8007470:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007472:	7bfb      	ldrb	r3, [r7, #15]
 8007474:	4618      	mov	r0, r3
 8007476:	f000 f8eb 	bl	8007650 <USBD_Get_USB_Status>
 800747a:	4603      	mov	r3, r0
 800747c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800747e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007480:	4618      	mov	r0, r3
 8007482:	3710      	adds	r7, #16
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}

08007488 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b084      	sub	sp, #16
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
 8007490:	460b      	mov	r3, r1
 8007492:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007494:	2300      	movs	r3, #0
 8007496:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007498:	2300      	movs	r3, #0
 800749a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80074a2:	78fa      	ldrb	r2, [r7, #3]
 80074a4:	4611      	mov	r1, r2
 80074a6:	4618      	mov	r0, r3
 80074a8:	f7fa fedc 	bl	8002264 <HAL_PCD_EP_SetStall>
 80074ac:	4603      	mov	r3, r0
 80074ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074b0:	7bfb      	ldrb	r3, [r7, #15]
 80074b2:	4618      	mov	r0, r3
 80074b4:	f000 f8cc 	bl	8007650 <USBD_Get_USB_Status>
 80074b8:	4603      	mov	r3, r0
 80074ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80074bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3710      	adds	r7, #16
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}

080074c6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80074c6:	b580      	push	{r7, lr}
 80074c8:	b084      	sub	sp, #16
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	6078      	str	r0, [r7, #4]
 80074ce:	460b      	mov	r3, r1
 80074d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074d2:	2300      	movs	r3, #0
 80074d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074d6:	2300      	movs	r3, #0
 80074d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80074e0:	78fa      	ldrb	r2, [r7, #3]
 80074e2:	4611      	mov	r1, r2
 80074e4:	4618      	mov	r0, r3
 80074e6:	f7fa ff20 	bl	800232a <HAL_PCD_EP_ClrStall>
 80074ea:	4603      	mov	r3, r0
 80074ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074ee:	7bfb      	ldrb	r3, [r7, #15]
 80074f0:	4618      	mov	r0, r3
 80074f2:	f000 f8ad 	bl	8007650 <USBD_Get_USB_Status>
 80074f6:	4603      	mov	r3, r0
 80074f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80074fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3710      	adds	r7, #16
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}

08007504 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007504:	b480      	push	{r7}
 8007506:	b085      	sub	sp, #20
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	460b      	mov	r3, r1
 800750e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007516:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007518:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800751c:	2b00      	cmp	r3, #0
 800751e:	da0b      	bge.n	8007538 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007520:	78fb      	ldrb	r3, [r7, #3]
 8007522:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007526:	68f9      	ldr	r1, [r7, #12]
 8007528:	4613      	mov	r3, r2
 800752a:	00db      	lsls	r3, r3, #3
 800752c:	4413      	add	r3, r2
 800752e:	009b      	lsls	r3, r3, #2
 8007530:	440b      	add	r3, r1
 8007532:	3316      	adds	r3, #22
 8007534:	781b      	ldrb	r3, [r3, #0]
 8007536:	e00b      	b.n	8007550 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007538:	78fb      	ldrb	r3, [r7, #3]
 800753a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800753e:	68f9      	ldr	r1, [r7, #12]
 8007540:	4613      	mov	r3, r2
 8007542:	00db      	lsls	r3, r3, #3
 8007544:	4413      	add	r3, r2
 8007546:	009b      	lsls	r3, r3, #2
 8007548:	440b      	add	r3, r1
 800754a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800754e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007550:	4618      	mov	r0, r3
 8007552:	3714      	adds	r7, #20
 8007554:	46bd      	mov	sp, r7
 8007556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755a:	4770      	bx	lr

0800755c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b084      	sub	sp, #16
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	460b      	mov	r3, r1
 8007566:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007568:	2300      	movs	r3, #0
 800756a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800756c:	2300      	movs	r3, #0
 800756e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007576:	78fa      	ldrb	r2, [r7, #3]
 8007578:	4611      	mov	r1, r2
 800757a:	4618      	mov	r0, r3
 800757c:	f7fa fd25 	bl	8001fca <HAL_PCD_SetAddress>
 8007580:	4603      	mov	r3, r0
 8007582:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007584:	7bfb      	ldrb	r3, [r7, #15]
 8007586:	4618      	mov	r0, r3
 8007588:	f000 f862 	bl	8007650 <USBD_Get_USB_Status>
 800758c:	4603      	mov	r3, r0
 800758e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007590:	7bbb      	ldrb	r3, [r7, #14]
}
 8007592:	4618      	mov	r0, r3
 8007594:	3710      	adds	r7, #16
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}

0800759a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800759a:	b580      	push	{r7, lr}
 800759c:	b086      	sub	sp, #24
 800759e:	af00      	add	r7, sp, #0
 80075a0:	60f8      	str	r0, [r7, #12]
 80075a2:	607a      	str	r2, [r7, #4]
 80075a4:	603b      	str	r3, [r7, #0]
 80075a6:	460b      	mov	r3, r1
 80075a8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075aa:	2300      	movs	r3, #0
 80075ac:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075ae:	2300      	movs	r3, #0
 80075b0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80075b8:	7af9      	ldrb	r1, [r7, #11]
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	687a      	ldr	r2, [r7, #4]
 80075be:	f7fa fe17 	bl	80021f0 <HAL_PCD_EP_Transmit>
 80075c2:	4603      	mov	r3, r0
 80075c4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075c6:	7dfb      	ldrb	r3, [r7, #23]
 80075c8:	4618      	mov	r0, r3
 80075ca:	f000 f841 	bl	8007650 <USBD_Get_USB_Status>
 80075ce:	4603      	mov	r3, r0
 80075d0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80075d2:	7dbb      	ldrb	r3, [r7, #22]
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3718      	adds	r7, #24
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}

080075dc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b086      	sub	sp, #24
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	60f8      	str	r0, [r7, #12]
 80075e4:	607a      	str	r2, [r7, #4]
 80075e6:	603b      	str	r3, [r7, #0]
 80075e8:	460b      	mov	r3, r1
 80075ea:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075ec:	2300      	movs	r3, #0
 80075ee:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075f0:	2300      	movs	r3, #0
 80075f2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80075fa:	7af9      	ldrb	r1, [r7, #11]
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	687a      	ldr	r2, [r7, #4]
 8007600:	f7fa fdbb 	bl	800217a <HAL_PCD_EP_Receive>
 8007604:	4603      	mov	r3, r0
 8007606:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007608:	7dfb      	ldrb	r3, [r7, #23]
 800760a:	4618      	mov	r0, r3
 800760c:	f000 f820 	bl	8007650 <USBD_Get_USB_Status>
 8007610:	4603      	mov	r3, r0
 8007612:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007614:	7dbb      	ldrb	r3, [r7, #22]
}
 8007616:	4618      	mov	r0, r3
 8007618:	3718      	adds	r7, #24
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
	...

08007620 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007620:	b480      	push	{r7}
 8007622:	b083      	sub	sp, #12
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8007628:	4b03      	ldr	r3, [pc, #12]	@ (8007638 <USBD_static_malloc+0x18>)
}
 800762a:	4618      	mov	r0, r3
 800762c:	370c      	adds	r7, #12
 800762e:	46bd      	mov	sp, r7
 8007630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007634:	4770      	bx	lr
 8007636:	bf00      	nop
 8007638:	20000bcc 	.word	0x20000bcc

0800763c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800763c:	b480      	push	{r7}
 800763e:	b083      	sub	sp, #12
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]

}
 8007644:	bf00      	nop
 8007646:	370c      	adds	r7, #12
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr

08007650 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007650:	b480      	push	{r7}
 8007652:	b085      	sub	sp, #20
 8007654:	af00      	add	r7, sp, #0
 8007656:	4603      	mov	r3, r0
 8007658:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800765a:	2300      	movs	r3, #0
 800765c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800765e:	79fb      	ldrb	r3, [r7, #7]
 8007660:	2b03      	cmp	r3, #3
 8007662:	d817      	bhi.n	8007694 <USBD_Get_USB_Status+0x44>
 8007664:	a201      	add	r2, pc, #4	@ (adr r2, 800766c <USBD_Get_USB_Status+0x1c>)
 8007666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800766a:	bf00      	nop
 800766c:	0800767d 	.word	0x0800767d
 8007670:	08007683 	.word	0x08007683
 8007674:	08007689 	.word	0x08007689
 8007678:	0800768f 	.word	0x0800768f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800767c:	2300      	movs	r3, #0
 800767e:	73fb      	strb	r3, [r7, #15]
    break;
 8007680:	e00b      	b.n	800769a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007682:	2303      	movs	r3, #3
 8007684:	73fb      	strb	r3, [r7, #15]
    break;
 8007686:	e008      	b.n	800769a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007688:	2301      	movs	r3, #1
 800768a:	73fb      	strb	r3, [r7, #15]
    break;
 800768c:	e005      	b.n	800769a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800768e:	2303      	movs	r3, #3
 8007690:	73fb      	strb	r3, [r7, #15]
    break;
 8007692:	e002      	b.n	800769a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007694:	2303      	movs	r3, #3
 8007696:	73fb      	strb	r3, [r7, #15]
    break;
 8007698:	bf00      	nop
  }
  return usb_status;
 800769a:	7bfb      	ldrb	r3, [r7, #15]
}
 800769c:	4618      	mov	r0, r3
 800769e:	3714      	adds	r7, #20
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr

080076a8 <memset>:
 80076a8:	4402      	add	r2, r0
 80076aa:	4603      	mov	r3, r0
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d100      	bne.n	80076b2 <memset+0xa>
 80076b0:	4770      	bx	lr
 80076b2:	f803 1b01 	strb.w	r1, [r3], #1
 80076b6:	e7f9      	b.n	80076ac <memset+0x4>

080076b8 <__libc_init_array>:
 80076b8:	b570      	push	{r4, r5, r6, lr}
 80076ba:	4d0d      	ldr	r5, [pc, #52]	@ (80076f0 <__libc_init_array+0x38>)
 80076bc:	4c0d      	ldr	r4, [pc, #52]	@ (80076f4 <__libc_init_array+0x3c>)
 80076be:	1b64      	subs	r4, r4, r5
 80076c0:	10a4      	asrs	r4, r4, #2
 80076c2:	2600      	movs	r6, #0
 80076c4:	42a6      	cmp	r6, r4
 80076c6:	d109      	bne.n	80076dc <__libc_init_array+0x24>
 80076c8:	4d0b      	ldr	r5, [pc, #44]	@ (80076f8 <__libc_init_array+0x40>)
 80076ca:	4c0c      	ldr	r4, [pc, #48]	@ (80076fc <__libc_init_array+0x44>)
 80076cc:	f000 f818 	bl	8007700 <_init>
 80076d0:	1b64      	subs	r4, r4, r5
 80076d2:	10a4      	asrs	r4, r4, #2
 80076d4:	2600      	movs	r6, #0
 80076d6:	42a6      	cmp	r6, r4
 80076d8:	d105      	bne.n	80076e6 <__libc_init_array+0x2e>
 80076da:	bd70      	pop	{r4, r5, r6, pc}
 80076dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80076e0:	4798      	blx	r3
 80076e2:	3601      	adds	r6, #1
 80076e4:	e7ee      	b.n	80076c4 <__libc_init_array+0xc>
 80076e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80076ea:	4798      	blx	r3
 80076ec:	3601      	adds	r6, #1
 80076ee:	e7f2      	b.n	80076d6 <__libc_init_array+0x1e>
 80076f0:	08007790 	.word	0x08007790
 80076f4:	08007790 	.word	0x08007790
 80076f8:	08007790 	.word	0x08007790
 80076fc:	08007794 	.word	0x08007794

08007700 <_init>:
 8007700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007702:	bf00      	nop
 8007704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007706:	bc08      	pop	{r3}
 8007708:	469e      	mov	lr, r3
 800770a:	4770      	bx	lr

0800770c <_fini>:
 800770c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800770e:	bf00      	nop
 8007710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007712:	bc08      	pop	{r3}
 8007714:	469e      	mov	lr, r3
 8007716:	4770      	bx	lr
